ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchjfkxS.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/main.c"
  20              		.global	hi2c1
  21              		.section	.bss.hi2c1,"aw",%nobits
  22              		.align	2
  25              	hi2c1:
  26 0000 00000000 		.space	84
  26      00000000 
  26      00000000 
  26      00000000 
  26      00000000 
  27              		.global	huart1
  28              		.section	.bss.huart1,"aw",%nobits
  29              		.align	2
  32              	huart1:
  33 0000 00000000 		.space	72
  33      00000000 
  33      00000000 
  33      00000000 
  33      00000000 
  34              		.global	__aeabi_d2iz
  35              		.global	__aeabi_i2d
  36              		.global	__aeabi_dsub
  37              		.global	__aeabi_dmul
  38              		.section	.rodata
  39              		.align	2
  40              	.LC0:
  41 0000 25692E25 		.ascii	"%i.%i\015\012\000"
  41      690D0A00 
  42              		.section	.text.printDouble,"ax",%progbits
  43              		.align	1
  44              		.global	printDouble
  45              		.syntax unified
  46              		.thumb
  47              		.thumb_func
  49              	printDouble:
  50              	.LFB138:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchjfkxS.s 			page 2


   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** #include "usb_device.h"
  22:Core/Src/main.c **** 
  23:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/main.c **** #include "mpu6050.h"
  26:Core/Src/main.c **** /* USER CODE END Includes */
  27:Core/Src/main.c **** 
  28:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  29:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  30:Core/Src/main.c **** 
  31:Core/Src/main.c **** /* USER CODE END PTD */
  32:Core/Src/main.c **** 
  33:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  34:Core/Src/main.c **** /* USER CODE BEGIN PD */
  35:Core/Src/main.c **** 
  36:Core/Src/main.c **** /* USER CODE END PD */
  37:Core/Src/main.c **** 
  38:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  39:Core/Src/main.c **** /* USER CODE BEGIN PM */
  40:Core/Src/main.c **** 
  41:Core/Src/main.c **** /* USER CODE END PM */
  42:Core/Src/main.c **** 
  43:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  44:Core/Src/main.c **** I2C_HandleTypeDef hi2c1;
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** UART_HandleTypeDef huart1;
  47:Core/Src/main.c **** 
  48:Core/Src/main.c **** /* USER CODE BEGIN PV */
  49:Core/Src/main.c **** 
  50:Core/Src/main.c **** /* USER CODE END PV */
  51:Core/Src/main.c **** 
  52:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  53:Core/Src/main.c **** void SystemClock_Config(void);
  54:Core/Src/main.c **** static void MX_GPIO_Init(void);
  55:Core/Src/main.c **** static void MX_I2C1_Init(void);
  56:Core/Src/main.c **** static void MX_USART1_UART_Init(void);
  57:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  58:Core/Src/main.c **** 
  59:Core/Src/main.c **** /* USER CODE END PFP */
  60:Core/Src/main.c **** 
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchjfkxS.s 			page 3


  61:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  62:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  63:Core/Src/main.c **** void printDouble(double v, int decimalDigits)
  64:Core/Src/main.c **** {
  51              		.loc 1 64 1
  52              		.cfi_startproc
  53              		@ args = 0, pretend = 0, frame = 64
  54              		@ frame_needed = 1, uses_anonymous_args = 0
  55 0000 B0B5     		push	{r4, r5, r7, lr}
  56              	.LCFI0:
  57              		.cfi_def_cfa_offset 16
  58              		.cfi_offset 4, -16
  59              		.cfi_offset 5, -12
  60              		.cfi_offset 7, -8
  61              		.cfi_offset 14, -4
  62 0002 90B0     		sub	sp, sp, #64
  63              	.LCFI1:
  64              		.cfi_def_cfa_offset 80
  65 0004 00AF     		add	r7, sp, #0
  66              	.LCFI2:
  67              		.cfi_def_cfa_register 7
  68 0006 87ED020B 		vstr.64	d0, [r7, #8]
  69 000a 7860     		str	r0, [r7, #4]
  65:Core/Src/main.c ****   int i = 1;
  70              		.loc 1 65 7
  71 000c 0123     		movs	r3, #1
  72 000e FB63     		str	r3, [r7, #60]
  66:Core/Src/main.c ****   int intPart, fractPart;
  67:Core/Src/main.c ****   for (;decimalDigits!=0; i*=10, decimalDigits--);
  73              		.loc 1 67 3
  74 0010 08E0     		b	.L2
  75              	.L3:
  76              		.loc 1 67 28 discriminator 2
  77 0012 FA6B     		ldr	r2, [r7, #60]
  78 0014 1346     		mov	r3, r2
  79 0016 9B00     		lsls	r3, r3, #2
  80 0018 1344     		add	r3, r3, r2
  81 001a 5B00     		lsls	r3, r3, #1
  82 001c FB63     		str	r3, [r7, #60]
  83              		.loc 1 67 47 discriminator 2
  84 001e 7B68     		ldr	r3, [r7, #4]
  85 0020 013B     		subs	r3, r3, #1
  86 0022 7B60     		str	r3, [r7, #4]
  87              	.L2:
  88              		.loc 1 67 22 discriminator 1
  89 0024 7B68     		ldr	r3, [r7, #4]
  90 0026 002B     		cmp	r3, #0
  91 0028 F3D1     		bne	.L3
  68:Core/Src/main.c ****   intPart = (int)v;
  92              		.loc 1 68 11
  93 002a D7E90201 		ldrd	r0, [r7, #8]
  94 002e FFF7FEFF 		bl	__aeabi_d2iz
  95 0032 0346     		mov	r3, r0
  96 0034 7B63     		str	r3, [r7, #52]
  69:Core/Src/main.c ****   fractPart = (int)((v-(double)(int)v)*i);
  97              		.loc 1 69 32
  98 0036 D7E90201 		ldrd	r0, [r7, #8]
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchjfkxS.s 			page 4


  99 003a FFF7FEFF 		bl	__aeabi_d2iz
 100 003e 0346     		mov	r3, r0
 101              		.loc 1 69 24
 102 0040 1846     		mov	r0, r3
 103 0042 FFF7FEFF 		bl	__aeabi_i2d
 104 0046 0246     		mov	r2, r0
 105 0048 0B46     		mov	r3, r1
 106              		.loc 1 69 23
 107 004a D7E90201 		ldrd	r0, [r7, #8]
 108 004e FFF7FEFF 		bl	__aeabi_dsub
 109 0052 0246     		mov	r2, r0
 110 0054 0B46     		mov	r3, r1
 111 0056 1446     		mov	r4, r2
 112 0058 1D46     		mov	r5, r3
 113              		.loc 1 69 39
 114 005a F86B     		ldr	r0, [r7, #60]
 115 005c FFF7FEFF 		bl	__aeabi_i2d
 116 0060 0246     		mov	r2, r0
 117 0062 0B46     		mov	r3, r1
 118 0064 2046     		mov	r0, r4
 119 0066 2946     		mov	r1, r5
 120 0068 FFF7FEFF 		bl	__aeabi_dmul
 121 006c 0246     		mov	r2, r0
 122 006e 0B46     		mov	r3, r1
 123              		.loc 1 69 13
 124 0070 1046     		mov	r0, r2
 125 0072 1946     		mov	r1, r3
 126 0074 FFF7FEFF 		bl	__aeabi_d2iz
 127 0078 0346     		mov	r3, r0
 128 007a BB63     		str	r3, [r7, #56]
  70:Core/Src/main.c ****   if(fractPart < 0) fractPart *= -1;
 129              		.loc 1 70 5
 130 007c BB6B     		ldr	r3, [r7, #56]
 131 007e 002B     		cmp	r3, #0
 132 0080 02DA     		bge	.L4
 133              		.loc 1 70 31 discriminator 1
 134 0082 BB6B     		ldr	r3, [r7, #56]
 135 0084 5B42     		rsbs	r3, r3, #0
 136 0086 BB63     		str	r3, [r7, #56]
 137              	.L4:
  71:Core/Src/main.c ****   char buf[30];
  72:Core/Src/main.c ****   sprintf(buf, "%i.%i\r\n", intPart, fractPart);
 138              		.loc 1 72 3
 139 0088 07F11400 		add	r0, r7, #20
 140 008c BB6B     		ldr	r3, [r7, #56]
 141 008e 7A6B     		ldr	r2, [r7, #52]
 142 0090 0649     		ldr	r1, .L5
 143 0092 FFF7FEFF 		bl	sprintf
  73:Core/Src/main.c ****   SWO_PrintString(buf, 0);
 144              		.loc 1 73 3
 145 0096 07F11403 		add	r3, r7, #20
 146 009a 0021     		movs	r1, #0
 147 009c 1846     		mov	r0, r3
 148 009e FFF7FEFF 		bl	SWO_PrintString
  74:Core/Src/main.c **** }
 149              		.loc 1 74 1
 150 00a2 00BF     		nop
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchjfkxS.s 			page 5


 151 00a4 4037     		adds	r7, r7, #64
 152              	.LCFI3:
 153              		.cfi_def_cfa_offset 16
 154 00a6 BD46     		mov	sp, r7
 155              	.LCFI4:
 156              		.cfi_def_cfa_register 13
 157              		@ sp needed
 158 00a8 B0BD     		pop	{r4, r5, r7, pc}
 159              	.L6:
 160 00aa 00BF     		.align	2
 161              	.L5:
 162 00ac 00000000 		.word	.LC0
 163              		.cfi_endproc
 164              	.LFE138:
 166              		.section	.rodata
 167              		.align	2
 168              	.LC1:
 169 0008 25302E32 		.ascii	"%0.2f\015\012\000"
 169      660D0A00 
 170              		.section	.text.main,"ax",%progbits
 171              		.align	1
 172              		.global	main
 173              		.syntax unified
 174              		.thumb
 175              		.thumb_func
 177              	main:
 178              	.LFB139:
  75:Core/Src/main.c **** /* USER CODE END 0 */
  76:Core/Src/main.c **** 
  77:Core/Src/main.c **** /**
  78:Core/Src/main.c ****   * @brief  The application entry point.
  79:Core/Src/main.c ****   * @retval int
  80:Core/Src/main.c ****   */
  81:Core/Src/main.c **** int main(void)
  82:Core/Src/main.c **** {
 179              		.loc 1 82 1
 180              		.cfi_startproc
 181              		@ args = 0, pretend = 0, frame = 192
 182              		@ frame_needed = 1, uses_anonymous_args = 0
 183 0000 80B5     		push	{r7, lr}
 184              	.LCFI5:
 185              		.cfi_def_cfa_offset 8
 186              		.cfi_offset 7, -8
 187              		.cfi_offset 14, -4
 188 0002 B2B0     		sub	sp, sp, #200
 189              	.LCFI6:
 190              		.cfi_def_cfa_offset 208
 191 0004 02AF     		add	r7, sp, #8
 192              	.LCFI7:
 193              		.cfi_def_cfa 7, 200
  83:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  84:Core/Src/main.c **** 
  85:Core/Src/main.c ****   /* USER CODE END 1 */
  86:Core/Src/main.c **** 
  87:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
  88:Core/Src/main.c **** 
  89:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchjfkxS.s 			page 6


  90:Core/Src/main.c ****   HAL_Init();
 194              		.loc 1 90 3
 195 0006 FFF7FEFF 		bl	HAL_Init
  91:Core/Src/main.c **** 
  92:Core/Src/main.c ****   /* USER CODE BEGIN Init */
  93:Core/Src/main.c **** 
  94:Core/Src/main.c ****   /* USER CODE END Init */
  95:Core/Src/main.c **** 
  96:Core/Src/main.c ****   /* Configure the system clock */
  97:Core/Src/main.c ****   SystemClock_Config();
 196              		.loc 1 97 3
 197 000a FFF7FEFF 		bl	SystemClock_Config
  98:Core/Src/main.c **** 
  99:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 100:Core/Src/main.c **** 
 101:Core/Src/main.c ****   /* USER CODE END SysInit */
 102:Core/Src/main.c **** 
 103:Core/Src/main.c ****   /* Initialize all configured peripherals */
 104:Core/Src/main.c ****   MX_GPIO_Init();
 198              		.loc 1 104 3
 199 000e FFF7FEFF 		bl	MX_GPIO_Init
 105:Core/Src/main.c ****   MX_I2C1_Init();
 200              		.loc 1 105 3
 201 0012 FFF7FEFF 		bl	MX_I2C1_Init
 106:Core/Src/main.c ****   MX_USART1_UART_Init();
 202              		.loc 1 106 3
 203 0016 FFF7FEFF 		bl	MX_USART1_UART_Init
 107:Core/Src/main.c ****   // MX_USB_DEVICE_Init();
 108:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 109:Core/Src/main.c ****   mpu6050_init(&hi2c1);
 204              		.loc 1 109 3
 205 001a 1748     		ldr	r0, .L9
 206 001c FFF7FEFF 		bl	mpu6050_init
 207              	.L8:
 208              	.LBB4:
 110:Core/Src/main.c **** 
 111:Core/Src/main.c ****   double xAccel, yAccel, zAccel;
 112:Core/Src/main.c ****   MPU6050_t mpu;
 113:Core/Src/main.c ****   /* USER CODE END 2 */
 114:Core/Src/main.c **** 
 115:Core/Src/main.c ****   /* Infinite loop */
 116:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 117:Core/Src/main.c ****   
 118:Core/Src/main.c ****   while (1)
 119:Core/Src/main.c ****   {
 120:Core/Src/main.c ****     /* USER CODE END WHILE */
 121:Core/Src/main.c **** 
 122:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 123:Core/Src/main.c ****     mpu6050_readData(&hi2c1, &mpu);
 209              		.loc 1 123 5
 210 0020 07F16003 		add	r3, r7, #96
 211 0024 1946     		mov	r1, r3
 212 0026 1448     		ldr	r0, .L9
 213 0028 FFF7FEFF 		bl	mpu6050_readData
 124:Core/Src/main.c ****     HAL_Delay(100);
 214              		.loc 1 124 5
 215 002c 6420     		movs	r0, #100
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchjfkxS.s 			page 7


 216 002e FFF7FEFF 		bl	HAL_Delay
 125:Core/Src/main.c ****     xAccel = mpu.Ax;
 217              		.loc 1 125 12
 218 0032 D7E91A23 		ldrd	r2, [r7, #104]
 219 0036 C7E92E23 		strd	r2, [r7, #184]
 126:Core/Src/main.c ****     yAccel = mpu.Ay;
 220              		.loc 1 126 12
 221 003a D7E91C23 		ldrd	r2, [r7, #112]
 222 003e C7E92C23 		strd	r2, [r7, #176]
 127:Core/Src/main.c ****     zAccel = mpu.Az;
 223              		.loc 1 127 12
 224 0042 D7E91E23 		ldrd	r2, [r7, #120]
 225 0046 C7E92A23 		strd	r2, [r7, #168]
 128:Core/Src/main.c ****     char buf[30];
 129:Core/Src/main.c ****     // int n = sprintf(buf, "%0.7f\r\n", zAccel);
 130:Core/Src/main.c **** 
 131:Core/Src/main.c ****     // HAL_UART_Transmit(&huart1, buf, n, 100);
 132:Core/Src/main.c **** 
 133:Core/Src/main.c ****     char usbBuf[64];
 134:Core/Src/main.c ****     int usbBufLen = snprintf(usbBuf, 64, "%0.2f\r\n", zAccel);
 226              		.loc 1 134 21
 227 004a 3846     		mov	r0, r7
 228 004c D7E92A23 		ldrd	r2, [r7, #168]
 229 0050 CDE90023 		strd	r2, [sp]
 230 0054 094A     		ldr	r2, .L9+4
 231 0056 4021     		movs	r1, #64
 232 0058 FFF7FEFF 		bl	snprintf
 233 005c C7F8A400 		str	r0, [r7, #164]
 135:Core/Src/main.c **** 
 136:Core/Src/main.c ****     CDC_Transmit_HS((uint8_t *) usbBuf, usbBufLen);
 234              		.loc 1 136 5
 235 0060 3B46     		mov	r3, r7
 236 0062 D7F8A410 		ldr	r1, [r7, #164]
 237 0066 1846     		mov	r0, r3
 238 0068 FFF7FEFF 		bl	CDC_Transmit_HS
 137:Core/Src/main.c ****     // HAL_UART_Transmit(&huart1, usbBuf, usbBufLen, 100);
 138:Core/Src/main.c **** 
 139:Core/Src/main.c ****     HAL_Delay(1000);
 239              		.loc 1 139 5
 240 006c 4FF47A70 		mov	r0, #1000
 241 0070 FFF7FEFF 		bl	HAL_Delay
 242              	.LBE4:
 119:Core/Src/main.c ****     /* USER CODE END WHILE */
 243              		.loc 1 119 3
 244 0074 00BF     		nop
 245 0076 D3E7     		b	.L8
 246              	.L10:
 247              		.align	2
 248              	.L9:
 249 0078 00000000 		.word	hi2c1
 250 007c 08000000 		.word	.LC1
 251              		.cfi_endproc
 252              	.LFE139:
 254              		.section	.text.SystemClock_Config,"ax",%progbits
 255              		.align	1
 256              		.global	SystemClock_Config
 257              		.syntax unified
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchjfkxS.s 			page 8


 258              		.thumb
 259              		.thumb_func
 261              	SystemClock_Config:
 262              	.LFB140:
 140:Core/Src/main.c ****     //SEGGER_RTT_WriteString(0, buf);
 141:Core/Src/main.c ****   }
 142:Core/Src/main.c ****   /* USER CODE END 3 */
 143:Core/Src/main.c **** }
 144:Core/Src/main.c **** 
 145:Core/Src/main.c **** /**
 146:Core/Src/main.c ****   * @brief System Clock Configuration
 147:Core/Src/main.c ****   * @retval None
 148:Core/Src/main.c ****   */
 149:Core/Src/main.c **** void SystemClock_Config(void)
 150:Core/Src/main.c **** {
 263              		.loc 1 150 1
 264              		.cfi_startproc
 265              		@ args = 0, pretend = 0, frame = 80
 266              		@ frame_needed = 1, uses_anonymous_args = 0
 267 0000 80B5     		push	{r7, lr}
 268              	.LCFI8:
 269              		.cfi_def_cfa_offset 8
 270              		.cfi_offset 7, -8
 271              		.cfi_offset 14, -4
 272 0002 94B0     		sub	sp, sp, #80
 273              	.LCFI9:
 274              		.cfi_def_cfa_offset 88
 275 0004 00AF     		add	r7, sp, #0
 276              	.LCFI10:
 277              		.cfi_def_cfa_register 7
 151:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 278              		.loc 1 151 22
 279 0006 07F12003 		add	r3, r7, #32
 280 000a 3022     		movs	r2, #48
 281 000c 0021     		movs	r1, #0
 282 000e 1846     		mov	r0, r3
 283 0010 FFF7FEFF 		bl	memset
 152:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 284              		.loc 1 152 22
 285 0014 07F10C03 		add	r3, r7, #12
 286 0018 0022     		movs	r2, #0
 287 001a 1A60     		str	r2, [r3]
 288 001c 5A60     		str	r2, [r3, #4]
 289 001e 9A60     		str	r2, [r3, #8]
 290 0020 DA60     		str	r2, [r3, #12]
 291 0022 1A61     		str	r2, [r3, #16]
 292              	.LBB5:
 153:Core/Src/main.c **** 
 154:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 155:Core/Src/main.c ****   */
 156:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 293              		.loc 1 156 3
 294 0024 0023     		movs	r3, #0
 295 0026 BB60     		str	r3, [r7, #8]
 296 0028 2B4B     		ldr	r3, .L16
 297 002a 1B6C     		ldr	r3, [r3, #64]
 298 002c 2A4A     		ldr	r2, .L16
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchjfkxS.s 			page 9


 299 002e 43F08053 		orr	r3, r3, #268435456
 300 0032 1364     		str	r3, [r2, #64]
 301 0034 284B     		ldr	r3, .L16
 302 0036 1B6C     		ldr	r3, [r3, #64]
 303 0038 03F08053 		and	r3, r3, #268435456
 304 003c BB60     		str	r3, [r7, #8]
 305 003e BB68     		ldr	r3, [r7, #8]
 306              	.LBE5:
 307              	.LBB6:
 157:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 308              		.loc 1 157 3
 309 0040 0023     		movs	r3, #0
 310 0042 7B60     		str	r3, [r7, #4]
 311 0044 254B     		ldr	r3, .L16+4
 312 0046 1B68     		ldr	r3, [r3]
 313 0048 244A     		ldr	r2, .L16+4
 314 004a 43F44043 		orr	r3, r3, #49152
 315 004e 1360     		str	r3, [r2]
 316 0050 224B     		ldr	r3, .L16+4
 317 0052 1B68     		ldr	r3, [r3]
 318 0054 03F44043 		and	r3, r3, #49152
 319 0058 7B60     		str	r3, [r7, #4]
 320 005a 7B68     		ldr	r3, [r7, #4]
 321              	.LBE6:
 158:Core/Src/main.c **** 
 159:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 160:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 161:Core/Src/main.c ****   */
 162:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 322              		.loc 1 162 36
 323 005c 0223     		movs	r3, #2
 324 005e 3B62     		str	r3, [r7, #32]
 163:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 325              		.loc 1 163 30
 326 0060 0123     		movs	r3, #1
 327 0062 FB62     		str	r3, [r7, #44]
 164:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 328              		.loc 1 164 41
 329 0064 1023     		movs	r3, #16
 330 0066 3B63     		str	r3, [r7, #48]
 165:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 331              		.loc 1 165 34
 332 0068 0223     		movs	r3, #2
 333 006a BB63     		str	r3, [r7, #56]
 166:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 334              		.loc 1 166 35
 335 006c 0023     		movs	r3, #0
 336 006e FB63     		str	r3, [r7, #60]
 167:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 337              		.loc 1 167 30
 338 0070 0823     		movs	r3, #8
 339 0072 3B64     		str	r3, [r7, #64]
 168:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 180;
 340              		.loc 1 168 30
 341 0074 B423     		movs	r3, #180
 342 0076 7B64     		str	r3, [r7, #68]
 169:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchjfkxS.s 			page 10


 343              		.loc 1 169 30
 344 0078 0223     		movs	r3, #2
 345 007a BB64     		str	r3, [r7, #72]
 170:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 346              		.loc 1 170 30
 347 007c 0423     		movs	r3, #4
 348 007e FB64     		str	r3, [r7, #76]
 171:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 349              		.loc 1 171 7
 350 0080 07F12003 		add	r3, r7, #32
 351 0084 1846     		mov	r0, r3
 352 0086 FFF7FEFF 		bl	HAL_RCC_OscConfig
 353 008a 0346     		mov	r3, r0
 354              		.loc 1 171 6 discriminator 1
 355 008c 002B     		cmp	r3, #0
 356 008e 01D0     		beq	.L12
 172:Core/Src/main.c ****   {
 173:Core/Src/main.c ****     Error_Handler();
 357              		.loc 1 173 5
 358 0090 FFF7FEFF 		bl	Error_Handler
 359              	.L12:
 174:Core/Src/main.c ****   }
 175:Core/Src/main.c **** 
 176:Core/Src/main.c ****   /** Activate the Over-Drive mode
 177:Core/Src/main.c ****   */
 178:Core/Src/main.c ****   if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 360              		.loc 1 178 7
 361 0094 FFF7FEFF 		bl	HAL_PWREx_EnableOverDrive
 362 0098 0346     		mov	r3, r0
 363              		.loc 1 178 6 discriminator 1
 364 009a 002B     		cmp	r3, #0
 365 009c 01D0     		beq	.L13
 179:Core/Src/main.c ****   {
 180:Core/Src/main.c ****     Error_Handler();
 366              		.loc 1 180 5
 367 009e FFF7FEFF 		bl	Error_Handler
 368              	.L13:
 181:Core/Src/main.c ****   }
 182:Core/Src/main.c **** 
 183:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 184:Core/Src/main.c ****   */
 185:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 369              		.loc 1 185 31
 370 00a2 0F23     		movs	r3, #15
 371 00a4 FB60     		str	r3, [r7, #12]
 186:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 187:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 372              		.loc 1 187 34
 373 00a6 0223     		movs	r3, #2
 374 00a8 3B61     		str	r3, [r7, #16]
 188:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 375              		.loc 1 188 35
 376 00aa 0023     		movs	r3, #0
 377 00ac 7B61     		str	r3, [r7, #20]
 189:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 378              		.loc 1 189 36
 379 00ae 4FF4A053 		mov	r3, #5120
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchjfkxS.s 			page 11


 380 00b2 BB61     		str	r3, [r7, #24]
 190:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 381              		.loc 1 190 36
 382 00b4 4FF48053 		mov	r3, #4096
 383 00b8 FB61     		str	r3, [r7, #28]
 191:Core/Src/main.c **** 
 192:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 384              		.loc 1 192 7
 385 00ba 07F10C03 		add	r3, r7, #12
 386 00be 0521     		movs	r1, #5
 387 00c0 1846     		mov	r0, r3
 388 00c2 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 389 00c6 0346     		mov	r3, r0
 390              		.loc 1 192 6 discriminator 1
 391 00c8 002B     		cmp	r3, #0
 392 00ca 01D0     		beq	.L15
 193:Core/Src/main.c ****   {
 194:Core/Src/main.c ****     Error_Handler();
 393              		.loc 1 194 5
 394 00cc FFF7FEFF 		bl	Error_Handler
 395              	.L15:
 195:Core/Src/main.c ****   }
 196:Core/Src/main.c **** }
 396              		.loc 1 196 1
 397 00d0 00BF     		nop
 398 00d2 5037     		adds	r7, r7, #80
 399              	.LCFI11:
 400              		.cfi_def_cfa_offset 8
 401 00d4 BD46     		mov	sp, r7
 402              	.LCFI12:
 403              		.cfi_def_cfa_register 13
 404              		@ sp needed
 405 00d6 80BD     		pop	{r7, pc}
 406              	.L17:
 407              		.align	2
 408              	.L16:
 409 00d8 00380240 		.word	1073887232
 410 00dc 00700040 		.word	1073770496
 411              		.cfi_endproc
 412              	.LFE140:
 414              		.section	.text.MX_I2C1_Init,"ax",%progbits
 415              		.align	1
 416              		.syntax unified
 417              		.thumb
 418              		.thumb_func
 420              	MX_I2C1_Init:
 421              	.LFB141:
 197:Core/Src/main.c **** 
 198:Core/Src/main.c **** /**
 199:Core/Src/main.c ****   * @brief I2C1 Initialization Function
 200:Core/Src/main.c ****   * @param None
 201:Core/Src/main.c ****   * @retval None
 202:Core/Src/main.c ****   */
 203:Core/Src/main.c **** static void MX_I2C1_Init(void)
 204:Core/Src/main.c **** {
 422              		.loc 1 204 1
 423              		.cfi_startproc
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchjfkxS.s 			page 12


 424              		@ args = 0, pretend = 0, frame = 0
 425              		@ frame_needed = 1, uses_anonymous_args = 0
 426 0000 80B5     		push	{r7, lr}
 427              	.LCFI13:
 428              		.cfi_def_cfa_offset 8
 429              		.cfi_offset 7, -8
 430              		.cfi_offset 14, -4
 431 0002 00AF     		add	r7, sp, #0
 432              	.LCFI14:
 433              		.cfi_def_cfa_register 7
 205:Core/Src/main.c **** 
 206:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 0 */
 207:Core/Src/main.c **** 
 208:Core/Src/main.c ****   /* USER CODE END I2C1_Init 0 */
 209:Core/Src/main.c **** 
 210:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 1 */
 211:Core/Src/main.c **** 
 212:Core/Src/main.c ****   /* USER CODE END I2C1_Init 1 */
 213:Core/Src/main.c ****   hi2c1.Instance = I2C1;
 434              		.loc 1 213 18
 435 0004 1B4B     		ldr	r3, .L23
 436 0006 1C4A     		ldr	r2, .L23+4
 437 0008 1A60     		str	r2, [r3]
 214:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 438              		.loc 1 214 25
 439 000a 1A4B     		ldr	r3, .L23
 440 000c 1B4A     		ldr	r2, .L23+8
 441 000e 5A60     		str	r2, [r3, #4]
 215:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 442              		.loc 1 215 24
 443 0010 184B     		ldr	r3, .L23
 444 0012 0022     		movs	r2, #0
 445 0014 9A60     		str	r2, [r3, #8]
 216:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 446              		.loc 1 216 26
 447 0016 174B     		ldr	r3, .L23
 448 0018 0022     		movs	r2, #0
 449 001a DA60     		str	r2, [r3, #12]
 217:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_10BIT;
 450              		.loc 1 217 29
 451 001c 154B     		ldr	r3, .L23
 452 001e 4FF44042 		mov	r2, #49152
 453 0022 1A61     		str	r2, [r3, #16]
 218:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 454              		.loc 1 218 30
 455 0024 134B     		ldr	r3, .L23
 456 0026 0022     		movs	r2, #0
 457 0028 5A61     		str	r2, [r3, #20]
 219:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 458              		.loc 1 219 26
 459 002a 124B     		ldr	r3, .L23
 460 002c 0022     		movs	r2, #0
 461 002e 9A61     		str	r2, [r3, #24]
 220:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 462              		.loc 1 220 30
 463 0030 104B     		ldr	r3, .L23
 464 0032 0022     		movs	r2, #0
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchjfkxS.s 			page 13


 465 0034 DA61     		str	r2, [r3, #28]
 221:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 466              		.loc 1 221 28
 467 0036 0F4B     		ldr	r3, .L23
 468 0038 0022     		movs	r2, #0
 469 003a 1A62     		str	r2, [r3, #32]
 222:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 470              		.loc 1 222 7
 471 003c 0D48     		ldr	r0, .L23
 472 003e FFF7FEFF 		bl	HAL_I2C_Init
 473 0042 0346     		mov	r3, r0
 474              		.loc 1 222 6 discriminator 1
 475 0044 002B     		cmp	r3, #0
 476 0046 01D0     		beq	.L19
 223:Core/Src/main.c ****   {
 224:Core/Src/main.c ****     Error_Handler();
 477              		.loc 1 224 5
 478 0048 FFF7FEFF 		bl	Error_Handler
 479              	.L19:
 225:Core/Src/main.c ****   }
 226:Core/Src/main.c **** 
 227:Core/Src/main.c ****   /** Configure Analogue filter
 228:Core/Src/main.c ****   */
 229:Core/Src/main.c ****   if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 480              		.loc 1 229 7
 481 004c 0021     		movs	r1, #0
 482 004e 0948     		ldr	r0, .L23
 483 0050 FFF7FEFF 		bl	HAL_I2CEx_ConfigAnalogFilter
 484 0054 0346     		mov	r3, r0
 485              		.loc 1 229 6 discriminator 1
 486 0056 002B     		cmp	r3, #0
 487 0058 01D0     		beq	.L20
 230:Core/Src/main.c ****   {
 231:Core/Src/main.c ****     Error_Handler();
 488              		.loc 1 231 5
 489 005a FFF7FEFF 		bl	Error_Handler
 490              	.L20:
 232:Core/Src/main.c ****   }
 233:Core/Src/main.c **** 
 234:Core/Src/main.c ****   /** Configure Digital filter
 235:Core/Src/main.c ****   */
 236:Core/Src/main.c ****   if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 491              		.loc 1 236 7
 492 005e 0021     		movs	r1, #0
 493 0060 0448     		ldr	r0, .L23
 494 0062 FFF7FEFF 		bl	HAL_I2CEx_ConfigDigitalFilter
 495 0066 0346     		mov	r3, r0
 496              		.loc 1 236 6 discriminator 1
 497 0068 002B     		cmp	r3, #0
 498 006a 01D0     		beq	.L22
 237:Core/Src/main.c ****   {
 238:Core/Src/main.c ****     Error_Handler();
 499              		.loc 1 238 5
 500 006c FFF7FEFF 		bl	Error_Handler
 501              	.L22:
 239:Core/Src/main.c ****   }
 240:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 2 */
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchjfkxS.s 			page 14


 241:Core/Src/main.c **** 
 242:Core/Src/main.c ****   /* USER CODE END I2C1_Init 2 */
 243:Core/Src/main.c **** 
 244:Core/Src/main.c **** }
 502              		.loc 1 244 1
 503 0070 00BF     		nop
 504 0072 80BD     		pop	{r7, pc}
 505              	.L24:
 506              		.align	2
 507              	.L23:
 508 0074 00000000 		.word	hi2c1
 509 0078 00540040 		.word	1073763328
 510 007c A0860100 		.word	100000
 511              		.cfi_endproc
 512              	.LFE141:
 514              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 515              		.align	1
 516              		.syntax unified
 517              		.thumb
 518              		.thumb_func
 520              	MX_USART1_UART_Init:
 521              	.LFB142:
 245:Core/Src/main.c **** 
 246:Core/Src/main.c **** /**
 247:Core/Src/main.c ****   * @brief USART1 Initialization Function
 248:Core/Src/main.c ****   * @param None
 249:Core/Src/main.c ****   * @retval None
 250:Core/Src/main.c ****   */
 251:Core/Src/main.c **** static void MX_USART1_UART_Init(void)
 252:Core/Src/main.c **** {
 522              		.loc 1 252 1
 523              		.cfi_startproc
 524              		@ args = 0, pretend = 0, frame = 0
 525              		@ frame_needed = 1, uses_anonymous_args = 0
 526 0000 80B5     		push	{r7, lr}
 527              	.LCFI15:
 528              		.cfi_def_cfa_offset 8
 529              		.cfi_offset 7, -8
 530              		.cfi_offset 14, -4
 531 0002 00AF     		add	r7, sp, #0
 532              	.LCFI16:
 533              		.cfi_def_cfa_register 7
 253:Core/Src/main.c **** 
 254:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 0 */
 255:Core/Src/main.c **** 
 256:Core/Src/main.c ****   /* USER CODE END USART1_Init 0 */
 257:Core/Src/main.c **** 
 258:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 1 */
 259:Core/Src/main.c **** 
 260:Core/Src/main.c ****   /* USER CODE END USART1_Init 1 */
 261:Core/Src/main.c ****   huart1.Instance = USART1;
 534              		.loc 1 261 19
 535 0004 114B     		ldr	r3, .L28
 536 0006 124A     		ldr	r2, .L28+4
 537 0008 1A60     		str	r2, [r3]
 262:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 538              		.loc 1 262 24
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchjfkxS.s 			page 15


 539 000a 104B     		ldr	r3, .L28
 540 000c 4FF4E132 		mov	r2, #115200
 541 0010 5A60     		str	r2, [r3, #4]
 263:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 542              		.loc 1 263 26
 543 0012 0E4B     		ldr	r3, .L28
 544 0014 0022     		movs	r2, #0
 545 0016 9A60     		str	r2, [r3, #8]
 264:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 546              		.loc 1 264 24
 547 0018 0C4B     		ldr	r3, .L28
 548 001a 0022     		movs	r2, #0
 549 001c DA60     		str	r2, [r3, #12]
 265:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 550              		.loc 1 265 22
 551 001e 0B4B     		ldr	r3, .L28
 552 0020 0022     		movs	r2, #0
 553 0022 1A61     		str	r2, [r3, #16]
 266:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 554              		.loc 1 266 20
 555 0024 094B     		ldr	r3, .L28
 556 0026 0C22     		movs	r2, #12
 557 0028 5A61     		str	r2, [r3, #20]
 267:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 558              		.loc 1 267 25
 559 002a 084B     		ldr	r3, .L28
 560 002c 0022     		movs	r2, #0
 561 002e 9A61     		str	r2, [r3, #24]
 268:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 562              		.loc 1 268 28
 563 0030 064B     		ldr	r3, .L28
 564 0032 0022     		movs	r2, #0
 565 0034 DA61     		str	r2, [r3, #28]
 269:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 566              		.loc 1 269 7
 567 0036 0548     		ldr	r0, .L28
 568 0038 FFF7FEFF 		bl	HAL_UART_Init
 569 003c 0346     		mov	r3, r0
 570              		.loc 1 269 6 discriminator 1
 571 003e 002B     		cmp	r3, #0
 572 0040 01D0     		beq	.L27
 270:Core/Src/main.c ****   {
 271:Core/Src/main.c ****     Error_Handler();
 573              		.loc 1 271 5
 574 0042 FFF7FEFF 		bl	Error_Handler
 575              	.L27:
 272:Core/Src/main.c ****   }
 273:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 2 */
 274:Core/Src/main.c **** 
 275:Core/Src/main.c ****   /* USER CODE END USART1_Init 2 */
 276:Core/Src/main.c **** 
 277:Core/Src/main.c **** }
 576              		.loc 1 277 1
 577 0046 00BF     		nop
 578 0048 80BD     		pop	{r7, pc}
 579              	.L29:
 580 004a 00BF     		.align	2
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchjfkxS.s 			page 16


 581              	.L28:
 582 004c 00000000 		.word	huart1
 583 0050 00100140 		.word	1073811456
 584              		.cfi_endproc
 585              	.LFE142:
 587              		.section	.text.MX_GPIO_Init,"ax",%progbits
 588              		.align	1
 589              		.syntax unified
 590              		.thumb
 591              		.thumb_func
 593              	MX_GPIO_Init:
 594              	.LFB143:
 278:Core/Src/main.c **** 
 279:Core/Src/main.c **** /**
 280:Core/Src/main.c ****   * @brief GPIO Initialization Function
 281:Core/Src/main.c ****   * @param None
 282:Core/Src/main.c ****   * @retval None
 283:Core/Src/main.c ****   */
 284:Core/Src/main.c **** static void MX_GPIO_Init(void)
 285:Core/Src/main.c **** {
 595              		.loc 1 285 1
 596              		.cfi_startproc
 597              		@ args = 0, pretend = 0, frame = 40
 598              		@ frame_needed = 1, uses_anonymous_args = 0
 599 0000 80B5     		push	{r7, lr}
 600              	.LCFI17:
 601              		.cfi_def_cfa_offset 8
 602              		.cfi_offset 7, -8
 603              		.cfi_offset 14, -4
 604 0002 8AB0     		sub	sp, sp, #40
 605              	.LCFI18:
 606              		.cfi_def_cfa_offset 48
 607 0004 00AF     		add	r7, sp, #0
 608              	.LCFI19:
 609              		.cfi_def_cfa_register 7
 286:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 610              		.loc 1 286 20
 611 0006 07F11403 		add	r3, r7, #20
 612 000a 0022     		movs	r2, #0
 613 000c 1A60     		str	r2, [r3]
 614 000e 5A60     		str	r2, [r3, #4]
 615 0010 9A60     		str	r2, [r3, #8]
 616 0012 DA60     		str	r2, [r3, #12]
 617 0014 1A61     		str	r2, [r3, #16]
 618              	.LBB7:
 287:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 288:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 289:Core/Src/main.c **** 
 290:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 291:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 619              		.loc 1 291 3
 620 0016 0023     		movs	r3, #0
 621 0018 3B61     		str	r3, [r7, #16]
 622 001a 274B     		ldr	r3, .L31
 623 001c 1B6B     		ldr	r3, [r3, #48]
 624 001e 264A     		ldr	r2, .L31
 625 0020 43F00403 		orr	r3, r3, #4
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchjfkxS.s 			page 17


 626 0024 1363     		str	r3, [r2, #48]
 627 0026 244B     		ldr	r3, .L31
 628 0028 1B6B     		ldr	r3, [r3, #48]
 629 002a 03F00403 		and	r3, r3, #4
 630 002e 3B61     		str	r3, [r7, #16]
 631 0030 3B69     		ldr	r3, [r7, #16]
 632              	.LBE7:
 633              	.LBB8:
 292:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 634              		.loc 1 292 3
 635 0032 0023     		movs	r3, #0
 636 0034 FB60     		str	r3, [r7, #12]
 637 0036 204B     		ldr	r3, .L31
 638 0038 1B6B     		ldr	r3, [r3, #48]
 639 003a 1F4A     		ldr	r2, .L31
 640 003c 43F00103 		orr	r3, r3, #1
 641 0040 1363     		str	r3, [r2, #48]
 642 0042 1D4B     		ldr	r3, .L31
 643 0044 1B6B     		ldr	r3, [r3, #48]
 644 0046 03F00103 		and	r3, r3, #1
 645 004a FB60     		str	r3, [r7, #12]
 646 004c FB68     		ldr	r3, [r7, #12]
 647              	.LBE8:
 648              	.LBB9:
 293:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 649              		.loc 1 293 3
 650 004e 0023     		movs	r3, #0
 651 0050 BB60     		str	r3, [r7, #8]
 652 0052 194B     		ldr	r3, .L31
 653 0054 1B6B     		ldr	r3, [r3, #48]
 654 0056 184A     		ldr	r2, .L31
 655 0058 43F00203 		orr	r3, r3, #2
 656 005c 1363     		str	r3, [r2, #48]
 657 005e 164B     		ldr	r3, .L31
 658 0060 1B6B     		ldr	r3, [r3, #48]
 659 0062 03F00203 		and	r3, r3, #2
 660 0066 BB60     		str	r3, [r7, #8]
 661 0068 BB68     		ldr	r3, [r7, #8]
 662              	.LBE9:
 663              	.LBB10:
 294:Core/Src/main.c ****   __HAL_RCC_GPIOG_CLK_ENABLE();
 664              		.loc 1 294 3
 665 006a 0023     		movs	r3, #0
 666 006c 7B60     		str	r3, [r7, #4]
 667 006e 124B     		ldr	r3, .L31
 668 0070 1B6B     		ldr	r3, [r3, #48]
 669 0072 114A     		ldr	r2, .L31
 670 0074 43F04003 		orr	r3, r3, #64
 671 0078 1363     		str	r3, [r2, #48]
 672 007a 0F4B     		ldr	r3, .L31
 673 007c 1B6B     		ldr	r3, [r3, #48]
 674 007e 03F04003 		and	r3, r3, #64
 675 0082 7B60     		str	r3, [r7, #4]
 676 0084 7B68     		ldr	r3, [r7, #4]
 677              	.LBE10:
 295:Core/Src/main.c **** 
 296:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchjfkxS.s 			page 18


 297:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 678              		.loc 1 297 3
 679 0086 0022     		movs	r2, #0
 680 0088 4FF4C041 		mov	r1, #24576
 681 008c 0B48     		ldr	r0, .L31+4
 682 008e FFF7FEFF 		bl	HAL_GPIO_WritePin
 298:Core/Src/main.c **** 
 299:Core/Src/main.c ****   /*Configure GPIO pins : PG13 PG14 */
 300:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 683              		.loc 1 300 23
 684 0092 4FF4C043 		mov	r3, #24576
 685 0096 7B61     		str	r3, [r7, #20]
 301:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 686              		.loc 1 301 24
 687 0098 0123     		movs	r3, #1
 688 009a BB61     		str	r3, [r7, #24]
 302:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 689              		.loc 1 302 24
 690 009c 0023     		movs	r3, #0
 691 009e FB61     		str	r3, [r7, #28]
 303:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 692              		.loc 1 303 25
 693 00a0 0023     		movs	r3, #0
 694 00a2 3B62     		str	r3, [r7, #32]
 304:Core/Src/main.c ****   HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 695              		.loc 1 304 3
 696 00a4 07F11403 		add	r3, r7, #20
 697 00a8 1946     		mov	r1, r3
 698 00aa 0448     		ldr	r0, .L31+4
 699 00ac FFF7FEFF 		bl	HAL_GPIO_Init
 305:Core/Src/main.c **** 
 306:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 307:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 308:Core/Src/main.c **** }
 700              		.loc 1 308 1
 701 00b0 00BF     		nop
 702 00b2 2837     		adds	r7, r7, #40
 703              	.LCFI20:
 704              		.cfi_def_cfa_offset 8
 705 00b4 BD46     		mov	sp, r7
 706              	.LCFI21:
 707              		.cfi_def_cfa_register 13
 708              		@ sp needed
 709 00b6 80BD     		pop	{r7, pc}
 710              	.L32:
 711              		.align	2
 712              	.L31:
 713 00b8 00380240 		.word	1073887232
 714 00bc 00180240 		.word	1073879040
 715              		.cfi_endproc
 716              	.LFE143:
 718              		.section	.text.Error_Handler,"ax",%progbits
 719              		.align	1
 720              		.global	Error_Handler
 721              		.syntax unified
 722              		.thumb
 723              		.thumb_func
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchjfkxS.s 			page 19


 725              	Error_Handler:
 726              	.LFB144:
 309:Core/Src/main.c **** 
 310:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 311:Core/Src/main.c **** 
 312:Core/Src/main.c **** /* USER CODE END 4 */
 313:Core/Src/main.c **** 
 314:Core/Src/main.c **** /**
 315:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 316:Core/Src/main.c ****   * @retval None
 317:Core/Src/main.c ****   */
 318:Core/Src/main.c **** void Error_Handler(void)
 319:Core/Src/main.c **** {
 727              		.loc 1 319 1
 728              		.cfi_startproc
 729              		@ args = 0, pretend = 0, frame = 0
 730              		@ frame_needed = 1, uses_anonymous_args = 0
 731              		@ link register save eliminated.
 732 0000 80B4     		push	{r7}
 733              	.LCFI22:
 734              		.cfi_def_cfa_offset 4
 735              		.cfi_offset 7, -4
 736 0002 00AF     		add	r7, sp, #0
 737              	.LCFI23:
 738              		.cfi_def_cfa_register 7
 739              	.LBB11:
 740              	.LBB12:
 741              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchjfkxS.s 			page 20


  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchjfkxS.s 			page 21


  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchjfkxS.s 			page 22


 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchjfkxS.s 			page 23


 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchjfkxS.s 			page 24


 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchjfkxS.s 			page 25


 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchjfkxS.s 			page 26


 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchjfkxS.s 			page 27


 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchjfkxS.s 			page 28


 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchjfkxS.s 			page 29


 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchjfkxS.s 			page 30


 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchjfkxS.s 			page 31


 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchjfkxS.s 			page 32


 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchjfkxS.s 			page 33


 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchjfkxS.s 			page 34


 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchjfkxS.s 			page 35


 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchjfkxS.s 			page 36


 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 742              		.loc 2 962 3
 743              		.syntax unified
 744              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 745 0004 72B6     		cpsid i
 746              	@ 0 "" 2
 963:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 747              		.loc 2 963 1
 748              		.thumb
 749              		.syntax unified
 750 0006 00BF     		nop
 751              	.L34:
 752              	.LBE12:
 753              	.LBE11:
 320:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 321:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 322:Core/Src/main.c ****   __disable_irq();
 323:Core/Src/main.c ****   while (1)
 754              		.loc 1 323 9
 755 0008 00BF     		nop
 756 000a FDE7     		b	.L34
 757              		.cfi_endproc
 758              	.LFE144:
 760              		.text
 761              	.Letext0:
 762              		.file 3 "C:/Program Files (x86)/Arm GNU Toolchain arm-none-eabi/13.2 Rel1/arm-none-eabi/include/ma
 763              		.file 4 "C:/Program Files (x86)/Arm GNU Toolchain arm-none-eabi/13.2 Rel1/arm-none-eabi/include/sy
 764              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f429xx.h"
 765              		.file 6 "C:/Program Files (x86)/Arm GNU Toolchain arm-none-eabi/13.2 Rel1/lib/gcc/arm-none-eabi/13
 766              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 767              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 768              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 769              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 770              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 771              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_i2c.h"
 772              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 773              		.file 14 "Core/Inc/mpu6050.h"
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchjfkxS.s 			page 37


 774              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_i2c_ex.h"
 775              		.file 16 "C:/Program Files (x86)/Arm GNU Toolchain arm-none-eabi/13.2 Rel1/arm-none-eabi/include/s
 776              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 777              		.file 18 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_pwr_ex.h"
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchjfkxS.s 			page 38


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\Siddhesh\AppData\Local\Temp\cchjfkxS.s:25     .bss.hi2c1:00000000 hi2c1
C:\Users\Siddhesh\AppData\Local\Temp\cchjfkxS.s:22     .bss.hi2c1:00000000 $d
C:\Users\Siddhesh\AppData\Local\Temp\cchjfkxS.s:32     .bss.huart1:00000000 huart1
C:\Users\Siddhesh\AppData\Local\Temp\cchjfkxS.s:29     .bss.huart1:00000000 $d
C:\Users\Siddhesh\AppData\Local\Temp\cchjfkxS.s:39     .rodata:00000000 $d
C:\Users\Siddhesh\AppData\Local\Temp\cchjfkxS.s:43     .text.printDouble:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\cchjfkxS.s:49     .text.printDouble:00000000 printDouble
C:\Users\Siddhesh\AppData\Local\Temp\cchjfkxS.s:162    .text.printDouble:000000ac $d
C:\Users\Siddhesh\AppData\Local\Temp\cchjfkxS.s:171    .text.main:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\cchjfkxS.s:177    .text.main:00000000 main
C:\Users\Siddhesh\AppData\Local\Temp\cchjfkxS.s:261    .text.SystemClock_Config:00000000 SystemClock_Config
C:\Users\Siddhesh\AppData\Local\Temp\cchjfkxS.s:593    .text.MX_GPIO_Init:00000000 MX_GPIO_Init
C:\Users\Siddhesh\AppData\Local\Temp\cchjfkxS.s:420    .text.MX_I2C1_Init:00000000 MX_I2C1_Init
C:\Users\Siddhesh\AppData\Local\Temp\cchjfkxS.s:520    .text.MX_USART1_UART_Init:00000000 MX_USART1_UART_Init
C:\Users\Siddhesh\AppData\Local\Temp\cchjfkxS.s:249    .text.main:00000078 $d
C:\Users\Siddhesh\AppData\Local\Temp\cchjfkxS.s:255    .text.SystemClock_Config:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\cchjfkxS.s:725    .text.Error_Handler:00000000 Error_Handler
C:\Users\Siddhesh\AppData\Local\Temp\cchjfkxS.s:409    .text.SystemClock_Config:000000d8 $d
C:\Users\Siddhesh\AppData\Local\Temp\cchjfkxS.s:415    .text.MX_I2C1_Init:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\cchjfkxS.s:508    .text.MX_I2C1_Init:00000074 $d
C:\Users\Siddhesh\AppData\Local\Temp\cchjfkxS.s:515    .text.MX_USART1_UART_Init:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\cchjfkxS.s:582    .text.MX_USART1_UART_Init:0000004c $d
C:\Users\Siddhesh\AppData\Local\Temp\cchjfkxS.s:588    .text.MX_GPIO_Init:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\cchjfkxS.s:713    .text.MX_GPIO_Init:000000b8 $d
C:\Users\Siddhesh\AppData\Local\Temp\cchjfkxS.s:719    .text.Error_Handler:00000000 $t
                           .group:00000000 wm4.0.f079ee757cd02b273648dd4f0fb0fb55
                           .group:00000000 wm4.stm32f4xx_hal_conf.h.25.47f9051bf4ec028d46a7e2405ed07388
                           .group:00000000 wm4.stm32f4xx.h.38.d053a70ce905afacf9f39dda4c23396b
                           .group:00000000 wm4.stm32f429xx.h.34.42df97e3bab45b53f4e57c4e9dde2c7f
                           .group:00000000 wm4._newlib_version.h.4.6d111ab2e95434b664b53815e5c8ccba
                           .group:00000000 wm4.features.h.33.2eefb68b261e70563a8ac654e712169f
                           .group:00000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:00000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.cmsis_version.h.32.0ac195c83bb4537824e6ad1c47474b79
                           .group:00000000 wm4.core_cm4.h.66.e4ff136c4a17abc46741866f64f8e729
                           .group:00000000 wm4.cmsis_gcc.h.26.498d0ad17a45fc9ef20fdc01caf02259
                           .group:00000000 wm4.core_cm4.h.174.62be9b4588d49bed18171771001331df
                           .group:00000000 wm4.mpu_armv7.h.32.83326921a797fa9d6f70449916b4b839
                           .group:00000000 wm4.stm32f429xx.h.1024.d29798e268c99a104baf1d225206508d
                           .group:00000000 wm4.stm32f4xx.h.195.a4b8bf80f37cc96981498656ffe5f588
                           .group:00000000 wm4.stm32_hal_legacy.h.22.a3518bfca5d6be2a3e3116a49624c24d
                           .group:00000000 wm4.stddef.h.39.0dc9006b34572d4d9cae4c8b422c4971
                           .group:00000000 wm4.stm32f4xx_hal_def.h.58.3cb484e92e5ccf2e55312a4714e27917
                           .group:00000000 wm4.stm32f4xx_hal_rcc_ex.h.20.ffb2e3f871e1d4b256123f825b3acaea
                           .group:00000000 wm4.stm32f4xx_hal_rcc.h.106.7a3b8fae3878f325ccf2eab43ac149ad
                           .group:00000000 wm4.stm32f4xx_hal_gpio.h.21.22da6a14b6049d6ac156577be74df1d7
                           .group:00000000 wm4.stm32f4xx_hal_gpio_ex.h.21.0bf68a49d3f777cd991627d0e08a2d5e
                           .group:00000000 wm4.stm32f4xx_hal_gpio.h.254.d7e07832f748fe8bcb575db0b8373592
                           .group:00000000 wm4.stm32f4xx_hal_exti.h.21.303b0d76f76068cfec77f0fbc85835c0
                           .group:00000000 wm4.stm32f4xx_hal_dma.h.21.8e4b1421c914345c23be719e5e528779
                           .group:00000000 wm4.stm32f4xx_hal_dma.h.720.ac2d7eef74792e4026acc4d2923c5da4
                           .group:00000000 wm4.stm32f4xx_hal_cortex.h.20.a1e25f69ec9adea00da0353b137e869f
                           .group:00000000 wm4.stm32f4xx_hal_flash.h.20.2f1e0d1b7010b3a81a7980aaf712e7e5
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchjfkxS.s 			page 39


                           .group:00000000 wm4.stm32f4xx_hal_flash_ex.h.20.0633581e18e8d959fa43f07a9d860979
                           .group:00000000 wm4.stm32f4xx_hal_flash.h.361.23bc19b9eac79b0956d913651841ede8
                           .group:00000000 wm4.stm32f4xx_hal_i2c.h.21.147e96a27b1f7b1f2f8ee22132703ee3
                           .group:00000000 wm4.stm32f4xx_hal_i2c_ex.h.21.951ef5bfa13cf131d2015c338e82e461
                           .group:00000000 wm4.stm32f4xx_hal_i2c.h.647.ade9c3447780b1cc0ece02f0ce83aedc
                           .group:00000000 wm4.stm32f4xx_hal_pwr.h.20.1905a0783a9c83adefd7df0c4b501e40
                           .group:00000000 wm4.stm32f4xx_hal_pwr_ex.h.20.1cd454a68f4573ea11695d020c0de0f5
                           .group:00000000 wm4.stm32f4xx_hal_pwr.h.338.debc0a4a62ba54688e63ab53dd99c4ea
                           .group:00000000 wm4.stm32f4xx_hal_uart.h.21.ba8e24dd05c77faac3f3d48472e636ba
                           .group:00000000 wm4.stm32f4xx_ll_usb.h.21.371f1231e90cf558b19e6b21e6eb7150
                           .group:00000000 wm4.stm32f4xx_hal_pcd.h.155.9516e0722978902161f66a3ea59779ae
                           .group:00000000 wm4.stm32f4xx_hal.h.71.f077b42c1edb7a9e0b40aa6b2558aed9
                           .group:00000000 wm4.newlib.h.7.94397327844a69ac8ce8d46310803afa
                           .group:00000000 wm4.ieeefp.h.77.5ad60f72ea25fc152400b550ac118212
                           .group:00000000 wm4.config.h.224.10ee1ad185d877c6e334e6581faab44d
                           .group:00000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:00000000 wm4.stdio.h.31.7c0e28c411445f3f9c5b11accf882760
                           .group:00000000 wm4.stddef.h.158.eec8bf00b5213f43d095cb984c5f22e3
                           .group:00000000 wm4.cdefs.h.49.70fc7af612f78ddcace70fdd90b5623b
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4._types.h.20.dd0d04dca3800a0d2a6129b87f3adbb2
                           .group:00000000 wm4.stddef.h.158.6f8e08a347b1cff664332fa350bfceb3
                           .group:00000000 wm4._types.h.127.3bdfe3ff8ea2d0985b03d9cbe93480e3
                           .group:00000000 wm4.reent.h.18.25503cdc8b7e55dd0d6ea7b3e5af7a03
                           .group:00000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:00000000 wm4.reent.h.78.7f0775353a33c852a1479c008f68cd03
                           .group:00000000 wm4.stdio.h.67.0cf8a9c281ab0b348aef5c02e7e48825
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.87.a1e20d2651f9bfb66e51bfbe849db00a
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.56.f4862cfbf4363a1db01842d5bdf72c18
                           .group:00000000 wm4.string.h.8.c4b8571ce60dff2817f43fec8b86aecd
                           .group:00000000 wm4.usbd_conf.h.66.63c6925a6e41a2ad7eac72ce4b13d375
                           .group:00000000 wm4.usbd_def.h.61.d2733aa1267b10885852241cab9db8e8
                           .group:00000000 wm4.mpu6050.h.2.236f47184b582e3cdd6a87cae7e1a7df

UNDEFINED SYMBOLS
__aeabi_d2iz
__aeabi_i2d
__aeabi_dsub
__aeabi_dmul
sprintf
SWO_PrintString
HAL_Init
mpu6050_init
mpu6050_readData
HAL_Delay
snprintf
CDC_Transmit_HS
memset
HAL_RCC_OscConfig
HAL_PWREx_EnableOverDrive
HAL_RCC_ClockConfig
HAL_I2C_Init
HAL_I2CEx_ConfigAnalogFilter
HAL_I2CEx_ConfigDigitalFilter
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchjfkxS.s 			page 40


HAL_UART_Init
HAL_GPIO_WritePin
HAL_GPIO_Init
