ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"SEGGER_RTT.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/SEGGER_RTT.c"
  20              		.section	.rodata._aTerminalId,"a"
  21              		.align	2
  24              	_aTerminalId:
  25 0000 30313233 		.ascii	"0123456789ABCDEF"
  25      34353637 
  25      38394142 
  25      43444546 
  26              		.global	_SEGGER_RTT
  27              		.section	.bss._SEGGER_RTT,"aw",%nobits
  28              		.align	2
  31              	_SEGGER_RTT:
  32 0000 00000000 		.space	168
  32      00000000 
  32      00000000 
  32      00000000 
  32      00000000 
  33              		.section	.bss._acUpBuffer,"aw",%nobits
  34              		.align	2
  37              	_acUpBuffer:
  38 0000 00000000 		.space	1024
  38      00000000 
  38      00000000 
  38      00000000 
  38      00000000 
  39              		.section	.bss._acDownBuffer,"aw",%nobits
  40              		.align	2
  43              	_acDownBuffer:
  44 0000 00000000 		.space	16
  44      00000000 
  44      00000000 
  44      00000000 
  45              		.section	.bss._ActiveTerminal,"aw",%nobits
  48              	_ActiveTerminal:
  49 0000 00       		.space	1
  50              		.section	.rodata
  51              		.align	2
  52              	.LC0:
  53 0000 5465726D 		.ascii	"Terminal\000"
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 2


  53      696E616C 
  53      00
  54              		.section	.text._DoInit,"ax",%progbits
  55              		.align	1
  56              		.syntax unified
  57              		.thumb
  58              		.thumb_func
  60              	_DoInit:
  61              	.LFB0:
   1:Core/Src/SEGGER_RTT.c **** /*********************************************************************
   2:Core/Src/SEGGER_RTT.c **** *                    SEGGER Microcontroller GmbH                     *
   3:Core/Src/SEGGER_RTT.c **** *                        The Embedded Experts                        *
   4:Core/Src/SEGGER_RTT.c **** **********************************************************************
   5:Core/Src/SEGGER_RTT.c **** *                                                                    *
   6:Core/Src/SEGGER_RTT.c **** *            (c) 1995 - 2021 SEGGER Microcontroller GmbH             *
   7:Core/Src/SEGGER_RTT.c **** *                                                                    *
   8:Core/Src/SEGGER_RTT.c **** *       www.segger.com     Support: support@segger.com               *
   9:Core/Src/SEGGER_RTT.c **** *                                                                    *
  10:Core/Src/SEGGER_RTT.c **** **********************************************************************
  11:Core/Src/SEGGER_RTT.c **** *                                                                    *
  12:Core/Src/SEGGER_RTT.c **** *       SEGGER RTT * Real Time Transfer for embedded targets         *
  13:Core/Src/SEGGER_RTT.c **** *                                                                    *
  14:Core/Src/SEGGER_RTT.c **** **********************************************************************
  15:Core/Src/SEGGER_RTT.c **** *                                                                    *
  16:Core/Src/SEGGER_RTT.c **** * All rights reserved.                                               *
  17:Core/Src/SEGGER_RTT.c **** *                                                                    *
  18:Core/Src/SEGGER_RTT.c **** * SEGGER strongly recommends to not make any changes                 *
  19:Core/Src/SEGGER_RTT.c **** * to or modify the source code of this software in order to stay     *
  20:Core/Src/SEGGER_RTT.c **** * compatible with the RTT protocol and J-Link.                       *
  21:Core/Src/SEGGER_RTT.c **** *                                                                    *
  22:Core/Src/SEGGER_RTT.c **** * Redistribution and use in source and binary forms, with or         *
  23:Core/Src/SEGGER_RTT.c **** * without modification, are permitted provided that the following    *
  24:Core/Src/SEGGER_RTT.c **** * condition is met:                                                  *
  25:Core/Src/SEGGER_RTT.c **** *                                                                    *
  26:Core/Src/SEGGER_RTT.c **** * o Redistributions of source code must retain the above copyright   *
  27:Core/Src/SEGGER_RTT.c **** *   notice, this condition and the following disclaimer.             *
  28:Core/Src/SEGGER_RTT.c **** *                                                                    *
  29:Core/Src/SEGGER_RTT.c **** * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND             *
  30:Core/Src/SEGGER_RTT.c **** * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,        *
  31:Core/Src/SEGGER_RTT.c **** * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF           *
  32:Core/Src/SEGGER_RTT.c **** * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE           *
  33:Core/Src/SEGGER_RTT.c **** * DISCLAIMED. IN NO EVENT SHALL SEGGER Microcontroller BE LIABLE FOR *
  34:Core/Src/SEGGER_RTT.c **** * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR           *
  35:Core/Src/SEGGER_RTT.c **** * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT  *
  36:Core/Src/SEGGER_RTT.c **** * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;    *
  37:Core/Src/SEGGER_RTT.c **** * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF      *
  38:Core/Src/SEGGER_RTT.c **** * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT          *
  39:Core/Src/SEGGER_RTT.c **** * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE  *
  40:Core/Src/SEGGER_RTT.c **** * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH   *
  41:Core/Src/SEGGER_RTT.c **** * DAMAGE.                                                            *
  42:Core/Src/SEGGER_RTT.c **** *                                                                    *
  43:Core/Src/SEGGER_RTT.c **** **********************************************************************
  44:Core/Src/SEGGER_RTT.c **** *                                                                    *
  45:Core/Src/SEGGER_RTT.c **** *       RTT version: 7.96                                           *
  46:Core/Src/SEGGER_RTT.c **** *                                                                    *
  47:Core/Src/SEGGER_RTT.c **** **********************************************************************
  48:Core/Src/SEGGER_RTT.c **** 
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 3


  49:Core/Src/SEGGER_RTT.c **** ---------------------------END-OF-HEADER------------------------------
  50:Core/Src/SEGGER_RTT.c **** File    : SEGGER_RTT.c
  51:Core/Src/SEGGER_RTT.c **** Purpose : Implementation of SEGGER real-time transfer (RTT) which
  52:Core/Src/SEGGER_RTT.c ****           allows real-time communication on targets which support
  53:Core/Src/SEGGER_RTT.c ****           debugger memory accesses while the CPU is running.
  54:Core/Src/SEGGER_RTT.c **** Revision: $Rev: 29668 $
  55:Core/Src/SEGGER_RTT.c **** 
  56:Core/Src/SEGGER_RTT.c **** Additional information:
  57:Core/Src/SEGGER_RTT.c ****           Type "int" is assumed to be 32-bits in size
  58:Core/Src/SEGGER_RTT.c ****           H->T    Host to target communication
  59:Core/Src/SEGGER_RTT.c ****           T->H    Target to host communication
  60:Core/Src/SEGGER_RTT.c **** 
  61:Core/Src/SEGGER_RTT.c ****           RTT channel 0 is always present and reserved for Terminal usage.
  62:Core/Src/SEGGER_RTT.c ****           Name is fixed to "Terminal"
  63:Core/Src/SEGGER_RTT.c **** 
  64:Core/Src/SEGGER_RTT.c ****           Effective buffer size: SizeOfBuffer - 1
  65:Core/Src/SEGGER_RTT.c **** 
  66:Core/Src/SEGGER_RTT.c ****           WrOff == RdOff:       Buffer is empty
  67:Core/Src/SEGGER_RTT.c ****           WrOff == (RdOff - 1): Buffer is full
  68:Core/Src/SEGGER_RTT.c ****           WrOff >  RdOff:       Free space includes wrap-around
  69:Core/Src/SEGGER_RTT.c ****           WrOff <  RdOff:       Used space includes wrap-around
  70:Core/Src/SEGGER_RTT.c ****           (WrOff == (SizeOfBuffer - 1)) && (RdOff == 0):
  71:Core/Src/SEGGER_RTT.c ****                                 Buffer full and wrap-around after next byte
  72:Core/Src/SEGGER_RTT.c **** 
  73:Core/Src/SEGGER_RTT.c **** 
  74:Core/Src/SEGGER_RTT.c **** ----------------------------------------------------------------------
  75:Core/Src/SEGGER_RTT.c **** */
  76:Core/Src/SEGGER_RTT.c **** 
  77:Core/Src/SEGGER_RTT.c **** #include "SEGGER_RTT.h"
  78:Core/Src/SEGGER_RTT.c **** 
  79:Core/Src/SEGGER_RTT.c **** #include <string.h>                 // for memcpy
  80:Core/Src/SEGGER_RTT.c **** 
  81:Core/Src/SEGGER_RTT.c **** /*********************************************************************
  82:Core/Src/SEGGER_RTT.c **** *
  83:Core/Src/SEGGER_RTT.c **** *       Configuration, default values
  84:Core/Src/SEGGER_RTT.c **** *
  85:Core/Src/SEGGER_RTT.c **** **********************************************************************
  86:Core/Src/SEGGER_RTT.c **** */
  87:Core/Src/SEGGER_RTT.c **** 
  88:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_CPU_CACHE_LINE_SIZE
  89:Core/Src/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_CB_ALIGN
  90:Core/Src/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_CB_ALIGN() is not supported for SEGGER_RTT_CPU_CACHE_LINE_SIZE != 0"
  91:Core/Src/SEGGER_RTT.c ****   #endif
  92:Core/Src/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_BUFFER_ALIGN
  93:Core/Src/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_BUFFER_ALIGN() is not supported for SEGGER_RTT_CPU_CACHE_LINE_SIZE !=
  94:Core/Src/SEGGER_RTT.c ****   #endif
  95:Core/Src/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_PUT_CB_SECTION
  96:Core/Src/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_PUT_CB_SECTION() is not supported for SEGGER_RTT_CPU_CACHE_LINE_SIZE 
  97:Core/Src/SEGGER_RTT.c ****   #endif
  98:Core/Src/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_PUT_BUFFER_SECTION
  99:Core/Src/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_PUT_BUFFER_SECTION() is not supported for SEGGER_RTT_CPU_CACHE_LINE_S
 100:Core/Src/SEGGER_RTT.c ****   #endif
 101:Core/Src/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_BUFFER_ALIGNMENT
 102:Core/Src/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_BUFFER_ALIGNMENT is not supported for SEGGER_RTT_CPU_CACHE_LINE_SIZE 
 103:Core/Src/SEGGER_RTT.c ****   #endif
 104:Core/Src/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_ALIGNMENT
 105:Core/Src/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_ALIGNMENT is not supported for SEGGER_RTT_CPU_CACHE_LINE_SIZE != 0"
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 4


 106:Core/Src/SEGGER_RTT.c ****   #endif
 107:Core/Src/SEGGER_RTT.c **** #endif
 108:Core/Src/SEGGER_RTT.c **** 
 109:Core/Src/SEGGER_RTT.c **** #ifndef   BUFFER_SIZE_UP
 110:Core/Src/SEGGER_RTT.c ****   #define BUFFER_SIZE_UP                                  1024  // Size of the buffer for terminal 
 111:Core/Src/SEGGER_RTT.c **** #endif
 112:Core/Src/SEGGER_RTT.c **** 
 113:Core/Src/SEGGER_RTT.c **** #ifndef   BUFFER_SIZE_DOWN
 114:Core/Src/SEGGER_RTT.c ****   #define BUFFER_SIZE_DOWN                                16    // Size of the buffer for terminal 
 115:Core/Src/SEGGER_RTT.c **** #endif
 116:Core/Src/SEGGER_RTT.c **** 
 117:Core/Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MAX_NUM_UP_BUFFERS
 118:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_MAX_NUM_UP_BUFFERS                    2    // Number of up-buffers (T->H) avai
 119:Core/Src/SEGGER_RTT.c **** #endif
 120:Core/Src/SEGGER_RTT.c **** 
 121:Core/Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MAX_NUM_DOWN_BUFFERS
 122:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_MAX_NUM_DOWN_BUFFERS                  2    // Number of down-buffers (H->T) av
 123:Core/Src/SEGGER_RTT.c **** #endif
 124:Core/Src/SEGGER_RTT.c **** 
 125:Core/Src/SEGGER_RTT.c **** #ifndef SEGGER_RTT_BUFFER_SECTION
 126:Core/Src/SEGGER_RTT.c ****   #if defined(SEGGER_RTT_SECTION)
 127:Core/Src/SEGGER_RTT.c ****     #define SEGGER_RTT_BUFFER_SECTION SEGGER_RTT_SECTION
 128:Core/Src/SEGGER_RTT.c ****   #endif
 129:Core/Src/SEGGER_RTT.c **** #endif
 130:Core/Src/SEGGER_RTT.c **** 
 131:Core/Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_ALIGNMENT
 132:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_ALIGNMENT                            SEGGER_RTT_CPU_CACHE_LINE_SIZE
 133:Core/Src/SEGGER_RTT.c **** #endif
 134:Core/Src/SEGGER_RTT.c **** 
 135:Core/Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_BUFFER_ALIGNMENT
 136:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_BUFFER_ALIGNMENT                     SEGGER_RTT_CPU_CACHE_LINE_SIZE
 137:Core/Src/SEGGER_RTT.c **** #endif
 138:Core/Src/SEGGER_RTT.c **** 
 139:Core/Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MODE_DEFAULT
 140:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_MODE_DEFAULT                         SEGGER_RTT_MODE_NO_BLOCK_SKIP
 141:Core/Src/SEGGER_RTT.c **** #endif
 142:Core/Src/SEGGER_RTT.c **** 
 143:Core/Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_LOCK
 144:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_LOCK()
 145:Core/Src/SEGGER_RTT.c **** #endif
 146:Core/Src/SEGGER_RTT.c **** 
 147:Core/Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_UNLOCK
 148:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_UNLOCK()
 149:Core/Src/SEGGER_RTT.c **** #endif
 150:Core/Src/SEGGER_RTT.c **** 
 151:Core/Src/SEGGER_RTT.c **** #ifndef   STRLEN
 152:Core/Src/SEGGER_RTT.c ****   #define STRLEN(a)                                       strlen((a))
 153:Core/Src/SEGGER_RTT.c **** #endif
 154:Core/Src/SEGGER_RTT.c **** 
 155:Core/Src/SEGGER_RTT.c **** #ifndef   STRCPY
 156:Core/Src/SEGGER_RTT.c ****   #define STRCPY(pDest, pSrc)                             strcpy((pDest), (pSrc))
 157:Core/Src/SEGGER_RTT.c **** #endif
 158:Core/Src/SEGGER_RTT.c **** 
 159:Core/Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MEMCPY_USE_BYTELOOP
 160:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_MEMCPY_USE_BYTELOOP                  0
 161:Core/Src/SEGGER_RTT.c **** #endif
 162:Core/Src/SEGGER_RTT.c **** 
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 5


 163:Core/Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MEMCPY
 164:Core/Src/SEGGER_RTT.c ****   #ifdef  MEMCPY
 165:Core/Src/SEGGER_RTT.c ****     #define SEGGER_RTT_MEMCPY(pDest, pSrc, NumBytes)      MEMCPY((pDest), (pSrc), (NumBytes))
 166:Core/Src/SEGGER_RTT.c ****   #else
 167:Core/Src/SEGGER_RTT.c ****     #define SEGGER_RTT_MEMCPY(pDest, pSrc, NumBytes)      memcpy((pDest), (pSrc), (NumBytes))
 168:Core/Src/SEGGER_RTT.c ****   #endif
 169:Core/Src/SEGGER_RTT.c **** #endif
 170:Core/Src/SEGGER_RTT.c **** 
 171:Core/Src/SEGGER_RTT.c **** #ifndef   MIN
 172:Core/Src/SEGGER_RTT.c ****   #define MIN(a, b)                                       (((a) < (b)) ? (a) : (b))
 173:Core/Src/SEGGER_RTT.c **** #endif
 174:Core/Src/SEGGER_RTT.c **** 
 175:Core/Src/SEGGER_RTT.c **** #ifndef   MAX
 176:Core/Src/SEGGER_RTT.c ****   #define MAX(a, b)                                       (((a) > (b)) ? (a) : (b))
 177:Core/Src/SEGGER_RTT.c **** #endif
 178:Core/Src/SEGGER_RTT.c **** 
 179:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 180:Core/Src/SEGGER_RTT.c **** *
 181:Core/Src/SEGGER_RTT.c **** *       Defines, fixed
 182:Core/Src/SEGGER_RTT.c **** *
 183:Core/Src/SEGGER_RTT.c **** **********************************************************************
 184:Core/Src/SEGGER_RTT.c **** */
 185:Core/Src/SEGGER_RTT.c **** #if (defined __ICCARM__) || (defined __ICCRX__)
 186:Core/Src/SEGGER_RTT.c ****   #define RTT_PRAGMA(P) _Pragma(#P)
 187:Core/Src/SEGGER_RTT.c **** #endif
 188:Core/Src/SEGGER_RTT.c **** 
 189:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_ALIGNMENT || SEGGER_RTT_BUFFER_ALIGNMENT
 190:Core/Src/SEGGER_RTT.c ****   #if ((defined __GNUC__) || (defined __clang__))
 191:Core/Src/SEGGER_RTT.c ****     #define SEGGER_RTT_ALIGN(Var, Alignment) Var __attribute__ ((aligned (Alignment)))
 192:Core/Src/SEGGER_RTT.c ****   #elif (defined __ICCARM__) || (defined __ICCRX__)
 193:Core/Src/SEGGER_RTT.c ****     #define PRAGMA(A) _Pragma(#A)
 194:Core/Src/SEGGER_RTT.c **** #define SEGGER_RTT_ALIGN(Var, Alignment) RTT_PRAGMA(data_alignment=Alignment) \
 195:Core/Src/SEGGER_RTT.c ****                                   Var
 196:Core/Src/SEGGER_RTT.c ****   #elif (defined __CC_ARM)
 197:Core/Src/SEGGER_RTT.c ****     #define SEGGER_RTT_ALIGN(Var, Alignment) Var __attribute__ ((aligned (Alignment)))
 198:Core/Src/SEGGER_RTT.c ****   #else
 199:Core/Src/SEGGER_RTT.c ****     #error "Alignment not supported for this compiler."
 200:Core/Src/SEGGER_RTT.c ****   #endif
 201:Core/Src/SEGGER_RTT.c **** #else
 202:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_ALIGN(Var, Alignment) Var
 203:Core/Src/SEGGER_RTT.c **** #endif
 204:Core/Src/SEGGER_RTT.c **** 
 205:Core/Src/SEGGER_RTT.c **** #if defined(SEGGER_RTT_SECTION) || defined (SEGGER_RTT_BUFFER_SECTION)
 206:Core/Src/SEGGER_RTT.c ****   #if ((defined __GNUC__) || (defined __clang__))
 207:Core/Src/SEGGER_RTT.c ****     #define SEGGER_RTT_PUT_SECTION(Var, Section) __attribute__ ((section (Section))) Var
 208:Core/Src/SEGGER_RTT.c ****   #elif (defined __ICCARM__) || (defined __ICCRX__)
 209:Core/Src/SEGGER_RTT.c **** #define SEGGER_RTT_PUT_SECTION(Var, Section) RTT_PRAGMA(location=Section) \
 210:Core/Src/SEGGER_RTT.c ****                                         Var
 211:Core/Src/SEGGER_RTT.c ****   #elif (defined __CC_ARM)
 212:Core/Src/SEGGER_RTT.c ****     #define SEGGER_RTT_PUT_SECTION(Var, Section) __attribute__ ((section (Section), zero_init))  Va
 213:Core/Src/SEGGER_RTT.c ****   #else
 214:Core/Src/SEGGER_RTT.c ****     #error "Section placement not supported for this compiler."
 215:Core/Src/SEGGER_RTT.c ****   #endif
 216:Core/Src/SEGGER_RTT.c **** #else
 217:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_SECTION(Var, Section) Var
 218:Core/Src/SEGGER_RTT.c **** #endif
 219:Core/Src/SEGGER_RTT.c **** 
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 6


 220:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_ALIGNMENT
 221:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_CB_ALIGN(Var)  SEGGER_RTT_ALIGN(Var, SEGGER_RTT_ALIGNMENT)
 222:Core/Src/SEGGER_RTT.c **** #else
 223:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_CB_ALIGN(Var)  Var
 224:Core/Src/SEGGER_RTT.c **** #endif
 225:Core/Src/SEGGER_RTT.c **** 
 226:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_BUFFER_ALIGNMENT
 227:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_BUFFER_ALIGN(Var)  SEGGER_RTT_ALIGN(Var, SEGGER_RTT_BUFFER_ALIGNMENT)
 228:Core/Src/SEGGER_RTT.c **** #else
 229:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_BUFFER_ALIGN(Var)  Var
 230:Core/Src/SEGGER_RTT.c **** #endif
 231:Core/Src/SEGGER_RTT.c **** 
 232:Core/Src/SEGGER_RTT.c **** 
 233:Core/Src/SEGGER_RTT.c **** #if defined(SEGGER_RTT_SECTION)
 234:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_CB_SECTION(Var) SEGGER_RTT_PUT_SECTION(Var, SEGGER_RTT_SECTION)
 235:Core/Src/SEGGER_RTT.c **** #else
 236:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_CB_SECTION(Var) Var
 237:Core/Src/SEGGER_RTT.c **** #endif
 238:Core/Src/SEGGER_RTT.c **** 
 239:Core/Src/SEGGER_RTT.c **** #if defined(SEGGER_RTT_BUFFER_SECTION)
 240:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_BUFFER_SECTION(Var) SEGGER_RTT_PUT_SECTION(Var, SEGGER_RTT_BUFFER_SECTION)
 241:Core/Src/SEGGER_RTT.c **** #else
 242:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_BUFFER_SECTION(Var) Var
 243:Core/Src/SEGGER_RTT.c **** #endif
 244:Core/Src/SEGGER_RTT.c **** 
 245:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 246:Core/Src/SEGGER_RTT.c **** *
 247:Core/Src/SEGGER_RTT.c **** *       Static const data
 248:Core/Src/SEGGER_RTT.c **** *
 249:Core/Src/SEGGER_RTT.c **** **********************************************************************
 250:Core/Src/SEGGER_RTT.c **** */
 251:Core/Src/SEGGER_RTT.c **** 
 252:Core/Src/SEGGER_RTT.c **** static const unsigned char _aTerminalId[16] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '
 253:Core/Src/SEGGER_RTT.c **** 
 254:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 255:Core/Src/SEGGER_RTT.c **** *
 256:Core/Src/SEGGER_RTT.c **** *       Static data
 257:Core/Src/SEGGER_RTT.c **** *
 258:Core/Src/SEGGER_RTT.c **** **********************************************************************
 259:Core/Src/SEGGER_RTT.c **** */
 260:Core/Src/SEGGER_RTT.c **** 
 261:Core/Src/SEGGER_RTT.c **** //
 262:Core/Src/SEGGER_RTT.c **** // RTT Control Block and allocate buffers for channel 0
 263:Core/Src/SEGGER_RTT.c **** //
 264:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_CPU_CACHE_LINE_SIZE
 265:Core/Src/SEGGER_RTT.c ****   #if ((defined __GNUC__) || (defined __clang__))
 266:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_CB _SEGGER_RTT                                                             __attribu
 267:Core/Src/SEGGER_RTT.c ****     static char   _acUpBuffer  [SEGGER_RTT__ROUND_UP_2_CACHE_LINE_SIZE(BUFFER_SIZE_UP)]   __attribu
 268:Core/Src/SEGGER_RTT.c ****     static char   _acDownBuffer[SEGGER_RTT__ROUND_UP_2_CACHE_LINE_SIZE(BUFFER_SIZE_DOWN)] __attribu
 269:Core/Src/SEGGER_RTT.c ****   #elif (defined __ICCARM__)
 270:Core/Src/SEGGER_RTT.c ****     #pragma data_alignment=SEGGER_RTT_CPU_CACHE_LINE_SIZE
 271:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_CB _SEGGER_RTT;
 272:Core/Src/SEGGER_RTT.c ****     #pragma data_alignment=SEGGER_RTT_CPU_CACHE_LINE_SIZE
 273:Core/Src/SEGGER_RTT.c ****     static char   _acUpBuffer  [SEGGER_RTT__ROUND_UP_2_CACHE_LINE_SIZE(BUFFER_SIZE_UP)];
 274:Core/Src/SEGGER_RTT.c ****     #pragma data_alignment=SEGGER_RTT_CPU_CACHE_LINE_SIZE
 275:Core/Src/SEGGER_RTT.c ****     static char   _acDownBuffer[SEGGER_RTT__ROUND_UP_2_CACHE_LINE_SIZE(BUFFER_SIZE_DOWN)];
 276:Core/Src/SEGGER_RTT.c ****   #else
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 7


 277:Core/Src/SEGGER_RTT.c ****     #error "Don't know how to place _SEGGER_RTT, _acUpBuffer, _acDownBuffer cache-line aligned"
 278:Core/Src/SEGGER_RTT.c ****   #endif
 279:Core/Src/SEGGER_RTT.c **** #else
 280:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_PUT_CB_SECTION(SEGGER_RTT_CB_ALIGN(SEGGER_RTT_CB _SEGGER_RTT));
 281:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_PUT_BUFFER_SECTION(SEGGER_RTT_BUFFER_ALIGN(static char _acUpBuffer  [BUFFER_SIZE_UP]))
 282:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_PUT_BUFFER_SECTION(SEGGER_RTT_BUFFER_ALIGN(static char _acDownBuffer[BUFFER_SIZE_DOWN]
 283:Core/Src/SEGGER_RTT.c **** #endif
 284:Core/Src/SEGGER_RTT.c **** 
 285:Core/Src/SEGGER_RTT.c **** static unsigned char _ActiveTerminal;
 286:Core/Src/SEGGER_RTT.c **** 
 287:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 288:Core/Src/SEGGER_RTT.c **** *
 289:Core/Src/SEGGER_RTT.c **** *       Static functions
 290:Core/Src/SEGGER_RTT.c **** *
 291:Core/Src/SEGGER_RTT.c **** **********************************************************************
 292:Core/Src/SEGGER_RTT.c **** */
 293:Core/Src/SEGGER_RTT.c **** 
 294:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 295:Core/Src/SEGGER_RTT.c **** *
 296:Core/Src/SEGGER_RTT.c **** *       _DoInit()
 297:Core/Src/SEGGER_RTT.c **** *
 298:Core/Src/SEGGER_RTT.c **** *  Function description
 299:Core/Src/SEGGER_RTT.c **** *    Initializes the control block an buffers.
 300:Core/Src/SEGGER_RTT.c **** *
 301:Core/Src/SEGGER_RTT.c **** *  Notes
 302:Core/Src/SEGGER_RTT.c **** *    (1) May only be called via INIT() to avoid overriding settings.
 303:Core/Src/SEGGER_RTT.c **** *        The only exception is SEGGER_RTT_Init(), to make an intentional override possible.
 304:Core/Src/SEGGER_RTT.c **** */
 305:Core/Src/SEGGER_RTT.c ****   #define INIT()                                                                             \
 306:Core/Src/SEGGER_RTT.c ****     do {                                                                                     \
 307:Core/Src/SEGGER_RTT.c ****       volatile SEGGER_RTT_CB* pRTTCBInit;                                                    \
 308:Core/Src/SEGGER_RTT.c ****       pRTTCBInit = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF); \
 309:Core/Src/SEGGER_RTT.c ****       if (pRTTCBInit->acID[0] != 'S') {                                                      \
 310:Core/Src/SEGGER_RTT.c ****         _DoInit();                                                                           \
 311:Core/Src/SEGGER_RTT.c ****       }                                                                                      \
 312:Core/Src/SEGGER_RTT.c ****     } while (0)
 313:Core/Src/SEGGER_RTT.c **** 
 314:Core/Src/SEGGER_RTT.c **** static void _DoInit(void) {
  62              		.loc 1 314 27
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 8
  65              		@ frame_needed = 1, uses_anonymous_args = 0
  66 0000 80B5     		push	{r7, lr}
  67              	.LCFI0:
  68              		.cfi_def_cfa_offset 8
  69              		.cfi_offset 7, -8
  70              		.cfi_offset 14, -4
  71 0002 82B0     		sub	sp, sp, #8
  72              	.LCFI1:
  73              		.cfi_def_cfa_offset 16
  74 0004 00AF     		add	r7, sp, #0
  75              	.LCFI2:
  76              		.cfi_def_cfa_register 7
 315:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of ac
 316:Core/Src/SEGGER_RTT.c ****   static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sur
 317:Core/Src/SEGGER_RTT.c ****   unsigned i;
 318:Core/Src/SEGGER_RTT.c ****   //
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 8


 319:Core/Src/SEGGER_RTT.c ****   // Initialize control block
 320:Core/Src/SEGGER_RTT.c ****   //
 321:Core/Src/SEGGER_RTT.c ****   p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_O
  77              		.loc 1 321 25
  78 0006 264B     		ldr	r3, .L4
  79 0008 3B60     		str	r3, [r7]
 322:Core/Src/SEGGER_RTT.c ****   memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always
  80              		.loc 1 322 3
  81 000a A822     		movs	r2, #168
  82 000c 0021     		movs	r1, #0
  83 000e 3868     		ldr	r0, [r7]
  84 0010 FFF7FEFF 		bl	memset
 323:Core/Src/SEGGER_RTT.c ****   p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
  85              		.loc 1 323 25
  86 0014 3B68     		ldr	r3, [r7]
  87 0016 0322     		movs	r2, #3
  88 0018 1A61     		str	r2, [r3, #16]
 324:Core/Src/SEGGER_RTT.c ****   p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  89              		.loc 1 324 25
  90 001a 3B68     		ldr	r3, [r7]
  91 001c 0322     		movs	r2, #3
  92 001e 5A61     		str	r2, [r3, #20]
 325:Core/Src/SEGGER_RTT.c ****   //
 326:Core/Src/SEGGER_RTT.c ****   // Initialize up buffer 0
 327:Core/Src/SEGGER_RTT.c ****   //
 328:Core/Src/SEGGER_RTT.c ****   p->aUp[0].sName         = "Terminal";
  93              		.loc 1 328 27
  94 0020 3B68     		ldr	r3, [r7]
  95 0022 204A     		ldr	r2, .L4+4
  96 0024 9A61     		str	r2, [r3, #24]
 329:Core/Src/SEGGER_RTT.c ****   p->aUp[0].pBuffer       = _acUpBuffer;
  97              		.loc 1 329 27
  98 0026 3B68     		ldr	r3, [r7]
  99 0028 1F4A     		ldr	r2, .L4+8
 100 002a DA61     		str	r2, [r3, #28]
 330:Core/Src/SEGGER_RTT.c ****   p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 101              		.loc 1 330 27
 102 002c 3B68     		ldr	r3, [r7]
 103 002e 4FF48062 		mov	r2, #1024
 104 0032 1A62     		str	r2, [r3, #32]
 331:Core/Src/SEGGER_RTT.c ****   p->aUp[0].RdOff         = 0u;
 105              		.loc 1 331 27
 106 0034 3B68     		ldr	r3, [r7]
 107 0036 0022     		movs	r2, #0
 108 0038 9A62     		str	r2, [r3, #40]
 332:Core/Src/SEGGER_RTT.c ****   p->aUp[0].WrOff         = 0u;
 109              		.loc 1 332 27
 110 003a 3B68     		ldr	r3, [r7]
 111 003c 0022     		movs	r2, #0
 112 003e 5A62     		str	r2, [r3, #36]
 333:Core/Src/SEGGER_RTT.c ****   p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 113              		.loc 1 333 27
 114 0040 3B68     		ldr	r3, [r7]
 115 0042 0022     		movs	r2, #0
 116 0044 DA62     		str	r2, [r3, #44]
 334:Core/Src/SEGGER_RTT.c ****   //
 335:Core/Src/SEGGER_RTT.c ****   // Initialize down buffer 0
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 9


 336:Core/Src/SEGGER_RTT.c ****   //
 337:Core/Src/SEGGER_RTT.c ****   p->aDown[0].sName         = "Terminal";
 117              		.loc 1 337 29
 118 0046 3B68     		ldr	r3, [r7]
 119 0048 164A     		ldr	r2, .L4+4
 120 004a 1A66     		str	r2, [r3, #96]
 338:Core/Src/SEGGER_RTT.c ****   p->aDown[0].pBuffer       = _acDownBuffer;
 121              		.loc 1 338 29
 122 004c 3B68     		ldr	r3, [r7]
 123 004e 174A     		ldr	r2, .L4+12
 124 0050 5A66     		str	r2, [r3, #100]
 339:Core/Src/SEGGER_RTT.c ****   p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 125              		.loc 1 339 29
 126 0052 3B68     		ldr	r3, [r7]
 127 0054 1022     		movs	r2, #16
 128 0056 9A66     		str	r2, [r3, #104]
 340:Core/Src/SEGGER_RTT.c ****   p->aDown[0].RdOff         = 0u;
 129              		.loc 1 340 29
 130 0058 3B68     		ldr	r3, [r7]
 131 005a 0022     		movs	r2, #0
 132 005c 1A67     		str	r2, [r3, #112]
 341:Core/Src/SEGGER_RTT.c ****   p->aDown[0].WrOff         = 0u;
 133              		.loc 1 341 29
 134 005e 3B68     		ldr	r3, [r7]
 135 0060 0022     		movs	r2, #0
 136 0062 DA66     		str	r2, [r3, #108]
 342:Core/Src/SEGGER_RTT.c ****   p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 137              		.loc 1 342 29
 138 0064 3B68     		ldr	r3, [r7]
 139 0066 0022     		movs	r2, #0
 140 0068 5A67     		str	r2, [r3, #116]
 343:Core/Src/SEGGER_RTT.c ****   //
 344:Core/Src/SEGGER_RTT.c ****   // Finish initialization of the control block.
 345:Core/Src/SEGGER_RTT.c ****   // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (us
 346:Core/Src/SEGGER_RTT.c ****   // as this would cause J-Link to "find" the control block at a wrong address.
 347:Core/Src/SEGGER_RTT.c ****   //
 348:Core/Src/SEGGER_RTT.c ****   RTT__DMB();                       // Force order of memory accesses for cores that may perform ou
 141              		.loc 1 348 3
 142              		.syntax unified
 143              	@ 348 "Core/Src/SEGGER_RTT.c" 1
 144 006a BFF35F8F 		dmb
 145              	
 146              	@ 0 "" 2
 349:Core/Src/SEGGER_RTT.c ****   for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 147              		.loc 1 349 10
 148              		.thumb
 149              		.syntax unified
 150 006e 0023     		movs	r3, #0
 151 0070 7B60     		str	r3, [r7, #4]
 152              		.loc 1 349 3
 153 0072 0CE0     		b	.L2
 154              	.L3:
 350:Core/Src/SEGGER_RTT.c ****     p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the ar
 155              		.loc 1 350 50
 156 0074 7B68     		ldr	r3, [r7, #4]
 157 0076 C3F10F03 		rsb	r3, r3, #15
 158              		.loc 1 350 27
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 10


 159 007a 0D4A     		ldr	r2, .L4+16
 160 007c D15C     		ldrb	r1, [r2, r3]	@ zero_extendqisi2
 161              		.loc 1 350 16
 162 007e 3A68     		ldr	r2, [r7]
 163 0080 7B68     		ldr	r3, [r7, #4]
 164 0082 1344     		add	r3, r3, r2
 165 0084 0A46     		mov	r2, r1
 166 0086 1A70     		strb	r2, [r3]
 349:Core/Src/SEGGER_RTT.c ****   for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 167              		.loc 1 349 42 discriminator 3
 168 0088 7B68     		ldr	r3, [r7, #4]
 169 008a 0133     		adds	r3, r3, #1
 170 008c 7B60     		str	r3, [r7, #4]
 171              	.L2:
 349:Core/Src/SEGGER_RTT.c ****   for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 172              		.loc 1 349 17 discriminator 1
 173 008e 7B68     		ldr	r3, [r7, #4]
 174 0090 0F2B     		cmp	r3, #15
 175 0092 EFD9     		bls	.L3
 351:Core/Src/SEGGER_RTT.c ****   }
 352:Core/Src/SEGGER_RTT.c ****   RTT__DMB();                       // Force order of memory accesses for cores that may perform ou
 176              		.loc 1 352 3
 177              		.syntax unified
 178              	@ 352 "Core/Src/SEGGER_RTT.c" 1
 179 0094 BFF35F8F 		dmb
 180              	
 181              	@ 0 "" 2
 353:Core/Src/SEGGER_RTT.c **** }
 182              		.loc 1 353 1
 183              		.thumb
 184              		.syntax unified
 185 0098 00BF     		nop
 186 009a 0837     		adds	r7, r7, #8
 187              	.LCFI3:
 188              		.cfi_def_cfa_offset 8
 189 009c BD46     		mov	sp, r7
 190              	.LCFI4:
 191              		.cfi_def_cfa_register 13
 192              		@ sp needed
 193 009e 80BD     		pop	{r7, pc}
 194              	.L5:
 195              		.align	2
 196              	.L4:
 197 00a0 00000000 		.word	_SEGGER_RTT
 198 00a4 00000000 		.word	.LC0
 199 00a8 00000000 		.word	_acUpBuffer
 200 00ac 00000000 		.word	_acDownBuffer
 201 00b0 00000000 		.word	_aInitStr.0
 202              		.cfi_endproc
 203              	.LFE0:
 205              		.section	.text._WriteBlocking,"ax",%progbits
 206              		.align	1
 207              		.syntax unified
 208              		.thumb
 209              		.thumb_func
 211              	_WriteBlocking:
 212              	.LFB1:
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 11


 354:Core/Src/SEGGER_RTT.c **** 
 355:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 356:Core/Src/SEGGER_RTT.c **** *
 357:Core/Src/SEGGER_RTT.c **** *       _WriteBlocking()
 358:Core/Src/SEGGER_RTT.c **** *
 359:Core/Src/SEGGER_RTT.c **** *  Function description
 360:Core/Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT ring buffer
 361:Core/Src/SEGGER_RTT.c **** *    and updates the associated write pointer which is periodically
 362:Core/Src/SEGGER_RTT.c **** *    read by the host.
 363:Core/Src/SEGGER_RTT.c **** *    The caller is responsible for managing the write chunk sizes as
 364:Core/Src/SEGGER_RTT.c **** *    _WriteBlocking() will block until all data has been posted successfully.
 365:Core/Src/SEGGER_RTT.c **** *
 366:Core/Src/SEGGER_RTT.c **** *  Parameters
 367:Core/Src/SEGGER_RTT.c **** *    pRing        Ring buffer to post to.
 368:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 369:Core/Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 370:Core/Src/SEGGER_RTT.c **** *
 371:Core/Src/SEGGER_RTT.c **** *  Return value
 372:Core/Src/SEGGER_RTT.c **** *    >= 0 - Number of bytes written into buffer.
 373:Core/Src/SEGGER_RTT.c **** */
 374:Core/Src/SEGGER_RTT.c **** static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes)
 213              		.loc 1 374 101
 214              		.cfi_startproc
 215              		@ args = 0, pretend = 0, frame = 40
 216              		@ frame_needed = 1, uses_anonymous_args = 0
 217 0000 80B5     		push	{r7, lr}
 218              	.LCFI5:
 219              		.cfi_def_cfa_offset 8
 220              		.cfi_offset 7, -8
 221              		.cfi_offset 14, -4
 222 0002 8AB0     		sub	sp, sp, #40
 223              	.LCFI6:
 224              		.cfi_def_cfa_offset 48
 225 0004 00AF     		add	r7, sp, #0
 226              	.LCFI7:
 227              		.cfi_def_cfa_register 7
 228 0006 F860     		str	r0, [r7, #12]
 229 0008 B960     		str	r1, [r7, #8]
 230 000a 7A60     		str	r2, [r7, #4]
 375:Core/Src/SEGGER_RTT.c ****   unsigned NumBytesToWrite;
 376:Core/Src/SEGGER_RTT.c ****   unsigned NumBytesWritten;
 377:Core/Src/SEGGER_RTT.c ****   unsigned RdOff;
 378:Core/Src/SEGGER_RTT.c ****   unsigned WrOff;
 379:Core/Src/SEGGER_RTT.c ****   volatile char* pDst;
 380:Core/Src/SEGGER_RTT.c ****   //
 381:Core/Src/SEGGER_RTT.c ****   // Write data to buffer and handle wrap-around if necessary
 382:Core/Src/SEGGER_RTT.c ****   //
 383:Core/Src/SEGGER_RTT.c ****   NumBytesWritten = 0u;
 231              		.loc 1 383 19
 232 000c 0023     		movs	r3, #0
 233 000e 3B62     		str	r3, [r7, #32]
 384:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 234              		.loc 1 384 9
 235 0010 FB68     		ldr	r3, [r7, #12]
 236 0012 DB68     		ldr	r3, [r3, #12]
 237 0014 FB61     		str	r3, [r7, #28]
 238              	.L10:
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 12


 385:Core/Src/SEGGER_RTT.c ****   do {
 386:Core/Src/SEGGER_RTT.c ****     RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the me
 239              		.loc 1 386 11
 240 0016 FB68     		ldr	r3, [r7, #12]
 241 0018 1B69     		ldr	r3, [r3, #16]
 242 001a BB61     		str	r3, [r7, #24]
 387:Core/Src/SEGGER_RTT.c ****     if (RdOff > WrOff) {
 243              		.loc 1 387 8
 244 001c BA69     		ldr	r2, [r7, #24]
 245 001e FB69     		ldr	r3, [r7, #28]
 246 0020 9A42     		cmp	r2, r3
 247 0022 05D9     		bls	.L7
 388:Core/Src/SEGGER_RTT.c ****       NumBytesToWrite = RdOff - WrOff - 1u;
 248              		.loc 1 388 31
 249 0024 BA69     		ldr	r2, [r7, #24]
 250 0026 FB69     		ldr	r3, [r7, #28]
 251 0028 D31A     		subs	r3, r2, r3
 252              		.loc 1 388 23
 253 002a 013B     		subs	r3, r3, #1
 254 002c 7B62     		str	r3, [r7, #36]
 255 002e 07E0     		b	.L8
 256              	.L7:
 389:Core/Src/SEGGER_RTT.c ****     } else {
 390:Core/Src/SEGGER_RTT.c ****       NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 257              		.loc 1 390 30
 258 0030 FB68     		ldr	r3, [r7, #12]
 259 0032 9A68     		ldr	r2, [r3, #8]
 260              		.loc 1 390 62
 261 0034 B969     		ldr	r1, [r7, #24]
 262 0036 FB69     		ldr	r3, [r7, #28]
 263 0038 CB1A     		subs	r3, r1, r3
 264              		.loc 1 390 45
 265 003a 1344     		add	r3, r3, r2
 266              		.loc 1 390 23
 267 003c 013B     		subs	r3, r3, #1
 268 003e 7B62     		str	r3, [r7, #36]
 269              	.L8:
 391:Core/Src/SEGGER_RTT.c ****     }
 392:Core/Src/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes 
 270              		.loc 1 392 23
 271 0040 FB68     		ldr	r3, [r7, #12]
 272 0042 9A68     		ldr	r2, [r3, #8]
 273 0044 FB69     		ldr	r3, [r7, #28]
 274 0046 D31A     		subs	r3, r2, r3
 275              		.loc 1 392 21
 276 0048 7A6A     		ldr	r2, [r7, #36]
 277 004a 9342     		cmp	r3, r2
 278 004c 28BF     		it	cs
 279 004e 1346     		movcs	r3, r2
 280 0050 7B62     		str	r3, [r7, #36]
 393:Core/Src/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 281              		.loc 1 393 21
 282 0052 7A6A     		ldr	r2, [r7, #36]
 283 0054 7B68     		ldr	r3, [r7, #4]
 284 0056 9342     		cmp	r3, r2
 285 0058 28BF     		it	cs
 286 005a 1346     		movcs	r3, r2
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 13


 287 005c 7B62     		str	r3, [r7, #36]
 394:Core/Src/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 288              		.loc 1 394 18
 289 005e FB68     		ldr	r3, [r7, #12]
 290 0060 5A68     		ldr	r2, [r3, #4]
 291              		.loc 1 394 10
 292 0062 FB69     		ldr	r3, [r7, #28]
 293 0064 1344     		add	r3, r3, r2
 294 0066 7B61     		str	r3, [r7, #20]
 395:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 396:Core/Src/SEGGER_RTT.c ****     NumBytesWritten += NumBytesToWrite;
 397:Core/Src/SEGGER_RTT.c ****     NumBytes        -= NumBytesToWrite;
 398:Core/Src/SEGGER_RTT.c ****     WrOff           += NumBytesToWrite;
 399:Core/Src/SEGGER_RTT.c ****     while (NumBytesToWrite--) {
 400:Core/Src/SEGGER_RTT.c ****       *pDst++ = *pBuffer++;
 401:Core/Src/SEGGER_RTT.c ****     };
 402:Core/Src/SEGGER_RTT.c **** #else
 403:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 295              		.loc 1 403 5
 296 0068 7A6A     		ldr	r2, [r7, #36]
 297 006a B968     		ldr	r1, [r7, #8]
 298 006c 7869     		ldr	r0, [r7, #20]
 299 006e FFF7FEFF 		bl	memcpy
 404:Core/Src/SEGGER_RTT.c ****     NumBytesWritten += NumBytesToWrite;
 300              		.loc 1 404 21
 301 0072 3A6A     		ldr	r2, [r7, #32]
 302 0074 7B6A     		ldr	r3, [r7, #36]
 303 0076 1344     		add	r3, r3, r2
 304 0078 3B62     		str	r3, [r7, #32]
 405:Core/Src/SEGGER_RTT.c ****     pBuffer         += NumBytesToWrite;
 305              		.loc 1 405 21
 306 007a BA68     		ldr	r2, [r7, #8]
 307 007c 7B6A     		ldr	r3, [r7, #36]
 308 007e 1344     		add	r3, r3, r2
 309 0080 BB60     		str	r3, [r7, #8]
 406:Core/Src/SEGGER_RTT.c ****     NumBytes        -= NumBytesToWrite;
 310              		.loc 1 406 21
 311 0082 7A68     		ldr	r2, [r7, #4]
 312 0084 7B6A     		ldr	r3, [r7, #36]
 313 0086 D31A     		subs	r3, r2, r3
 314 0088 7B60     		str	r3, [r7, #4]
 407:Core/Src/SEGGER_RTT.c ****     WrOff           += NumBytesToWrite;
 315              		.loc 1 407 21
 316 008a FA69     		ldr	r2, [r7, #28]
 317 008c 7B6A     		ldr	r3, [r7, #36]
 318 008e 1344     		add	r3, r3, r2
 319 0090 FB61     		str	r3, [r7, #28]
 408:Core/Src/SEGGER_RTT.c **** #endif
 409:Core/Src/SEGGER_RTT.c ****     if (WrOff == pRing->SizeOfBuffer) {
 320              		.loc 1 409 23
 321 0092 FB68     		ldr	r3, [r7, #12]
 322 0094 9B68     		ldr	r3, [r3, #8]
 323              		.loc 1 409 8
 324 0096 FA69     		ldr	r2, [r7, #28]
 325 0098 9A42     		cmp	r2, r3
 326 009a 01D1     		bne	.L9
 410:Core/Src/SEGGER_RTT.c ****       WrOff = 0u;
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 14


 327              		.loc 1 410 13
 328 009c 0023     		movs	r3, #0
 329 009e FB61     		str	r3, [r7, #28]
 330              	.L9:
 411:Core/Src/SEGGER_RTT.c ****     }
 412:Core/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 331              		.loc 1 412 5
 332              		.syntax unified
 333              	@ 412 "Core/Src/SEGGER_RTT.c" 1
 334 00a0 BFF35F8F 		dmb
 335              	
 336              	@ 0 "" 2
 413:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 337              		.loc 1 413 18
 338              		.thumb
 339              		.syntax unified
 340 00a4 FB68     		ldr	r3, [r7, #12]
 341 00a6 FA69     		ldr	r2, [r7, #28]
 342 00a8 DA60     		str	r2, [r3, #12]
 414:Core/Src/SEGGER_RTT.c ****   } while (NumBytes);
 343              		.loc 1 414 12
 344 00aa 7B68     		ldr	r3, [r7, #4]
 345 00ac 002B     		cmp	r3, #0
 346 00ae B2D1     		bne	.L10
 415:Core/Src/SEGGER_RTT.c ****   return NumBytesWritten;
 347              		.loc 1 415 10
 348 00b0 3B6A     		ldr	r3, [r7, #32]
 416:Core/Src/SEGGER_RTT.c **** }
 349              		.loc 1 416 1
 350 00b2 1846     		mov	r0, r3
 351 00b4 2837     		adds	r7, r7, #40
 352              	.LCFI8:
 353              		.cfi_def_cfa_offset 8
 354 00b6 BD46     		mov	sp, r7
 355              	.LCFI9:
 356              		.cfi_def_cfa_register 13
 357              		@ sp needed
 358 00b8 80BD     		pop	{r7, pc}
 359              		.cfi_endproc
 360              	.LFE1:
 362              		.section	.text._WriteNoCheck,"ax",%progbits
 363              		.align	1
 364              		.syntax unified
 365              		.thumb
 366              		.thumb_func
 368              	_WriteNoCheck:
 369              	.LFB2:
 417:Core/Src/SEGGER_RTT.c **** 
 418:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 419:Core/Src/SEGGER_RTT.c **** *
 420:Core/Src/SEGGER_RTT.c **** *       _WriteNoCheck()
 421:Core/Src/SEGGER_RTT.c **** *
 422:Core/Src/SEGGER_RTT.c **** *  Function description
 423:Core/Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT ring buffer
 424:Core/Src/SEGGER_RTT.c **** *    and updates the associated write pointer which is periodically
 425:Core/Src/SEGGER_RTT.c **** *    read by the host.
 426:Core/Src/SEGGER_RTT.c **** *    It is callers responsibility to make sure data actually fits in buffer.
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 15


 427:Core/Src/SEGGER_RTT.c **** *
 428:Core/Src/SEGGER_RTT.c **** *  Parameters
 429:Core/Src/SEGGER_RTT.c **** *    pRing        Ring buffer to post to.
 430:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 431:Core/Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 432:Core/Src/SEGGER_RTT.c **** *
 433:Core/Src/SEGGER_RTT.c **** *  Notes
 434:Core/Src/SEGGER_RTT.c **** *    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
 435:Core/Src/SEGGER_RTT.c **** */
 436:Core/Src/SEGGER_RTT.c **** static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 370              		.loc 1 436 94
 371              		.cfi_startproc
 372              		@ args = 0, pretend = 0, frame = 32
 373              		@ frame_needed = 1, uses_anonymous_args = 0
 374 0000 80B5     		push	{r7, lr}
 375              	.LCFI10:
 376              		.cfi_def_cfa_offset 8
 377              		.cfi_offset 7, -8
 378              		.cfi_offset 14, -4
 379 0002 88B0     		sub	sp, sp, #32
 380              	.LCFI11:
 381              		.cfi_def_cfa_offset 40
 382 0004 00AF     		add	r7, sp, #0
 383              	.LCFI12:
 384              		.cfi_def_cfa_register 7
 385 0006 F860     		str	r0, [r7, #12]
 386 0008 B960     		str	r1, [r7, #8]
 387 000a 7A60     		str	r2, [r7, #4]
 437:Core/Src/SEGGER_RTT.c ****   unsigned NumBytesAtOnce;
 438:Core/Src/SEGGER_RTT.c ****   unsigned WrOff;
 439:Core/Src/SEGGER_RTT.c ****   unsigned Rem;
 440:Core/Src/SEGGER_RTT.c ****   volatile char* pDst;
 441:Core/Src/SEGGER_RTT.c **** 
 442:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 388              		.loc 1 442 9
 389 000c FB68     		ldr	r3, [r7, #12]
 390 000e DB68     		ldr	r3, [r3, #12]
 391 0010 FB61     		str	r3, [r7, #28]
 443:Core/Src/SEGGER_RTT.c ****   Rem = pRing->SizeOfBuffer - WrOff;
 392              		.loc 1 443 14
 393 0012 FB68     		ldr	r3, [r7, #12]
 394 0014 9A68     		ldr	r2, [r3, #8]
 395              		.loc 1 443 7
 396 0016 FB69     		ldr	r3, [r7, #28]
 397 0018 D31A     		subs	r3, r2, r3
 398 001a BB61     		str	r3, [r7, #24]
 444:Core/Src/SEGGER_RTT.c ****   if (Rem > NumBytes) {
 399              		.loc 1 444 6
 400 001c BA69     		ldr	r2, [r7, #24]
 401 001e 7B68     		ldr	r3, [r7, #4]
 402 0020 9A42     		cmp	r2, r3
 403 0022 11D9     		bls	.L13
 445:Core/Src/SEGGER_RTT.c ****     //
 446:Core/Src/SEGGER_RTT.c ****     // All data fits before wrap around
 447:Core/Src/SEGGER_RTT.c ****     //
 448:Core/Src/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 404              		.loc 1 448 18
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 16


 405 0024 FB68     		ldr	r3, [r7, #12]
 406 0026 5A68     		ldr	r2, [r3, #4]
 407              		.loc 1 448 10
 408 0028 FB69     		ldr	r3, [r7, #28]
 409 002a 1344     		add	r3, r3, r2
 410 002c 3B61     		str	r3, [r7, #16]
 449:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 450:Core/Src/SEGGER_RTT.c ****     WrOff += NumBytes;
 451:Core/Src/SEGGER_RTT.c ****     while (NumBytes--) {
 452:Core/Src/SEGGER_RTT.c ****       *pDst++ = *pData++;
 453:Core/Src/SEGGER_RTT.c ****     };
 454:Core/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 455:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 456:Core/Src/SEGGER_RTT.c **** #else
 457:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 411              		.loc 1 457 5
 412 002e 7A68     		ldr	r2, [r7, #4]
 413 0030 B968     		ldr	r1, [r7, #8]
 414 0032 3869     		ldr	r0, [r7, #16]
 415 0034 FFF7FEFF 		bl	memcpy
 458:Core/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 416              		.loc 1 458 5
 417              		.syntax unified
 418              	@ 458 "Core/Src/SEGGER_RTT.c" 1
 419 0038 BFF35F8F 		dmb
 420              	
 421              	@ 0 "" 2
 459:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff + NumBytes;
 422              		.loc 1 459 26
 423              		.thumb
 424              		.syntax unified
 425 003c FA69     		ldr	r2, [r7, #28]
 426 003e 7B68     		ldr	r3, [r7, #4]
 427 0040 1A44     		add	r2, r2, r3
 428              		.loc 1 459 18
 429 0042 FB68     		ldr	r3, [r7, #12]
 430 0044 DA60     		str	r2, [r3, #12]
 460:Core/Src/SEGGER_RTT.c **** #endif
 461:Core/Src/SEGGER_RTT.c ****   } else {
 462:Core/Src/SEGGER_RTT.c ****     //
 463:Core/Src/SEGGER_RTT.c ****     // We reach the end of the buffer, so need to wrap around
 464:Core/Src/SEGGER_RTT.c ****     //
 465:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 466:Core/Src/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 467:Core/Src/SEGGER_RTT.c ****     NumBytesAtOnce = Rem;
 468:Core/Src/SEGGER_RTT.c ****     while (NumBytesAtOnce--) {
 469:Core/Src/SEGGER_RTT.c ****       *pDst++ = *pData++;
 470:Core/Src/SEGGER_RTT.c ****     };
 471:Core/Src/SEGGER_RTT.c ****     pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 472:Core/Src/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 473:Core/Src/SEGGER_RTT.c ****     while (NumBytesAtOnce--) {
 474:Core/Src/SEGGER_RTT.c ****       *pDst++ = *pData++;
 475:Core/Src/SEGGER_RTT.c ****     };
 476:Core/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 477:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = NumBytes - Rem;
 478:Core/Src/SEGGER_RTT.c **** #else
 479:Core/Src/SEGGER_RTT.c ****     NumBytesAtOnce = Rem;
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 17


 480:Core/Src/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 481:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 482:Core/Src/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 483:Core/Src/SEGGER_RTT.c ****     pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 484:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 485:Core/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 486:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = NumBytesAtOnce;
 487:Core/Src/SEGGER_RTT.c **** #endif
 488:Core/Src/SEGGER_RTT.c ****   }
 489:Core/Src/SEGGER_RTT.c **** }
 431              		.loc 1 489 1
 432 0046 1FE0     		b	.L15
 433              	.L13:
 479:Core/Src/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 434              		.loc 1 479 20
 435 0048 BB69     		ldr	r3, [r7, #24]
 436 004a 7B61     		str	r3, [r7, #20]
 480:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 437              		.loc 1 480 18
 438 004c FB68     		ldr	r3, [r7, #12]
 439 004e 5A68     		ldr	r2, [r3, #4]
 480:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 440              		.loc 1 480 10
 441 0050 FB69     		ldr	r3, [r7, #28]
 442 0052 1344     		add	r3, r3, r2
 443 0054 3B61     		str	r3, [r7, #16]
 481:Core/Src/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 444              		.loc 1 481 5
 445 0056 7A69     		ldr	r2, [r7, #20]
 446 0058 B968     		ldr	r1, [r7, #8]
 447 005a 3869     		ldr	r0, [r7, #16]
 448 005c FFF7FEFF 		bl	memcpy
 482:Core/Src/SEGGER_RTT.c ****     pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 449              		.loc 1 482 20
 450 0060 7A68     		ldr	r2, [r7, #4]
 451 0062 BB69     		ldr	r3, [r7, #24]
 452 0064 D31A     		subs	r3, r2, r3
 453 0066 7B61     		str	r3, [r7, #20]
 483:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 454              		.loc 1 483 10
 455 0068 FB68     		ldr	r3, [r7, #12]
 456 006a 5B68     		ldr	r3, [r3, #4]
 457 006c 3B61     		str	r3, [r7, #16]
 484:Core/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 458              		.loc 1 484 5
 459 006e BA68     		ldr	r2, [r7, #8]
 460 0070 BB69     		ldr	r3, [r7, #24]
 461 0072 1344     		add	r3, r3, r2
 462 0074 7A69     		ldr	r2, [r7, #20]
 463 0076 1946     		mov	r1, r3
 464 0078 3869     		ldr	r0, [r7, #16]
 465 007a FFF7FEFF 		bl	memcpy
 485:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = NumBytesAtOnce;
 466              		.loc 1 485 5
 467              		.syntax unified
 468              	@ 485 "Core/Src/SEGGER_RTT.c" 1
 469 007e BFF35F8F 		dmb
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 18


 470              	
 471              	@ 0 "" 2
 486:Core/Src/SEGGER_RTT.c **** #endif
 472              		.loc 1 486 18
 473              		.thumb
 474              		.syntax unified
 475 0082 FB68     		ldr	r3, [r7, #12]
 476 0084 7A69     		ldr	r2, [r7, #20]
 477 0086 DA60     		str	r2, [r3, #12]
 478              	.L15:
 479              		.loc 1 489 1
 480 0088 00BF     		nop
 481 008a 2037     		adds	r7, r7, #32
 482              	.LCFI13:
 483              		.cfi_def_cfa_offset 8
 484 008c BD46     		mov	sp, r7
 485              	.LCFI14:
 486              		.cfi_def_cfa_register 13
 487              		@ sp needed
 488 008e 80BD     		pop	{r7, pc}
 489              		.cfi_endproc
 490              	.LFE2:
 492              		.section	.text._PostTerminalSwitch,"ax",%progbits
 493              		.align	1
 494              		.syntax unified
 495              		.thumb
 496              		.thumb_func
 498              	_PostTerminalSwitch:
 499              	.LFB3:
 490:Core/Src/SEGGER_RTT.c **** 
 491:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 492:Core/Src/SEGGER_RTT.c **** *
 493:Core/Src/SEGGER_RTT.c **** *       _PostTerminalSwitch()
 494:Core/Src/SEGGER_RTT.c **** *
 495:Core/Src/SEGGER_RTT.c **** *  Function description
 496:Core/Src/SEGGER_RTT.c **** *    Switch terminal to the given terminal ID.  It is the caller's
 497:Core/Src/SEGGER_RTT.c **** *    responsibility to ensure the terminal ID is correct and there is
 498:Core/Src/SEGGER_RTT.c **** *    enough space in the buffer for this to complete successfully.
 499:Core/Src/SEGGER_RTT.c **** *
 500:Core/Src/SEGGER_RTT.c **** *  Parameters
 501:Core/Src/SEGGER_RTT.c **** *    pRing        Ring buffer to post to.
 502:Core/Src/SEGGER_RTT.c **** *    TerminalId   Terminal ID to switch to.
 503:Core/Src/SEGGER_RTT.c **** */
 504:Core/Src/SEGGER_RTT.c **** static void _PostTerminalSwitch(SEGGER_RTT_BUFFER_UP* pRing, unsigned char TerminalId) {
 500              		.loc 1 504 88
 501              		.cfi_startproc
 502              		@ args = 0, pretend = 0, frame = 16
 503              		@ frame_needed = 1, uses_anonymous_args = 0
 504 0000 80B5     		push	{r7, lr}
 505              	.LCFI15:
 506              		.cfi_def_cfa_offset 8
 507              		.cfi_offset 7, -8
 508              		.cfi_offset 14, -4
 509 0002 84B0     		sub	sp, sp, #16
 510              	.LCFI16:
 511              		.cfi_def_cfa_offset 24
 512 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 19


 513              	.LCFI17:
 514              		.cfi_def_cfa_register 7
 515 0006 7860     		str	r0, [r7, #4]
 516 0008 0B46     		mov	r3, r1
 517 000a FB70     		strb	r3, [r7, #3]
 505:Core/Src/SEGGER_RTT.c ****   unsigned char ac[2];
 506:Core/Src/SEGGER_RTT.c **** 
 507:Core/Src/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 518              		.loc 1 507 9
 519 000c FF23     		movs	r3, #255
 520 000e 3B73     		strb	r3, [r7, #12]
 508:Core/Src/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 521              		.loc 1 508 23
 522 0010 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 523 0012 074A     		ldr	r2, .L17
 524 0014 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 525              		.loc 1 508 9
 526 0016 7B73     		strb	r3, [r7, #13]
 509:Core/Src/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 527              		.loc 1 509 3
 528 0018 07F10C03 		add	r3, r7, #12
 529 001c 0222     		movs	r2, #2
 530 001e 1946     		mov	r1, r3
 531 0020 7868     		ldr	r0, [r7, #4]
 532 0022 FFF7FEFF 		bl	_WriteBlocking
 510:Core/Src/SEGGER_RTT.c **** }
 533              		.loc 1 510 1
 534 0026 00BF     		nop
 535 0028 1037     		adds	r7, r7, #16
 536              	.LCFI18:
 537              		.cfi_def_cfa_offset 8
 538 002a BD46     		mov	sp, r7
 539              	.LCFI19:
 540              		.cfi_def_cfa_register 13
 541              		@ sp needed
 542 002c 80BD     		pop	{r7, pc}
 543              	.L18:
 544 002e 00BF     		.align	2
 545              	.L17:
 546 0030 00000000 		.word	_aTerminalId
 547              		.cfi_endproc
 548              	.LFE3:
 550              		.section	.text._GetAvailWriteSpace,"ax",%progbits
 551              		.align	1
 552              		.syntax unified
 553              		.thumb
 554              		.thumb_func
 556              	_GetAvailWriteSpace:
 557              	.LFB4:
 511:Core/Src/SEGGER_RTT.c **** 
 512:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 513:Core/Src/SEGGER_RTT.c **** *
 514:Core/Src/SEGGER_RTT.c **** *       _GetAvailWriteSpace()
 515:Core/Src/SEGGER_RTT.c **** *
 516:Core/Src/SEGGER_RTT.c **** *  Function description
 517:Core/Src/SEGGER_RTT.c **** *    Returns the number of bytes that can be written to the ring
 518:Core/Src/SEGGER_RTT.c **** *    buffer without blocking.
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 20


 519:Core/Src/SEGGER_RTT.c **** *
 520:Core/Src/SEGGER_RTT.c **** *  Parameters
 521:Core/Src/SEGGER_RTT.c **** *    pRing        Ring buffer to check.
 522:Core/Src/SEGGER_RTT.c **** *
 523:Core/Src/SEGGER_RTT.c **** *  Return value
 524:Core/Src/SEGGER_RTT.c **** *    Number of bytes that are free in the buffer.
 525:Core/Src/SEGGER_RTT.c **** */
 526:Core/Src/SEGGER_RTT.c **** static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 558              		.loc 1 526 66
 559              		.cfi_startproc
 560              		@ args = 0, pretend = 0, frame = 24
 561              		@ frame_needed = 1, uses_anonymous_args = 0
 562              		@ link register save eliminated.
 563 0000 80B4     		push	{r7}
 564              	.LCFI20:
 565              		.cfi_def_cfa_offset 4
 566              		.cfi_offset 7, -4
 567 0002 87B0     		sub	sp, sp, #28
 568              	.LCFI21:
 569              		.cfi_def_cfa_offset 32
 570 0004 00AF     		add	r7, sp, #0
 571              	.LCFI22:
 572              		.cfi_def_cfa_register 7
 573 0006 7860     		str	r0, [r7, #4]
 527:Core/Src/SEGGER_RTT.c ****   unsigned RdOff;
 528:Core/Src/SEGGER_RTT.c ****   unsigned WrOff;
 529:Core/Src/SEGGER_RTT.c ****   unsigned r;
 530:Core/Src/SEGGER_RTT.c ****   //
 531:Core/Src/SEGGER_RTT.c ****   // Avoid warnings regarding volatile access order.  It's not a problem
 532:Core/Src/SEGGER_RTT.c ****   // in this case, but dampen compiler enthusiasm.
 533:Core/Src/SEGGER_RTT.c ****   //
 534:Core/Src/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 574              		.loc 1 534 9
 575 0008 7B68     		ldr	r3, [r7, #4]
 576 000a 1B69     		ldr	r3, [r3, #16]
 577 000c 3B61     		str	r3, [r7, #16]
 535:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 578              		.loc 1 535 9
 579 000e 7B68     		ldr	r3, [r7, #4]
 580 0010 DB68     		ldr	r3, [r3, #12]
 581 0012 FB60     		str	r3, [r7, #12]
 536:Core/Src/SEGGER_RTT.c ****   if (RdOff <= WrOff) {
 582              		.loc 1 536 6
 583 0014 3A69     		ldr	r2, [r7, #16]
 584 0016 FB68     		ldr	r3, [r7, #12]
 585 0018 9A42     		cmp	r2, r3
 586 001a 08D8     		bhi	.L20
 537:Core/Src/SEGGER_RTT.c ****     r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 587              		.loc 1 537 14
 588 001c 7B68     		ldr	r3, [r7, #4]
 589 001e 9A68     		ldr	r2, [r3, #8]
 590              		.loc 1 537 34
 591 0020 FB68     		ldr	r3, [r7, #12]
 592 0022 D21A     		subs	r2, r2, r3
 593              		.loc 1 537 42
 594 0024 3B69     		ldr	r3, [r7, #16]
 595 0026 1344     		add	r3, r3, r2
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 21


 596              		.loc 1 537 7
 597 0028 013B     		subs	r3, r3, #1
 598 002a 7B61     		str	r3, [r7, #20]
 599 002c 04E0     		b	.L21
 600              	.L20:
 538:Core/Src/SEGGER_RTT.c ****   } else {
 539:Core/Src/SEGGER_RTT.c ****     r = RdOff - WrOff - 1u;
 601              		.loc 1 539 15
 602 002e 3A69     		ldr	r2, [r7, #16]
 603 0030 FB68     		ldr	r3, [r7, #12]
 604 0032 D31A     		subs	r3, r2, r3
 605              		.loc 1 539 7
 606 0034 013B     		subs	r3, r3, #1
 607 0036 7B61     		str	r3, [r7, #20]
 608              	.L21:
 540:Core/Src/SEGGER_RTT.c ****   }
 541:Core/Src/SEGGER_RTT.c ****   return r;
 609              		.loc 1 541 10
 610 0038 7B69     		ldr	r3, [r7, #20]
 542:Core/Src/SEGGER_RTT.c **** }
 611              		.loc 1 542 1
 612 003a 1846     		mov	r0, r3
 613 003c 1C37     		adds	r7, r7, #28
 614              	.LCFI23:
 615              		.cfi_def_cfa_offset 4
 616 003e BD46     		mov	sp, r7
 617              	.LCFI24:
 618              		.cfi_def_cfa_register 13
 619              		@ sp needed
 620 0040 5DF8047B 		ldr	r7, [sp], #4
 621              	.LCFI25:
 622              		.cfi_restore 7
 623              		.cfi_def_cfa_offset 0
 624 0044 7047     		bx	lr
 625              		.cfi_endproc
 626              	.LFE4:
 628              		.section	.text.SEGGER_RTT_ReadUpBufferNoLock,"ax",%progbits
 629              		.align	1
 630              		.global	SEGGER_RTT_ReadUpBufferNoLock
 631              		.syntax unified
 632              		.thumb
 633              		.thumb_func
 635              	SEGGER_RTT_ReadUpBufferNoLock:
 636              	.LFB5:
 543:Core/Src/SEGGER_RTT.c **** 
 544:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 545:Core/Src/SEGGER_RTT.c **** *
 546:Core/Src/SEGGER_RTT.c **** *       Public code
 547:Core/Src/SEGGER_RTT.c **** *
 548:Core/Src/SEGGER_RTT.c **** **********************************************************************
 549:Core/Src/SEGGER_RTT.c **** */
 550:Core/Src/SEGGER_RTT.c **** 
 551:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 552:Core/Src/SEGGER_RTT.c **** *
 553:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_ReadUpBufferNoLock()
 554:Core/Src/SEGGER_RTT.c **** *
 555:Core/Src/SEGGER_RTT.c **** *  Function description
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 22


 556:Core/Src/SEGGER_RTT.c **** *    Reads characters from SEGGER real-time-terminal control block
 557:Core/Src/SEGGER_RTT.c **** *    which have been previously stored by the application.
 558:Core/Src/SEGGER_RTT.c **** *    Do not lock against interrupts and multiple access.
 559:Core/Src/SEGGER_RTT.c **** *    Used to do the same operation that J-Link does, to transfer
 560:Core/Src/SEGGER_RTT.c **** *    RTT data via other channels, such as TCP/IP or UART.
 561:Core/Src/SEGGER_RTT.c **** *
 562:Core/Src/SEGGER_RTT.c **** *  Parameters
 563:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of Up-buffer to be used.
 564:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to buffer provided by target application, to copy characters from RTT-up-
 565:Core/Src/SEGGER_RTT.c **** *    BufferSize   Size of the target application buffer.
 566:Core/Src/SEGGER_RTT.c **** *
 567:Core/Src/SEGGER_RTT.c **** *  Return value
 568:Core/Src/SEGGER_RTT.c **** *    Number of bytes that have been read.
 569:Core/Src/SEGGER_RTT.c **** *
 570:Core/Src/SEGGER_RTT.c **** *  Additional information
 571:Core/Src/SEGGER_RTT.c **** *    This function must not be called when J-Link might also do RTT.
 572:Core/Src/SEGGER_RTT.c **** */
 573:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 637              		.loc 1 573 96
 638              		.cfi_startproc
 639              		@ args = 0, pretend = 0, frame = 48
 640              		@ frame_needed = 1, uses_anonymous_args = 0
 641 0000 80B5     		push	{r7, lr}
 642              	.LCFI26:
 643              		.cfi_def_cfa_offset 8
 644              		.cfi_offset 7, -8
 645              		.cfi_offset 14, -4
 646 0002 8CB0     		sub	sp, sp, #48
 647              	.LCFI27:
 648              		.cfi_def_cfa_offset 56
 649 0004 00AF     		add	r7, sp, #0
 650              	.LCFI28:
 651              		.cfi_def_cfa_register 7
 652 0006 F860     		str	r0, [r7, #12]
 653 0008 B960     		str	r1, [r7, #8]
 654 000a 7A60     		str	r2, [r7, #4]
 655              	.LBB2:
 574:Core/Src/SEGGER_RTT.c ****   unsigned                NumBytesRem;
 575:Core/Src/SEGGER_RTT.c ****   unsigned                NumBytesRead;
 576:Core/Src/SEGGER_RTT.c ****   unsigned                RdOff;
 577:Core/Src/SEGGER_RTT.c ****   unsigned                WrOff;
 578:Core/Src/SEGGER_RTT.c ****   unsigned char*          pBuffer;
 579:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP*   pRing;
 580:Core/Src/SEGGER_RTT.c ****   volatile char*          pSrc;
 581:Core/Src/SEGGER_RTT.c **** 
 582:Core/Src/SEGGER_RTT.c ****   INIT();
 656              		.loc 1 582 3
 657 000c 3E4B     		ldr	r3, .L29
 658 000e 3B62     		str	r3, [r7, #32]
 659 0010 3B6A     		ldr	r3, [r7, #32]
 660 0012 1B78     		ldrb	r3, [r3]
 661 0014 DBB2     		uxtb	r3, r3
 662 0016 532B     		cmp	r3, #83
 663 0018 01D0     		beq	.L24
 664              		.loc 1 582 3 is_stmt 0 discriminator 1
 665 001a FFF7FEFF 		bl	_DoInit
 666              	.L24:
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 23


 667              	.LBE2:
 583:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OF
 668              		.loc 1 583 9 is_stmt 1
 669 001e FB68     		ldr	r3, [r7, #12]
 670 0020 5A1C     		adds	r2, r3, #1
 671 0022 1346     		mov	r3, r2
 672 0024 5B00     		lsls	r3, r3, #1
 673 0026 1344     		add	r3, r3, r2
 674 0028 DB00     		lsls	r3, r3, #3
 675 002a 374A     		ldr	r2, .L29
 676 002c 1344     		add	r3, r3, r2
 677 002e FB61     		str	r3, [r7, #28]
 584:Core/Src/SEGGER_RTT.c ****   pBuffer = (unsigned char*)pData;
 678              		.loc 1 584 11
 679 0030 BB68     		ldr	r3, [r7, #8]
 680 0032 7B62     		str	r3, [r7, #36]
 585:Core/Src/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 681              		.loc 1 585 9
 682 0034 FB69     		ldr	r3, [r7, #28]
 683 0036 1B69     		ldr	r3, [r3, #16]
 684 0038 BB62     		str	r3, [r7, #40]
 586:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 685              		.loc 1 586 9
 686 003a FB69     		ldr	r3, [r7, #28]
 687 003c DB68     		ldr	r3, [r3, #12]
 688 003e BB61     		str	r3, [r7, #24]
 587:Core/Src/SEGGER_RTT.c ****   NumBytesRead = 0u;
 689              		.loc 1 587 16
 690 0040 0023     		movs	r3, #0
 691 0042 FB62     		str	r3, [r7, #44]
 588:Core/Src/SEGGER_RTT.c ****   //
 589:Core/Src/SEGGER_RTT.c ****   // Read from current read position to wrap-around of buffer, first
 590:Core/Src/SEGGER_RTT.c ****   //
 591:Core/Src/SEGGER_RTT.c ****   if (RdOff > WrOff) {
 692              		.loc 1 591 6
 693 0044 BA6A     		ldr	r2, [r7, #40]
 694 0046 BB69     		ldr	r3, [r7, #24]
 695 0048 9A42     		cmp	r2, r3
 696 004a 2BD9     		bls	.L25
 592:Core/Src/SEGGER_RTT.c ****     NumBytesRem = pRing->SizeOfBuffer - RdOff;
 697              		.loc 1 592 24
 698 004c FB69     		ldr	r3, [r7, #28]
 699 004e 9A68     		ldr	r2, [r3, #8]
 700              		.loc 1 592 17
 701 0050 BB6A     		ldr	r3, [r7, #40]
 702 0052 D31A     		subs	r3, r2, r3
 703 0054 7B61     		str	r3, [r7, #20]
 593:Core/Src/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 704              		.loc 1 593 17
 705 0056 7A69     		ldr	r2, [r7, #20]
 706 0058 7B68     		ldr	r3, [r7, #4]
 707 005a 9342     		cmp	r3, r2
 708 005c 28BF     		it	cs
 709 005e 1346     		movcs	r3, r2
 710 0060 7B61     		str	r3, [r7, #20]
 594:Core/Src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 711              		.loc 1 594 18
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 24


 712 0062 FB69     		ldr	r3, [r7, #28]
 713 0064 5A68     		ldr	r2, [r3, #4]
 714              		.loc 1 594 10
 715 0066 BB6A     		ldr	r3, [r7, #40]
 716 0068 1344     		add	r3, r3, r2
 717 006a 3B61     		str	r3, [r7, #16]
 595:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 596:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 597:Core/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 598:Core/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 599:Core/Src/SEGGER_RTT.c ****     while (NumBytesRem--) {
 600:Core/Src/SEGGER_RTT.c ****       *pBuffer++ = *pSrc++;
 601:Core/Src/SEGGER_RTT.c ****     };
 602:Core/Src/SEGGER_RTT.c **** #else
 603:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 718              		.loc 1 603 5
 719 006c 7A69     		ldr	r2, [r7, #20]
 720 006e 3969     		ldr	r1, [r7, #16]
 721 0070 786A     		ldr	r0, [r7, #36]
 722 0072 FFF7FEFF 		bl	memcpy
 604:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 723              		.loc 1 604 18
 724 0076 FA6A     		ldr	r2, [r7, #44]
 725 0078 7B69     		ldr	r3, [r7, #20]
 726 007a 1344     		add	r3, r3, r2
 727 007c FB62     		str	r3, [r7, #44]
 605:Core/Src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 728              		.loc 1 605 18
 729 007e 7A6A     		ldr	r2, [r7, #36]
 730 0080 7B69     		ldr	r3, [r7, #20]
 731 0082 1344     		add	r3, r3, r2
 732 0084 7B62     		str	r3, [r7, #36]
 606:Core/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 733              		.loc 1 606 18
 734 0086 7A68     		ldr	r2, [r7, #4]
 735 0088 7B69     		ldr	r3, [r7, #20]
 736 008a D31A     		subs	r3, r2, r3
 737 008c 7B60     		str	r3, [r7, #4]
 607:Core/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 738              		.loc 1 607 18
 739 008e BA6A     		ldr	r2, [r7, #40]
 740 0090 7B69     		ldr	r3, [r7, #20]
 741 0092 1344     		add	r3, r3, r2
 742 0094 BB62     		str	r3, [r7, #40]
 608:Core/Src/SEGGER_RTT.c **** #endif
 609:Core/Src/SEGGER_RTT.c ****     //
 610:Core/Src/SEGGER_RTT.c ****     // Handle wrap-around of buffer
 611:Core/Src/SEGGER_RTT.c ****     //
 612:Core/Src/SEGGER_RTT.c ****     if (RdOff == pRing->SizeOfBuffer) {
 743              		.loc 1 612 23
 744 0096 FB69     		ldr	r3, [r7, #28]
 745 0098 9B68     		ldr	r3, [r3, #8]
 746              		.loc 1 612 8
 747 009a BA6A     		ldr	r2, [r7, #40]
 748 009c 9A42     		cmp	r2, r3
 749 009e 01D1     		bne	.L25
 613:Core/Src/SEGGER_RTT.c ****       RdOff = 0u;
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 25


 750              		.loc 1 613 13
 751 00a0 0023     		movs	r3, #0
 752 00a2 BB62     		str	r3, [r7, #40]
 753              	.L25:
 614:Core/Src/SEGGER_RTT.c ****     }
 615:Core/Src/SEGGER_RTT.c ****   }
 616:Core/Src/SEGGER_RTT.c ****   //
 617:Core/Src/SEGGER_RTT.c ****   // Read remaining items of buffer
 618:Core/Src/SEGGER_RTT.c ****   //
 619:Core/Src/SEGGER_RTT.c ****   NumBytesRem = WrOff - RdOff;
 754              		.loc 1 619 15
 755 00a4 BA69     		ldr	r2, [r7, #24]
 756 00a6 BB6A     		ldr	r3, [r7, #40]
 757 00a8 D31A     		subs	r3, r2, r3
 758 00aa 7B61     		str	r3, [r7, #20]
 620:Core/Src/SEGGER_RTT.c ****   NumBytesRem = MIN(NumBytesRem, BufferSize);
 759              		.loc 1 620 15
 760 00ac 7A69     		ldr	r2, [r7, #20]
 761 00ae 7B68     		ldr	r3, [r7, #4]
 762 00b0 9342     		cmp	r3, r2
 763 00b2 28BF     		it	cs
 764 00b4 1346     		movcs	r3, r2
 765 00b6 7B61     		str	r3, [r7, #20]
 621:Core/Src/SEGGER_RTT.c ****   if (NumBytesRem > 0u) {
 766              		.loc 1 621 6
 767 00b8 7B69     		ldr	r3, [r7, #20]
 768 00ba 002B     		cmp	r3, #0
 769 00bc 19D0     		beq	.L26
 622:Core/Src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 770              		.loc 1 622 18
 771 00be FB69     		ldr	r3, [r7, #28]
 772 00c0 5A68     		ldr	r2, [r3, #4]
 773              		.loc 1 622 10
 774 00c2 BB6A     		ldr	r3, [r7, #40]
 775 00c4 1344     		add	r3, r3, r2
 776 00c6 3B61     		str	r3, [r7, #16]
 623:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 624:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 625:Core/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 626:Core/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 627:Core/Src/SEGGER_RTT.c ****     while (NumBytesRem--) {
 628:Core/Src/SEGGER_RTT.c ****       *pBuffer++ = *pSrc++;
 629:Core/Src/SEGGER_RTT.c ****     };
 630:Core/Src/SEGGER_RTT.c **** #else
 631:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 777              		.loc 1 631 5
 778 00c8 7A69     		ldr	r2, [r7, #20]
 779 00ca 3969     		ldr	r1, [r7, #16]
 780 00cc 786A     		ldr	r0, [r7, #36]
 781 00ce FFF7FEFF 		bl	memcpy
 632:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 782              		.loc 1 632 18
 783 00d2 FA6A     		ldr	r2, [r7, #44]
 784 00d4 7B69     		ldr	r3, [r7, #20]
 785 00d6 1344     		add	r3, r3, r2
 786 00d8 FB62     		str	r3, [r7, #44]
 633:Core/Src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 26


 787              		.loc 1 633 18
 788 00da 7A6A     		ldr	r2, [r7, #36]
 789 00dc 7B69     		ldr	r3, [r7, #20]
 790 00de 1344     		add	r3, r3, r2
 791 00e0 7B62     		str	r3, [r7, #36]
 634:Core/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 792              		.loc 1 634 18
 793 00e2 7A68     		ldr	r2, [r7, #4]
 794 00e4 7B69     		ldr	r3, [r7, #20]
 795 00e6 D31A     		subs	r3, r2, r3
 796 00e8 7B60     		str	r3, [r7, #4]
 635:Core/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 797              		.loc 1 635 18
 798 00ea BA6A     		ldr	r2, [r7, #40]
 799 00ec 7B69     		ldr	r3, [r7, #20]
 800 00ee 1344     		add	r3, r3, r2
 801 00f0 BB62     		str	r3, [r7, #40]
 802              	.L26:
 636:Core/Src/SEGGER_RTT.c **** #endif
 637:Core/Src/SEGGER_RTT.c ****   }
 638:Core/Src/SEGGER_RTT.c ****   //
 639:Core/Src/SEGGER_RTT.c ****   // Update read offset of buffer
 640:Core/Src/SEGGER_RTT.c ****   //
 641:Core/Src/SEGGER_RTT.c ****   if (NumBytesRead) {
 803              		.loc 1 641 6
 804 00f2 FB6A     		ldr	r3, [r7, #44]
 805 00f4 002B     		cmp	r3, #0
 806 00f6 02D0     		beq	.L27
 642:Core/Src/SEGGER_RTT.c ****     pRing->RdOff = RdOff;
 807              		.loc 1 642 18
 808 00f8 FB69     		ldr	r3, [r7, #28]
 809 00fa BA6A     		ldr	r2, [r7, #40]
 810 00fc 1A61     		str	r2, [r3, #16]
 811              	.L27:
 643:Core/Src/SEGGER_RTT.c ****   }
 644:Core/Src/SEGGER_RTT.c ****   //
 645:Core/Src/SEGGER_RTT.c ****   return NumBytesRead;
 812              		.loc 1 645 10
 813 00fe FB6A     		ldr	r3, [r7, #44]
 646:Core/Src/SEGGER_RTT.c **** }
 814              		.loc 1 646 1
 815 0100 1846     		mov	r0, r3
 816 0102 3037     		adds	r7, r7, #48
 817              	.LCFI29:
 818              		.cfi_def_cfa_offset 8
 819 0104 BD46     		mov	sp, r7
 820              	.LCFI30:
 821              		.cfi_def_cfa_register 13
 822              		@ sp needed
 823 0106 80BD     		pop	{r7, pc}
 824              	.L30:
 825              		.align	2
 826              	.L29:
 827 0108 00000000 		.word	_SEGGER_RTT
 828              		.cfi_endproc
 829              	.LFE5:
 831              		.section	.text.SEGGER_RTT_ReadNoLock,"ax",%progbits
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 27


 832              		.align	1
 833              		.global	SEGGER_RTT_ReadNoLock
 834              		.syntax unified
 835              		.thumb
 836              		.thumb_func
 838              	SEGGER_RTT_ReadNoLock:
 839              	.LFB6:
 647:Core/Src/SEGGER_RTT.c **** 
 648:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 649:Core/Src/SEGGER_RTT.c **** *
 650:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_ReadNoLock()
 651:Core/Src/SEGGER_RTT.c **** *
 652:Core/Src/SEGGER_RTT.c **** *  Function description
 653:Core/Src/SEGGER_RTT.c **** *    Reads characters from SEGGER real-time-terminal control block
 654:Core/Src/SEGGER_RTT.c **** *    which have been previously stored by the host.
 655:Core/Src/SEGGER_RTT.c **** *    Do not lock against interrupts and multiple access.
 656:Core/Src/SEGGER_RTT.c **** *
 657:Core/Src/SEGGER_RTT.c **** *  Parameters
 658:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of Down-buffer to be used (e.g. 0 for "Terminal").
 659:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to buffer provided by target application, to copy characters from RTT-dow
 660:Core/Src/SEGGER_RTT.c **** *    BufferSize   Size of the target application buffer.
 661:Core/Src/SEGGER_RTT.c **** *
 662:Core/Src/SEGGER_RTT.c **** *  Return value
 663:Core/Src/SEGGER_RTT.c **** *    Number of bytes that have been read.
 664:Core/Src/SEGGER_RTT.c **** */
 665:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 840              		.loc 1 665 88
 841              		.cfi_startproc
 842              		@ args = 0, pretend = 0, frame = 48
 843              		@ frame_needed = 1, uses_anonymous_args = 0
 844 0000 80B5     		push	{r7, lr}
 845              	.LCFI31:
 846              		.cfi_def_cfa_offset 8
 847              		.cfi_offset 7, -8
 848              		.cfi_offset 14, -4
 849 0002 8CB0     		sub	sp, sp, #48
 850              	.LCFI32:
 851              		.cfi_def_cfa_offset 56
 852 0004 00AF     		add	r7, sp, #0
 853              	.LCFI33:
 854              		.cfi_def_cfa_register 7
 855 0006 F860     		str	r0, [r7, #12]
 856 0008 B960     		str	r1, [r7, #8]
 857 000a 7A60     		str	r2, [r7, #4]
 858              	.LBB3:
 666:Core/Src/SEGGER_RTT.c ****   unsigned                NumBytesRem;
 667:Core/Src/SEGGER_RTT.c ****   unsigned                NumBytesRead;
 668:Core/Src/SEGGER_RTT.c ****   unsigned                RdOff;
 669:Core/Src/SEGGER_RTT.c ****   unsigned                WrOff;
 670:Core/Src/SEGGER_RTT.c ****   unsigned char*          pBuffer;
 671:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_DOWN* pRing;
 672:Core/Src/SEGGER_RTT.c ****   volatile char*          pSrc;
 673:Core/Src/SEGGER_RTT.c ****   //
 674:Core/Src/SEGGER_RTT.c ****   INIT();
 859              		.loc 1 674 3
 860 000c 3E4B     		ldr	r3, .L37
 861 000e 3B62     		str	r3, [r7, #32]
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 28


 862 0010 3B6A     		ldr	r3, [r7, #32]
 863 0012 1B78     		ldrb	r3, [r3]
 864 0014 DBB2     		uxtb	r3, r3
 865 0016 532B     		cmp	r3, #83
 866 0018 01D0     		beq	.L32
 867              		.loc 1 674 3 is_stmt 0 discriminator 1
 868 001a FFF7FEFF 		bl	_DoInit
 869              	.L32:
 870              	.LBE3:
 675:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHE
 871              		.loc 1 675 9 is_stmt 1
 872 001e FA68     		ldr	r2, [r7, #12]
 873 0020 1346     		mov	r3, r2
 874 0022 5B00     		lsls	r3, r3, #1
 875 0024 1344     		add	r3, r3, r2
 876 0026 DB00     		lsls	r3, r3, #3
 877 0028 6033     		adds	r3, r3, #96
 878 002a 374A     		ldr	r2, .L37
 879 002c 1344     		add	r3, r3, r2
 880 002e FB61     		str	r3, [r7, #28]
 676:Core/Src/SEGGER_RTT.c ****   pBuffer = (unsigned char*)pData;
 881              		.loc 1 676 11
 882 0030 BB68     		ldr	r3, [r7, #8]
 883 0032 7B62     		str	r3, [r7, #36]
 677:Core/Src/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 884              		.loc 1 677 9
 885 0034 FB69     		ldr	r3, [r7, #28]
 886 0036 1B69     		ldr	r3, [r3, #16]
 887 0038 BB62     		str	r3, [r7, #40]
 678:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 888              		.loc 1 678 9
 889 003a FB69     		ldr	r3, [r7, #28]
 890 003c DB68     		ldr	r3, [r3, #12]
 891 003e BB61     		str	r3, [r7, #24]
 679:Core/Src/SEGGER_RTT.c ****   NumBytesRead = 0u;
 892              		.loc 1 679 16
 893 0040 0023     		movs	r3, #0
 894 0042 FB62     		str	r3, [r7, #44]
 680:Core/Src/SEGGER_RTT.c ****   //
 681:Core/Src/SEGGER_RTT.c ****   // Read from current read position to wrap-around of buffer, first
 682:Core/Src/SEGGER_RTT.c ****   //
 683:Core/Src/SEGGER_RTT.c ****   if (RdOff > WrOff) {
 895              		.loc 1 683 6
 896 0044 BA6A     		ldr	r2, [r7, #40]
 897 0046 BB69     		ldr	r3, [r7, #24]
 898 0048 9A42     		cmp	r2, r3
 899 004a 2BD9     		bls	.L33
 684:Core/Src/SEGGER_RTT.c ****     NumBytesRem = pRing->SizeOfBuffer - RdOff;
 900              		.loc 1 684 24
 901 004c FB69     		ldr	r3, [r7, #28]
 902 004e 9A68     		ldr	r2, [r3, #8]
 903              		.loc 1 684 17
 904 0050 BB6A     		ldr	r3, [r7, #40]
 905 0052 D31A     		subs	r3, r2, r3
 906 0054 7B61     		str	r3, [r7, #20]
 685:Core/Src/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 907              		.loc 1 685 17
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 29


 908 0056 7A69     		ldr	r2, [r7, #20]
 909 0058 7B68     		ldr	r3, [r7, #4]
 910 005a 9342     		cmp	r3, r2
 911 005c 28BF     		it	cs
 912 005e 1346     		movcs	r3, r2
 913 0060 7B61     		str	r3, [r7, #20]
 686:Core/Src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 914              		.loc 1 686 18
 915 0062 FB69     		ldr	r3, [r7, #28]
 916 0064 5A68     		ldr	r2, [r3, #4]
 917              		.loc 1 686 10
 918 0066 BB6A     		ldr	r3, [r7, #40]
 919 0068 1344     		add	r3, r3, r2
 920 006a 3B61     		str	r3, [r7, #16]
 687:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 688:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 689:Core/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 690:Core/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 691:Core/Src/SEGGER_RTT.c ****     while (NumBytesRem--) {
 692:Core/Src/SEGGER_RTT.c ****       *pBuffer++ = *pSrc++;
 693:Core/Src/SEGGER_RTT.c ****     };
 694:Core/Src/SEGGER_RTT.c **** #else
 695:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 921              		.loc 1 695 5
 922 006c 7A69     		ldr	r2, [r7, #20]
 923 006e 3969     		ldr	r1, [r7, #16]
 924 0070 786A     		ldr	r0, [r7, #36]
 925 0072 FFF7FEFF 		bl	memcpy
 696:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 926              		.loc 1 696 18
 927 0076 FA6A     		ldr	r2, [r7, #44]
 928 0078 7B69     		ldr	r3, [r7, #20]
 929 007a 1344     		add	r3, r3, r2
 930 007c FB62     		str	r3, [r7, #44]
 697:Core/Src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 931              		.loc 1 697 18
 932 007e 7A6A     		ldr	r2, [r7, #36]
 933 0080 7B69     		ldr	r3, [r7, #20]
 934 0082 1344     		add	r3, r3, r2
 935 0084 7B62     		str	r3, [r7, #36]
 698:Core/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 936              		.loc 1 698 18
 937 0086 7A68     		ldr	r2, [r7, #4]
 938 0088 7B69     		ldr	r3, [r7, #20]
 939 008a D31A     		subs	r3, r2, r3
 940 008c 7B60     		str	r3, [r7, #4]
 699:Core/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 941              		.loc 1 699 18
 942 008e BA6A     		ldr	r2, [r7, #40]
 943 0090 7B69     		ldr	r3, [r7, #20]
 944 0092 1344     		add	r3, r3, r2
 945 0094 BB62     		str	r3, [r7, #40]
 700:Core/Src/SEGGER_RTT.c **** #endif
 701:Core/Src/SEGGER_RTT.c ****     //
 702:Core/Src/SEGGER_RTT.c ****     // Handle wrap-around of buffer
 703:Core/Src/SEGGER_RTT.c ****     //
 704:Core/Src/SEGGER_RTT.c ****     if (RdOff == pRing->SizeOfBuffer) {
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 30


 946              		.loc 1 704 23
 947 0096 FB69     		ldr	r3, [r7, #28]
 948 0098 9B68     		ldr	r3, [r3, #8]
 949              		.loc 1 704 8
 950 009a BA6A     		ldr	r2, [r7, #40]
 951 009c 9A42     		cmp	r2, r3
 952 009e 01D1     		bne	.L33
 705:Core/Src/SEGGER_RTT.c ****       RdOff = 0u;
 953              		.loc 1 705 13
 954 00a0 0023     		movs	r3, #0
 955 00a2 BB62     		str	r3, [r7, #40]
 956              	.L33:
 706:Core/Src/SEGGER_RTT.c ****     }
 707:Core/Src/SEGGER_RTT.c ****   }
 708:Core/Src/SEGGER_RTT.c ****   //
 709:Core/Src/SEGGER_RTT.c ****   // Read remaining items of buffer
 710:Core/Src/SEGGER_RTT.c ****   //
 711:Core/Src/SEGGER_RTT.c ****   NumBytesRem = WrOff - RdOff;
 957              		.loc 1 711 15
 958 00a4 BA69     		ldr	r2, [r7, #24]
 959 00a6 BB6A     		ldr	r3, [r7, #40]
 960 00a8 D31A     		subs	r3, r2, r3
 961 00aa 7B61     		str	r3, [r7, #20]
 712:Core/Src/SEGGER_RTT.c ****   NumBytesRem = MIN(NumBytesRem, BufferSize);
 962              		.loc 1 712 15
 963 00ac 7A69     		ldr	r2, [r7, #20]
 964 00ae 7B68     		ldr	r3, [r7, #4]
 965 00b0 9342     		cmp	r3, r2
 966 00b2 28BF     		it	cs
 967 00b4 1346     		movcs	r3, r2
 968 00b6 7B61     		str	r3, [r7, #20]
 713:Core/Src/SEGGER_RTT.c ****   if (NumBytesRem > 0u) {
 969              		.loc 1 713 6
 970 00b8 7B69     		ldr	r3, [r7, #20]
 971 00ba 002B     		cmp	r3, #0
 972 00bc 19D0     		beq	.L34
 714:Core/Src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 973              		.loc 1 714 18
 974 00be FB69     		ldr	r3, [r7, #28]
 975 00c0 5A68     		ldr	r2, [r3, #4]
 976              		.loc 1 714 10
 977 00c2 BB6A     		ldr	r3, [r7, #40]
 978 00c4 1344     		add	r3, r3, r2
 979 00c6 3B61     		str	r3, [r7, #16]
 715:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 716:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 717:Core/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 718:Core/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 719:Core/Src/SEGGER_RTT.c ****     while (NumBytesRem--) {
 720:Core/Src/SEGGER_RTT.c ****       *pBuffer++ = *pSrc++;
 721:Core/Src/SEGGER_RTT.c ****     };
 722:Core/Src/SEGGER_RTT.c **** #else
 723:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 980              		.loc 1 723 5
 981 00c8 7A69     		ldr	r2, [r7, #20]
 982 00ca 3969     		ldr	r1, [r7, #16]
 983 00cc 786A     		ldr	r0, [r7, #36]
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 31


 984 00ce FFF7FEFF 		bl	memcpy
 724:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 985              		.loc 1 724 18
 986 00d2 FA6A     		ldr	r2, [r7, #44]
 987 00d4 7B69     		ldr	r3, [r7, #20]
 988 00d6 1344     		add	r3, r3, r2
 989 00d8 FB62     		str	r3, [r7, #44]
 725:Core/Src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 990              		.loc 1 725 18
 991 00da 7A6A     		ldr	r2, [r7, #36]
 992 00dc 7B69     		ldr	r3, [r7, #20]
 993 00de 1344     		add	r3, r3, r2
 994 00e0 7B62     		str	r3, [r7, #36]
 726:Core/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 995              		.loc 1 726 18
 996 00e2 7A68     		ldr	r2, [r7, #4]
 997 00e4 7B69     		ldr	r3, [r7, #20]
 998 00e6 D31A     		subs	r3, r2, r3
 999 00e8 7B60     		str	r3, [r7, #4]
 727:Core/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 1000              		.loc 1 727 18
 1001 00ea BA6A     		ldr	r2, [r7, #40]
 1002 00ec 7B69     		ldr	r3, [r7, #20]
 1003 00ee 1344     		add	r3, r3, r2
 1004 00f0 BB62     		str	r3, [r7, #40]
 1005              	.L34:
 728:Core/Src/SEGGER_RTT.c **** #endif
 729:Core/Src/SEGGER_RTT.c ****   }
 730:Core/Src/SEGGER_RTT.c ****   if (NumBytesRead) {
 1006              		.loc 1 730 6
 1007 00f2 FB6A     		ldr	r3, [r7, #44]
 1008 00f4 002B     		cmp	r3, #0
 1009 00f6 02D0     		beq	.L35
 731:Core/Src/SEGGER_RTT.c ****     pRing->RdOff = RdOff;
 1010              		.loc 1 731 18
 1011 00f8 FB69     		ldr	r3, [r7, #28]
 1012 00fa BA6A     		ldr	r2, [r7, #40]
 1013 00fc 1A61     		str	r2, [r3, #16]
 1014              	.L35:
 732:Core/Src/SEGGER_RTT.c ****   }
 733:Core/Src/SEGGER_RTT.c ****   //
 734:Core/Src/SEGGER_RTT.c ****   return NumBytesRead;
 1015              		.loc 1 734 10
 1016 00fe FB6A     		ldr	r3, [r7, #44]
 735:Core/Src/SEGGER_RTT.c **** }
 1017              		.loc 1 735 1
 1018 0100 1846     		mov	r0, r3
 1019 0102 3037     		adds	r7, r7, #48
 1020              	.LCFI34:
 1021              		.cfi_def_cfa_offset 8
 1022 0104 BD46     		mov	sp, r7
 1023              	.LCFI35:
 1024              		.cfi_def_cfa_register 13
 1025              		@ sp needed
 1026 0106 80BD     		pop	{r7, pc}
 1027              	.L38:
 1028              		.align	2
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 32


 1029              	.L37:
 1030 0108 00000000 		.word	_SEGGER_RTT
 1031              		.cfi_endproc
 1032              	.LFE6:
 1034              		.section	.text.SEGGER_RTT_ReadUpBuffer,"ax",%progbits
 1035              		.align	1
 1036              		.global	SEGGER_RTT_ReadUpBuffer
 1037              		.syntax unified
 1038              		.thumb
 1039              		.thumb_func
 1041              	SEGGER_RTT_ReadUpBuffer:
 1042              	.LFB7:
 736:Core/Src/SEGGER_RTT.c **** 
 737:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 738:Core/Src/SEGGER_RTT.c **** *
 739:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_ReadUpBuffer
 740:Core/Src/SEGGER_RTT.c **** *
 741:Core/Src/SEGGER_RTT.c **** *  Function description
 742:Core/Src/SEGGER_RTT.c **** *    Reads characters from SEGGER real-time-terminal control block
 743:Core/Src/SEGGER_RTT.c **** *    which have been previously stored by the application.
 744:Core/Src/SEGGER_RTT.c **** *    Used to do the same operation that J-Link does, to transfer
 745:Core/Src/SEGGER_RTT.c **** *    RTT data via other channels, such as TCP/IP or UART.
 746:Core/Src/SEGGER_RTT.c **** *
 747:Core/Src/SEGGER_RTT.c **** *  Parameters
 748:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of Up-buffer to be used.
 749:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to buffer provided by target application, to copy characters from RTT-up-
 750:Core/Src/SEGGER_RTT.c **** *    BufferSize   Size of the target application buffer.
 751:Core/Src/SEGGER_RTT.c **** *
 752:Core/Src/SEGGER_RTT.c **** *  Return value
 753:Core/Src/SEGGER_RTT.c **** *    Number of bytes that have been read.
 754:Core/Src/SEGGER_RTT.c **** *
 755:Core/Src/SEGGER_RTT.c **** *  Additional information
 756:Core/Src/SEGGER_RTT.c **** *    This function must not be called when J-Link might also do RTT.
 757:Core/Src/SEGGER_RTT.c **** *    This function locks against all other RTT operations. I.e. during
 758:Core/Src/SEGGER_RTT.c **** *    the read operation, writing is also locked.
 759:Core/Src/SEGGER_RTT.c **** *    If only one consumer reads from the up buffer,
 760:Core/Src/SEGGER_RTT.c **** *    call sEGGER_RTT_ReadUpBufferNoLock() instead.
 761:Core/Src/SEGGER_RTT.c **** */
 762:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_ReadUpBuffer(unsigned BufferIndex, void* pBuffer, unsigned BufferSize) {
 1043              		.loc 1 762 92
 1044              		.cfi_startproc
 1045              		@ args = 0, pretend = 0, frame = 24
 1046              		@ frame_needed = 1, uses_anonymous_args = 0
 1047 0000 80B5     		push	{r7, lr}
 1048              	.LCFI36:
 1049              		.cfi_def_cfa_offset 8
 1050              		.cfi_offset 7, -8
 1051              		.cfi_offset 14, -4
 1052 0002 86B0     		sub	sp, sp, #24
 1053              	.LCFI37:
 1054              		.cfi_def_cfa_offset 32
 1055 0004 00AF     		add	r7, sp, #0
 1056              	.LCFI38:
 1057              		.cfi_def_cfa_register 7
 1058 0006 F860     		str	r0, [r7, #12]
 1059 0008 B960     		str	r1, [r7, #8]
 1060 000a 7A60     		str	r2, [r7, #4]
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 33


 1061              	.LBB4:
 763:Core/Src/SEGGER_RTT.c ****   unsigned NumBytesRead;
 764:Core/Src/SEGGER_RTT.c **** 
 765:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1062              		.loc 1 765 3
 1063              		.syntax unified
 1064              	@ 765 "Core/Src/SEGGER_RTT.c" 1
 1065 000c EFF31183 		mrs   r3, basepri  
 1066 0010 4FF02001 		mov   r1, #32       
 1067 0014 81F31188 		msr   basepri, r1  
 1068              		
 1069              	@ 0 "" 2
 1070              		.thumb
 1071              		.syntax unified
 1072 0018 7B61     		str	r3, [r7, #20]
 766:Core/Src/SEGGER_RTT.c ****   //
 767:Core/Src/SEGGER_RTT.c ****   // Call the non-locking read function
 768:Core/Src/SEGGER_RTT.c ****   //
 769:Core/Src/SEGGER_RTT.c ****   NumBytesRead = SEGGER_RTT_ReadUpBufferNoLock(BufferIndex, pBuffer, BufferSize);
 1073              		.loc 1 769 18
 1074 001a 7A68     		ldr	r2, [r7, #4]
 1075 001c B968     		ldr	r1, [r7, #8]
 1076 001e F868     		ldr	r0, [r7, #12]
 1077 0020 FFF7FEFF 		bl	SEGGER_RTT_ReadUpBufferNoLock
 1078 0024 3861     		str	r0, [r7, #16]
 770:Core/Src/SEGGER_RTT.c ****   //
 771:Core/Src/SEGGER_RTT.c ****   // Finish up.
 772:Core/Src/SEGGER_RTT.c ****   //
 773:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 1079              		.loc 1 773 3
 1080 0026 7B69     		ldr	r3, [r7, #20]
 1081              		.syntax unified
 1082              	@ 773 "Core/Src/SEGGER_RTT.c" 1
 1083 0028 83F31188 		msr   basepri, r3  
 1084              		
 1085              	@ 0 "" 2
 1086              		.thumb
 1087              		.syntax unified
 1088              	.LBE4:
 774:Core/Src/SEGGER_RTT.c ****   //
 775:Core/Src/SEGGER_RTT.c ****   return NumBytesRead;
 1089              		.loc 1 775 10
 1090 002c 3B69     		ldr	r3, [r7, #16]
 776:Core/Src/SEGGER_RTT.c **** }
 1091              		.loc 1 776 1
 1092 002e 1846     		mov	r0, r3
 1093 0030 1837     		adds	r7, r7, #24
 1094              	.LCFI39:
 1095              		.cfi_def_cfa_offset 8
 1096 0032 BD46     		mov	sp, r7
 1097              	.LCFI40:
 1098              		.cfi_def_cfa_register 13
 1099              		@ sp needed
 1100 0034 80BD     		pop	{r7, pc}
 1101              		.cfi_endproc
 1102              	.LFE7:
 1104              		.section	.text.SEGGER_RTT_Read,"ax",%progbits
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 34


 1105              		.align	1
 1106              		.global	SEGGER_RTT_Read
 1107              		.syntax unified
 1108              		.thumb
 1109              		.thumb_func
 1111              	SEGGER_RTT_Read:
 1112              	.LFB8:
 777:Core/Src/SEGGER_RTT.c **** 
 778:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 779:Core/Src/SEGGER_RTT.c **** *
 780:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_Read
 781:Core/Src/SEGGER_RTT.c **** *
 782:Core/Src/SEGGER_RTT.c **** *  Function description
 783:Core/Src/SEGGER_RTT.c **** *    Reads characters from SEGGER real-time-terminal control block
 784:Core/Src/SEGGER_RTT.c **** *    which have been previously stored by the host.
 785:Core/Src/SEGGER_RTT.c **** *
 786:Core/Src/SEGGER_RTT.c **** *  Parameters
 787:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of Down-buffer to be used (e.g. 0 for "Terminal").
 788:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to buffer provided by target application, to copy characters from RTT-dow
 789:Core/Src/SEGGER_RTT.c **** *    BufferSize   Size of the target application buffer.
 790:Core/Src/SEGGER_RTT.c **** *
 791:Core/Src/SEGGER_RTT.c **** *  Return value
 792:Core/Src/SEGGER_RTT.c **** *    Number of bytes that have been read.
 793:Core/Src/SEGGER_RTT.c **** */
 794:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_Read(unsigned BufferIndex, void* pBuffer, unsigned BufferSize) {
 1113              		.loc 1 794 84
 1114              		.cfi_startproc
 1115              		@ args = 0, pretend = 0, frame = 24
 1116              		@ frame_needed = 1, uses_anonymous_args = 0
 1117 0000 80B5     		push	{r7, lr}
 1118              	.LCFI41:
 1119              		.cfi_def_cfa_offset 8
 1120              		.cfi_offset 7, -8
 1121              		.cfi_offset 14, -4
 1122 0002 86B0     		sub	sp, sp, #24
 1123              	.LCFI42:
 1124              		.cfi_def_cfa_offset 32
 1125 0004 00AF     		add	r7, sp, #0
 1126              	.LCFI43:
 1127              		.cfi_def_cfa_register 7
 1128 0006 F860     		str	r0, [r7, #12]
 1129 0008 B960     		str	r1, [r7, #8]
 1130 000a 7A60     		str	r2, [r7, #4]
 1131              	.LBB5:
 795:Core/Src/SEGGER_RTT.c ****   unsigned NumBytesRead;
 796:Core/Src/SEGGER_RTT.c **** 
 797:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1132              		.loc 1 797 3
 1133              		.syntax unified
 1134              	@ 797 "Core/Src/SEGGER_RTT.c" 1
 1135 000c EFF31183 		mrs   r3, basepri  
 1136 0010 4FF02001 		mov   r1, #32       
 1137 0014 81F31188 		msr   basepri, r1  
 1138              		
 1139              	@ 0 "" 2
 1140              		.thumb
 1141              		.syntax unified
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 35


 1142 0018 7B61     		str	r3, [r7, #20]
 798:Core/Src/SEGGER_RTT.c ****   //
 799:Core/Src/SEGGER_RTT.c ****   // Call the non-locking read function
 800:Core/Src/SEGGER_RTT.c ****   //
 801:Core/Src/SEGGER_RTT.c ****   NumBytesRead = SEGGER_RTT_ReadNoLock(BufferIndex, pBuffer, BufferSize);
 1143              		.loc 1 801 18
 1144 001a 7A68     		ldr	r2, [r7, #4]
 1145 001c B968     		ldr	r1, [r7, #8]
 1146 001e F868     		ldr	r0, [r7, #12]
 1147 0020 FFF7FEFF 		bl	SEGGER_RTT_ReadNoLock
 1148 0024 3861     		str	r0, [r7, #16]
 802:Core/Src/SEGGER_RTT.c ****   //
 803:Core/Src/SEGGER_RTT.c ****   // Finish up.
 804:Core/Src/SEGGER_RTT.c ****   //
 805:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 1149              		.loc 1 805 3
 1150 0026 7B69     		ldr	r3, [r7, #20]
 1151              		.syntax unified
 1152              	@ 805 "Core/Src/SEGGER_RTT.c" 1
 1153 0028 83F31188 		msr   basepri, r3  
 1154              		
 1155              	@ 0 "" 2
 1156              		.thumb
 1157              		.syntax unified
 1158              	.LBE5:
 806:Core/Src/SEGGER_RTT.c ****   //
 807:Core/Src/SEGGER_RTT.c ****   return NumBytesRead;
 1159              		.loc 1 807 10
 1160 002c 3B69     		ldr	r3, [r7, #16]
 808:Core/Src/SEGGER_RTT.c **** }
 1161              		.loc 1 808 1
 1162 002e 1846     		mov	r0, r3
 1163 0030 1837     		adds	r7, r7, #24
 1164              	.LCFI44:
 1165              		.cfi_def_cfa_offset 8
 1166 0032 BD46     		mov	sp, r7
 1167              	.LCFI45:
 1168              		.cfi_def_cfa_register 13
 1169              		@ sp needed
 1170 0034 80BD     		pop	{r7, pc}
 1171              		.cfi_endproc
 1172              	.LFE8:
 1174              		.section	.text.SEGGER_RTT_WriteWithOverwriteNoLock,"ax",%progbits
 1175              		.align	1
 1176              		.global	SEGGER_RTT_WriteWithOverwriteNoLock
 1177              		.syntax unified
 1178              		.thumb
 1179              		.thumb_func
 1181              	SEGGER_RTT_WriteWithOverwriteNoLock:
 1182              	.LFB9:
 809:Core/Src/SEGGER_RTT.c **** 
 810:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 811:Core/Src/SEGGER_RTT.c **** *
 812:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_WriteWithOverwriteNoLock
 813:Core/Src/SEGGER_RTT.c **** *
 814:Core/Src/SEGGER_RTT.c **** *  Function description
 815:Core/Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 36


 816:Core/Src/SEGGER_RTT.c **** *    control block.
 817:Core/Src/SEGGER_RTT.c **** *    SEGGER_RTT_WriteWithOverwriteNoLock does not lock the application
 818:Core/Src/SEGGER_RTT.c **** *    and overwrites data if the data does not fit into the buffer.
 819:Core/Src/SEGGER_RTT.c **** *
 820:Core/Src/SEGGER_RTT.c **** *  Parameters
 821:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
 822:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 823:Core/Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 824:Core/Src/SEGGER_RTT.c **** *
 825:Core/Src/SEGGER_RTT.c **** *  Notes
 826:Core/Src/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, data is overwritten.
 827:Core/Src/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
 828:Core/Src/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
 829:Core/Src/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
 830:Core/Src/SEGGER_RTT.c **** *    (3) Do not use SEGGER_RTT_WriteWithOverwriteNoLock if a J-Link
 831:Core/Src/SEGGER_RTT.c **** *        connection reads RTT data.
 832:Core/Src/SEGGER_RTT.c **** */
 833:Core/Src/SEGGER_RTT.c **** void SEGGER_RTT_WriteWithOverwriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumByt
 1183              		.loc 1 833 104
 1184              		.cfi_startproc
 1185              		@ args = 0, pretend = 0, frame = 32
 1186              		@ frame_needed = 1, uses_anonymous_args = 0
 1187 0000 80B5     		push	{r7, lr}
 1188              	.LCFI46:
 1189              		.cfi_def_cfa_offset 8
 1190              		.cfi_offset 7, -8
 1191              		.cfi_offset 14, -4
 1192 0002 88B0     		sub	sp, sp, #32
 1193              	.LCFI47:
 1194              		.cfi_def_cfa_offset 40
 1195 0004 00AF     		add	r7, sp, #0
 1196              	.LCFI48:
 1197              		.cfi_def_cfa_register 7
 1198 0006 F860     		str	r0, [r7, #12]
 1199 0008 B960     		str	r1, [r7, #8]
 1200 000a 7A60     		str	r2, [r7, #4]
 834:Core/Src/SEGGER_RTT.c ****   const char*           pData;
 835:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 836:Core/Src/SEGGER_RTT.c ****   unsigned              Avail;
 837:Core/Src/SEGGER_RTT.c ****   volatile char*        pDst;
 838:Core/Src/SEGGER_RTT.c ****   //
 839:Core/Src/SEGGER_RTT.c ****   // Get "to-host" ring buffer and copy some elements into local variables.
 840:Core/Src/SEGGER_RTT.c ****   //
 841:Core/Src/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 1201              		.loc 1 841 9
 1202 000c BB68     		ldr	r3, [r7, #8]
 1203 000e FB61     		str	r3, [r7, #28]
 842:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OF
 1204              		.loc 1 842 9
 1205 0010 FB68     		ldr	r3, [r7, #12]
 1206 0012 5A1C     		adds	r2, r3, #1
 1207 0014 1346     		mov	r3, r2
 1208 0016 5B00     		lsls	r3, r3, #1
 1209 0018 1344     		add	r3, r3, r2
 1210 001a DB00     		lsls	r3, r3, #3
 1211 001c 404A     		ldr	r2, .L53
 1212 001e 1344     		add	r3, r3, r2
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 37


 1213 0020 7B61     		str	r3, [r7, #20]
 843:Core/Src/SEGGER_RTT.c ****   //
 844:Core/Src/SEGGER_RTT.c ****   // Check if we will overwrite data and need to adjust the RdOff.
 845:Core/Src/SEGGER_RTT.c ****   //
 846:Core/Src/SEGGER_RTT.c ****   if (pRing->WrOff == pRing->RdOff) {
 1214              		.loc 1 846 12
 1215 0022 7B69     		ldr	r3, [r7, #20]
 1216 0024 DA68     		ldr	r2, [r3, #12]
 1217              		.loc 1 846 28
 1218 0026 7B69     		ldr	r3, [r7, #20]
 1219 0028 1B69     		ldr	r3, [r3, #16]
 1220              		.loc 1 846 6
 1221 002a 9A42     		cmp	r2, r3
 1222 002c 04D1     		bne	.L44
 847:Core/Src/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - 1u;
 1223              		.loc 1 847 18
 1224 002e 7B69     		ldr	r3, [r7, #20]
 1225 0030 9B68     		ldr	r3, [r3, #8]
 1226              		.loc 1 847 11
 1227 0032 013B     		subs	r3, r3, #1
 1228 0034 BB61     		str	r3, [r7, #24]
 1229 0036 17E0     		b	.L45
 1230              	.L44:
 848:Core/Src/SEGGER_RTT.c ****   } else if ( pRing->WrOff < pRing->RdOff) {
 1231              		.loc 1 848 20
 1232 0038 7B69     		ldr	r3, [r7, #20]
 1233 003a DA68     		ldr	r2, [r3, #12]
 1234              		.loc 1 848 35
 1235 003c 7B69     		ldr	r3, [r7, #20]
 1236 003e 1B69     		ldr	r3, [r3, #16]
 1237              		.loc 1 848 13
 1238 0040 9A42     		cmp	r2, r3
 1239 0042 07D2     		bcs	.L46
 849:Core/Src/SEGGER_RTT.c ****     Avail = pRing->RdOff - pRing->WrOff - 1u;
 1240              		.loc 1 849 18
 1241 0044 7B69     		ldr	r3, [r7, #20]
 1242 0046 1A69     		ldr	r2, [r3, #16]
 1243              		.loc 1 849 33
 1244 0048 7B69     		ldr	r3, [r7, #20]
 1245 004a DB68     		ldr	r3, [r3, #12]
 1246              		.loc 1 849 26
 1247 004c D31A     		subs	r3, r2, r3
 1248              		.loc 1 849 11
 1249 004e 013B     		subs	r3, r3, #1
 1250 0050 BB61     		str	r3, [r7, #24]
 1251 0052 09E0     		b	.L45
 1252              	.L46:
 850:Core/Src/SEGGER_RTT.c ****   } else {
 851:Core/Src/SEGGER_RTT.c ****     Avail = pRing->RdOff - pRing->WrOff - 1u + pRing->SizeOfBuffer;
 1253              		.loc 1 851 18
 1254 0054 7B69     		ldr	r3, [r7, #20]
 1255 0056 1A69     		ldr	r2, [r3, #16]
 1256              		.loc 1 851 33
 1257 0058 7B69     		ldr	r3, [r7, #20]
 1258 005a DB68     		ldr	r3, [r3, #12]
 1259              		.loc 1 851 26
 1260 005c D21A     		subs	r2, r2, r3
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 38


 1261              		.loc 1 851 53
 1262 005e 7B69     		ldr	r3, [r7, #20]
 1263 0060 9B68     		ldr	r3, [r3, #8]
 1264              		.loc 1 851 46
 1265 0062 1344     		add	r3, r3, r2
 1266              		.loc 1 851 11
 1267 0064 013B     		subs	r3, r3, #1
 1268 0066 BB61     		str	r3, [r7, #24]
 1269              	.L45:
 852:Core/Src/SEGGER_RTT.c ****   }
 853:Core/Src/SEGGER_RTT.c ****   if (NumBytes > Avail) {
 1270              		.loc 1 853 6
 1271 0068 7A68     		ldr	r2, [r7, #4]
 1272 006a BB69     		ldr	r3, [r7, #24]
 1273 006c 9A42     		cmp	r2, r3
 1274 006e 15D9     		bls	.L47
 854:Core/Src/SEGGER_RTT.c ****     pRing->RdOff += (NumBytes - Avail);
 1275              		.loc 1 854 10
 1276 0070 7B69     		ldr	r3, [r7, #20]
 1277 0072 1A69     		ldr	r2, [r3, #16]
 1278              		.loc 1 854 31
 1279 0074 7968     		ldr	r1, [r7, #4]
 1280 0076 BB69     		ldr	r3, [r7, #24]
 1281 0078 CB1A     		subs	r3, r1, r3
 1282              		.loc 1 854 18
 1283 007a 1A44     		add	r2, r2, r3
 1284 007c 7B69     		ldr	r3, [r7, #20]
 1285 007e 1A61     		str	r2, [r3, #16]
 855:Core/Src/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 1286              		.loc 1 855 11
 1287 0080 06E0     		b	.L48
 1288              	.L49:
 856:Core/Src/SEGGER_RTT.c ****       pRing->RdOff -= pRing->SizeOfBuffer;
 1289              		.loc 1 856 12
 1290 0082 7B69     		ldr	r3, [r7, #20]
 1291 0084 1A69     		ldr	r2, [r3, #16]
 1292              		.loc 1 856 28
 1293 0086 7B69     		ldr	r3, [r7, #20]
 1294 0088 9B68     		ldr	r3, [r3, #8]
 1295              		.loc 1 856 20
 1296 008a D21A     		subs	r2, r2, r3
 1297 008c 7B69     		ldr	r3, [r7, #20]
 1298 008e 1A61     		str	r2, [r3, #16]
 1299              	.L48:
 855:Core/Src/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 1300              		.loc 1 855 17
 1301 0090 7B69     		ldr	r3, [r7, #20]
 1302 0092 1A69     		ldr	r2, [r3, #16]
 855:Core/Src/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 1303              		.loc 1 855 33
 1304 0094 7B69     		ldr	r3, [r7, #20]
 1305 0096 9B68     		ldr	r3, [r3, #8]
 855:Core/Src/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 1306              		.loc 1 855 25
 1307 0098 9A42     		cmp	r2, r3
 1308 009a F2D2     		bcs	.L49
 1309              	.L47:
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 39


 857:Core/Src/SEGGER_RTT.c ****     }
 858:Core/Src/SEGGER_RTT.c ****   }
 859:Core/Src/SEGGER_RTT.c ****   //
 860:Core/Src/SEGGER_RTT.c ****   // Write all data, no need to check the RdOff, but possibly handle multiple wrap-arounds
 861:Core/Src/SEGGER_RTT.c ****   //
 862:Core/Src/SEGGER_RTT.c ****   Avail = pRing->SizeOfBuffer - pRing->WrOff;
 1310              		.loc 1 862 16
 1311 009c 7B69     		ldr	r3, [r7, #20]
 1312 009e 9A68     		ldr	r2, [r3, #8]
 1313              		.loc 1 862 38
 1314 00a0 7B69     		ldr	r3, [r7, #20]
 1315 00a2 DB68     		ldr	r3, [r3, #12]
 1316              		.loc 1 862 9
 1317 00a4 D31A     		subs	r3, r2, r3
 1318 00a6 BB61     		str	r3, [r7, #24]
 1319              	.L52:
 863:Core/Src/SEGGER_RTT.c ****   do {
 864:Core/Src/SEGGER_RTT.c ****     if (Avail > NumBytes) {
 1320              		.loc 1 864 8
 1321 00a8 BA69     		ldr	r2, [r7, #24]
 1322 00aa 7B68     		ldr	r3, [r7, #4]
 1323 00ac 9A42     		cmp	r2, r3
 1324 00ae 13D9     		bls	.L50
 865:Core/Src/SEGGER_RTT.c ****       //
 866:Core/Src/SEGGER_RTT.c ****       // Last round
 867:Core/Src/SEGGER_RTT.c ****       //
 868:Core/Src/SEGGER_RTT.c ****       pDst = (pRing->pBuffer + pRing->WrOff) + SEGGER_RTT_UNCACHED_OFF;
 1325              		.loc 1 868 20
 1326 00b0 7B69     		ldr	r3, [r7, #20]
 1327 00b2 5A68     		ldr	r2, [r3, #4]
 1328              		.loc 1 868 37
 1329 00b4 7B69     		ldr	r3, [r7, #20]
 1330 00b6 DB68     		ldr	r3, [r3, #12]
 1331              		.loc 1 868 12
 1332 00b8 1344     		add	r3, r3, r2
 1333 00ba 3B61     		str	r3, [r7, #16]
 869:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 870:Core/Src/SEGGER_RTT.c ****       Avail = NumBytes;
 871:Core/Src/SEGGER_RTT.c ****       while (NumBytes--) {
 872:Core/Src/SEGGER_RTT.c ****         *pDst++ = *pData++;
 873:Core/Src/SEGGER_RTT.c ****       };
 874:Core/Src/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 875:Core/Src/SEGGER_RTT.c ****       pRing->WrOff += Avail;
 876:Core/Src/SEGGER_RTT.c **** #else
 877:Core/Src/SEGGER_RTT.c ****       SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 1334              		.loc 1 877 7
 1335 00bc 7A68     		ldr	r2, [r7, #4]
 1336 00be F969     		ldr	r1, [r7, #28]
 1337 00c0 3869     		ldr	r0, [r7, #16]
 1338 00c2 FFF7FEFF 		bl	memcpy
 878:Core/Src/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 1339              		.loc 1 878 7
 1340              		.syntax unified
 1341              	@ 878 "Core/Src/SEGGER_RTT.c" 1
 1342 00c6 BFF35F8F 		dmb
 1343              	
 1344              	@ 0 "" 2
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 40


 879:Core/Src/SEGGER_RTT.c ****       pRing->WrOff += NumBytes;
 1345              		.loc 1 879 12
 1346              		.thumb
 1347              		.syntax unified
 1348 00ca 7B69     		ldr	r3, [r7, #20]
 1349 00cc DA68     		ldr	r2, [r3, #12]
 1350              		.loc 1 879 20
 1351 00ce 7B68     		ldr	r3, [r7, #4]
 1352 00d0 1A44     		add	r2, r2, r3
 1353 00d2 7B69     		ldr	r3, [r7, #20]
 1354 00d4 DA60     		str	r2, [r3, #12]
 880:Core/Src/SEGGER_RTT.c **** #endif
 881:Core/Src/SEGGER_RTT.c ****       break;
 1355              		.loc 1 881 7
 1356 00d6 1FE0     		b	.L51
 1357              	.L50:
 882:Core/Src/SEGGER_RTT.c ****     } else {
 883:Core/Src/SEGGER_RTT.c ****       //
 884:Core/Src/SEGGER_RTT.c ****       //  Wrap-around necessary, write until wrap-around and reset WrOff
 885:Core/Src/SEGGER_RTT.c ****       //
 886:Core/Src/SEGGER_RTT.c ****       pDst = (pRing->pBuffer + pRing->WrOff) + SEGGER_RTT_UNCACHED_OFF;
 1358              		.loc 1 886 20
 1359 00d8 7B69     		ldr	r3, [r7, #20]
 1360 00da 5A68     		ldr	r2, [r3, #4]
 1361              		.loc 1 886 37
 1362 00dc 7B69     		ldr	r3, [r7, #20]
 1363 00de DB68     		ldr	r3, [r3, #12]
 1364              		.loc 1 886 12
 1365 00e0 1344     		add	r3, r3, r2
 1366 00e2 3B61     		str	r3, [r7, #16]
 887:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 888:Core/Src/SEGGER_RTT.c ****       NumBytes -= Avail;
 889:Core/Src/SEGGER_RTT.c ****       while (Avail--) {
 890:Core/Src/SEGGER_RTT.c ****         *pDst++ = *pData++;
 891:Core/Src/SEGGER_RTT.c ****       };
 892:Core/Src/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 893:Core/Src/SEGGER_RTT.c ****       pRing->WrOff = 0;
 894:Core/Src/SEGGER_RTT.c **** #else
 895:Core/Src/SEGGER_RTT.c ****       SEGGER_RTT_MEMCPY((void*)pDst, pData, Avail);
 1367              		.loc 1 895 7
 1368 00e4 BA69     		ldr	r2, [r7, #24]
 1369 00e6 F969     		ldr	r1, [r7, #28]
 1370 00e8 3869     		ldr	r0, [r7, #16]
 1371 00ea FFF7FEFF 		bl	memcpy
 896:Core/Src/SEGGER_RTT.c ****       pData += Avail;
 1372              		.loc 1 896 13
 1373 00ee FA69     		ldr	r2, [r7, #28]
 1374 00f0 BB69     		ldr	r3, [r7, #24]
 1375 00f2 1344     		add	r3, r3, r2
 1376 00f4 FB61     		str	r3, [r7, #28]
 897:Core/Src/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 1377              		.loc 1 897 7
 1378              		.syntax unified
 1379              	@ 897 "Core/Src/SEGGER_RTT.c" 1
 1380 00f6 BFF35F8F 		dmb
 1381              	
 1382              	@ 0 "" 2
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 41


 898:Core/Src/SEGGER_RTT.c ****       pRing->WrOff = 0;
 1383              		.loc 1 898 20
 1384              		.thumb
 1385              		.syntax unified
 1386 00fa 7B69     		ldr	r3, [r7, #20]
 1387 00fc 0022     		movs	r2, #0
 1388 00fe DA60     		str	r2, [r3, #12]
 899:Core/Src/SEGGER_RTT.c ****       NumBytes -= Avail;
 1389              		.loc 1 899 16
 1390 0100 7A68     		ldr	r2, [r7, #4]
 1391 0102 BB69     		ldr	r3, [r7, #24]
 1392 0104 D31A     		subs	r3, r2, r3
 1393 0106 7B60     		str	r3, [r7, #4]
 900:Core/Src/SEGGER_RTT.c **** #endif
 901:Core/Src/SEGGER_RTT.c ****       Avail = (pRing->SizeOfBuffer - 1);
 1394              		.loc 1 901 21
 1395 0108 7B69     		ldr	r3, [r7, #20]
 1396 010a 9B68     		ldr	r3, [r3, #8]
 1397              		.loc 1 901 13
 1398 010c 013B     		subs	r3, r3, #1
 1399 010e BB61     		str	r3, [r7, #24]
 902:Core/Src/SEGGER_RTT.c ****     }
 903:Core/Src/SEGGER_RTT.c ****   } while (NumBytes);
 1400              		.loc 1 903 12
 1401 0110 7B68     		ldr	r3, [r7, #4]
 1402 0112 002B     		cmp	r3, #0
 1403 0114 C8D1     		bne	.L52
 904:Core/Src/SEGGER_RTT.c **** }
 1404              		.loc 1 904 1
 1405 0116 00BF     		nop
 1406              	.L51:
 1407 0118 00BF     		nop
 1408 011a 2037     		adds	r7, r7, #32
 1409              	.LCFI49:
 1410              		.cfi_def_cfa_offset 8
 1411 011c BD46     		mov	sp, r7
 1412              	.LCFI50:
 1413              		.cfi_def_cfa_register 13
 1414              		@ sp needed
 1415 011e 80BD     		pop	{r7, pc}
 1416              	.L54:
 1417              		.align	2
 1418              	.L53:
 1419 0120 00000000 		.word	_SEGGER_RTT
 1420              		.cfi_endproc
 1421              	.LFE9:
 1423              		.section	.text.SEGGER_RTT_WriteDownBufferNoLock,"ax",%progbits
 1424              		.align	1
 1425              		.global	SEGGER_RTT_WriteDownBufferNoLock
 1426              		.syntax unified
 1427              		.thumb
 1428              		.thumb_func
 1430              	SEGGER_RTT_WriteDownBufferNoLock:
 1431              	.LFB10:
 905:Core/Src/SEGGER_RTT.c **** 
 906:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 907:Core/Src/SEGGER_RTT.c **** *
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 42


 908:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_WriteSkipNoLock
 909:Core/Src/SEGGER_RTT.c **** *
 910:Core/Src/SEGGER_RTT.c **** *  Function description
 911:Core/Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
 912:Core/Src/SEGGER_RTT.c **** *    control block which is then read by the host.
 913:Core/Src/SEGGER_RTT.c **** *    SEGGER_RTT_WriteSkipNoLock does not lock the application and
 914:Core/Src/SEGGER_RTT.c **** *    skips all data, if the data does not fit into the buffer.
 915:Core/Src/SEGGER_RTT.c **** *
 916:Core/Src/SEGGER_RTT.c **** *  Parameters
 917:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
 918:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 919:Core/Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 920:Core/Src/SEGGER_RTT.c **** *                 MUST be > 0!!!
 921:Core/Src/SEGGER_RTT.c **** *                 This is done for performance reasons, so no initial check has do be done.
 922:Core/Src/SEGGER_RTT.c **** *
 923:Core/Src/SEGGER_RTT.c **** *  Return value
 924:Core/Src/SEGGER_RTT.c **** *    1: Data has been copied
 925:Core/Src/SEGGER_RTT.c **** *    0: No space, data has not been copied
 926:Core/Src/SEGGER_RTT.c **** *
 927:Core/Src/SEGGER_RTT.c **** *  Notes
 928:Core/Src/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
 929:Core/Src/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
 930:Core/Src/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
 931:Core/Src/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
 932:Core/Src/SEGGER_RTT.c **** */
 933:Core/Src/SEGGER_RTT.c **** #if (RTT_USE_ASM == 0)
 934:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 935:Core/Src/SEGGER_RTT.c ****   const char*           pData;
 936:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 937:Core/Src/SEGGER_RTT.c ****   unsigned              Avail;
 938:Core/Src/SEGGER_RTT.c ****   unsigned              RdOff;
 939:Core/Src/SEGGER_RTT.c ****   unsigned              WrOff;
 940:Core/Src/SEGGER_RTT.c ****   unsigned              Rem;
 941:Core/Src/SEGGER_RTT.c ****   volatile char*        pDst;
 942:Core/Src/SEGGER_RTT.c ****   //
 943:Core/Src/SEGGER_RTT.c ****   // Cases:
 944:Core/Src/SEGGER_RTT.c ****   //   1) RdOff <= WrOff => Space until wrap-around is sufficient
 945:Core/Src/SEGGER_RTT.c ****   //   2) RdOff <= WrOff => Space after wrap-around needed (copy in 2 chunks)
 946:Core/Src/SEGGER_RTT.c ****   //   3) RdOff <  WrOff => No space in buf
 947:Core/Src/SEGGER_RTT.c ****   //   4) RdOff >  WrOff => Space is sufficient
 948:Core/Src/SEGGER_RTT.c ****   //   5) RdOff >  WrOff => No space in buf
 949:Core/Src/SEGGER_RTT.c ****   //
 950:Core/Src/SEGGER_RTT.c ****   // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enou
 951:Core/Src/SEGGER_RTT.c ****   //
 952:Core/Src/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 953:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OF
 954:Core/Src/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 955:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 956:Core/Src/SEGGER_RTT.c ****   pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 957:Core/Src/SEGGER_RTT.c ****   if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
 958:Core/Src/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte n
 959:Core/Src/SEGGER_RTT.c ****     if (Avail >= NumBytes) {                            // Case 1)?
 960:Core/Src/SEGGER_RTT.c ****       memcpy((void*)pDst, pData, NumBytes);
 961:Core/Src/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 962:Core/Src/SEGGER_RTT.c ****       pRing->WrOff = WrOff + NumBytes;
 963:Core/Src/SEGGER_RTT.c ****       return 1;
 964:Core/Src/SEGGER_RTT.c ****     }
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 43


 965:Core/Src/SEGGER_RTT.c ****     Avail += RdOff;                                     // Space incl. wrap-around
 966:Core/Src/SEGGER_RTT.c ****     if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does
 967:Core/Src/SEGGER_RTT.c ****       Rem = pRing->SizeOfBuffer - WrOff;                // Space until end of buffer
 968:Core/Src/SEGGER_RTT.c ****       memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
 969:Core/Src/SEGGER_RTT.c ****       NumBytes -= Rem;
 970:Core/Src/SEGGER_RTT.c ****       //
 971:Core/Src/SEGGER_RTT.c ****       // Special case: First check that assumed RdOff == 0 calculated that last element before wrap
 972:Core/Src/SEGGER_RTT.c ****       // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is
 973:Core/Src/SEGGER_RTT.c ****       // In this case, we may use a copy straight until buffer end anyway without needing to copy 2
 974:Core/Src/SEGGER_RTT.c ****       // Therefore, check if 2nd memcpy is necessary at all
 975:Core/Src/SEGGER_RTT.c ****       //
 976:Core/Src/SEGGER_RTT.c ****       if (NumBytes) {
 977:Core/Src/SEGGER_RTT.c ****         pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 978:Core/Src/SEGGER_RTT.c ****         memcpy((void*)pDst, pData + Rem, NumBytes);
 979:Core/Src/SEGGER_RTT.c ****       }
 980:Core/Src/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 981:Core/Src/SEGGER_RTT.c ****       pRing->WrOff = NumBytes;
 982:Core/Src/SEGGER_RTT.c ****       return 1;
 983:Core/Src/SEGGER_RTT.c ****     }
 984:Core/Src/SEGGER_RTT.c ****   } else {                                             // Potential case 4)
 985:Core/Src/SEGGER_RTT.c ****     Avail = RdOff - WrOff - 1u;
 986:Core/Src/SEGGER_RTT.c ****     if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does
 987:Core/Src/SEGGER_RTT.c ****       memcpy((void*)pDst, pData, NumBytes);
 988:Core/Src/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 989:Core/Src/SEGGER_RTT.c ****       pRing->WrOff = WrOff + NumBytes;
 990:Core/Src/SEGGER_RTT.c ****       return 1;
 991:Core/Src/SEGGER_RTT.c ****     }
 992:Core/Src/SEGGER_RTT.c ****   }
 993:Core/Src/SEGGER_RTT.c ****   return 0;     // No space in buffer
 994:Core/Src/SEGGER_RTT.c **** }
 995:Core/Src/SEGGER_RTT.c **** #endif
 996:Core/Src/SEGGER_RTT.c **** 
 997:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 998:Core/Src/SEGGER_RTT.c **** *
 999:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_WriteDownBufferNoLock
1000:Core/Src/SEGGER_RTT.c **** *
1001:Core/Src/SEGGER_RTT.c **** *  Function description
1002:Core/Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
1003:Core/Src/SEGGER_RTT.c **** *    control block inside a <Down> buffer.
1004:Core/Src/SEGGER_RTT.c **** *    SEGGER_RTT_WriteDownBufferNoLock does not lock the application.
1005:Core/Src/SEGGER_RTT.c **** *    Used to do the same operation that J-Link does, to transfer
1006:Core/Src/SEGGER_RTT.c **** *    RTT data from other channels, such as TCP/IP or UART.
1007:Core/Src/SEGGER_RTT.c **** *
1008:Core/Src/SEGGER_RTT.c **** *  Parameters
1009:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Down"-buffer to be used.
1010:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
1011:Core/Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
1012:Core/Src/SEGGER_RTT.c **** *
1013:Core/Src/SEGGER_RTT.c **** *  Return value
1014:Core/Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Down"-buffer.
1015:Core/Src/SEGGER_RTT.c **** *
1016:Core/Src/SEGGER_RTT.c **** *  Notes
1017:Core/Src/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1018:Core/Src/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
1019:Core/Src/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
1020:Core/Src/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
1021:Core/Src/SEGGER_RTT.c **** *
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 44


1022:Core/Src/SEGGER_RTT.c **** *  Additional information
1023:Core/Src/SEGGER_RTT.c **** *    This function must not be called when J-Link might also do RTT.
1024:Core/Src/SEGGER_RTT.c **** */
1025:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBy
 1432              		.loc 1 1025 105
 1433              		.cfi_startproc
 1434              		@ args = 0, pretend = 0, frame = 32
 1435              		@ frame_needed = 1, uses_anonymous_args = 0
 1436 0000 80B5     		push	{r7, lr}
 1437              	.LCFI51:
 1438              		.cfi_def_cfa_offset 8
 1439              		.cfi_offset 7, -8
 1440              		.cfi_offset 14, -4
 1441 0002 88B0     		sub	sp, sp, #32
 1442              	.LCFI52:
 1443              		.cfi_def_cfa_offset 40
 1444 0004 00AF     		add	r7, sp, #0
 1445              	.LCFI53:
 1446              		.cfi_def_cfa_register 7
 1447 0006 F860     		str	r0, [r7, #12]
 1448 0008 B960     		str	r1, [r7, #8]
 1449 000a 7A60     		str	r2, [r7, #4]
1026:Core/Src/SEGGER_RTT.c ****   unsigned                Status;
1027:Core/Src/SEGGER_RTT.c ****   unsigned                Avail;
1028:Core/Src/SEGGER_RTT.c ****   const char*             pData;
1029:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP*   pRing;
1030:Core/Src/SEGGER_RTT.c ****   //
1031:Core/Src/SEGGER_RTT.c ****   // Get "to-target" ring buffer.
1032:Core/Src/SEGGER_RTT.c ****   // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offs
1033:Core/Src/SEGGER_RTT.c ****   //
1034:Core/Src/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 1450              		.loc 1 1034 9
 1451 000c BB68     		ldr	r3, [r7, #8]
 1452 000e BB61     		str	r3, [r7, #24]
1035:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_
 1453              		.loc 1 1035 9
 1454 0010 FA68     		ldr	r2, [r7, #12]
 1455 0012 1346     		mov	r3, r2
 1456 0014 5B00     		lsls	r3, r3, #1
 1457 0016 1344     		add	r3, r3, r2
 1458 0018 DB00     		lsls	r3, r3, #3
 1459 001a 6033     		adds	r3, r3, #96
 1460 001c 1F4A     		ldr	r2, .L64
 1461 001e 1344     		add	r3, r3, r2
 1462 0020 7B61     		str	r3, [r7, #20]
1036:Core/Src/SEGGER_RTT.c ****   //
1037:Core/Src/SEGGER_RTT.c ****   // How we output depends upon the mode...
1038:Core/Src/SEGGER_RTT.c ****   //
1039:Core/Src/SEGGER_RTT.c ****   switch (pRing->Flags) {
 1463              		.loc 1 1039 16
 1464 0022 7B69     		ldr	r3, [r7, #20]
 1465 0024 5B69     		ldr	r3, [r3, #20]
 1466              		.loc 1 1039 3
 1467 0026 022B     		cmp	r3, #2
 1468 0028 29D0     		beq	.L56
 1469 002a 022B     		cmp	r3, #2
 1470 002c 2ED8     		bhi	.L57
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 45


 1471 002e 002B     		cmp	r3, #0
 1472 0030 02D0     		beq	.L58
 1473 0032 012B     		cmp	r3, #1
 1474 0034 13D0     		beq	.L59
 1475 0036 29E0     		b	.L57
 1476              	.L58:
1040:Core/Src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
1041:Core/Src/SEGGER_RTT.c ****     //
1042:Core/Src/SEGGER_RTT.c ****     // If we are in skip mode and there is no space for the whole
1043:Core/Src/SEGGER_RTT.c ****     // of this output, don't bother.
1044:Core/Src/SEGGER_RTT.c ****     //
1045:Core/Src/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
 1477              		.loc 1 1045 13
 1478 0038 7869     		ldr	r0, [r7, #20]
 1479 003a FFF7FEFF 		bl	_GetAvailWriteSpace
 1480 003e 3861     		str	r0, [r7, #16]
1046:Core/Src/SEGGER_RTT.c ****     if (Avail < NumBytes) {
 1481              		.loc 1 1046 8
 1482 0040 3A69     		ldr	r2, [r7, #16]
 1483 0042 7B68     		ldr	r3, [r7, #4]
 1484 0044 9A42     		cmp	r2, r3
 1485 0046 02D2     		bcs	.L60
1047:Core/Src/SEGGER_RTT.c ****       Status = 0u;
 1486              		.loc 1 1047 14
 1487 0048 0023     		movs	r3, #0
 1488 004a FB61     		str	r3, [r7, #28]
1048:Core/Src/SEGGER_RTT.c ****     } else {
1049:Core/Src/SEGGER_RTT.c ****       Status = NumBytes;
1050:Core/Src/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
1051:Core/Src/SEGGER_RTT.c ****     }
1052:Core/Src/SEGGER_RTT.c ****     break;
 1489              		.loc 1 1052 5
 1490 004c 21E0     		b	.L62
 1491              	.L60:
1049:Core/Src/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
 1492              		.loc 1 1049 14
 1493 004e 7B68     		ldr	r3, [r7, #4]
 1494 0050 FB61     		str	r3, [r7, #28]
1050:Core/Src/SEGGER_RTT.c ****     }
 1495              		.loc 1 1050 7
 1496 0052 7A68     		ldr	r2, [r7, #4]
 1497 0054 B969     		ldr	r1, [r7, #24]
 1498 0056 7869     		ldr	r0, [r7, #20]
 1499 0058 FFF7FEFF 		bl	_WriteNoCheck
 1500              		.loc 1 1052 5
 1501 005c 19E0     		b	.L62
 1502              	.L59:
1053:Core/Src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
1054:Core/Src/SEGGER_RTT.c ****     //
1055:Core/Src/SEGGER_RTT.c ****     // If we are in trim mode, trim to what we can output without blocking.
1056:Core/Src/SEGGER_RTT.c ****     //
1057:Core/Src/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
 1503              		.loc 1 1057 13
 1504 005e 7869     		ldr	r0, [r7, #20]
 1505 0060 FFF7FEFF 		bl	_GetAvailWriteSpace
 1506 0064 3861     		str	r0, [r7, #16]
1058:Core/Src/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 46


 1507              		.loc 1 1058 12
 1508 0066 7A68     		ldr	r2, [r7, #4]
 1509 0068 3B69     		ldr	r3, [r7, #16]
 1510 006a 9342     		cmp	r3, r2
 1511 006c 28BF     		it	cs
 1512 006e 1346     		movcs	r3, r2
 1513 0070 FB61     		str	r3, [r7, #28]
1059:Core/Src/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
 1514              		.loc 1 1059 5
 1515 0072 FA69     		ldr	r2, [r7, #28]
 1516 0074 B969     		ldr	r1, [r7, #24]
 1517 0076 7869     		ldr	r0, [r7, #20]
 1518 0078 FFF7FEFF 		bl	_WriteNoCheck
1060:Core/Src/SEGGER_RTT.c ****     break;
 1519              		.loc 1 1060 5
 1520 007c 09E0     		b	.L62
 1521              	.L56:
1061:Core/Src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
1062:Core/Src/SEGGER_RTT.c ****     //
1063:Core/Src/SEGGER_RTT.c ****     // If we are in blocking mode, output everything.
1064:Core/Src/SEGGER_RTT.c ****     //
1065:Core/Src/SEGGER_RTT.c ****     Status = _WriteBlocking(pRing, pData, NumBytes);
 1522              		.loc 1 1065 14
 1523 007e 7A68     		ldr	r2, [r7, #4]
 1524 0080 B969     		ldr	r1, [r7, #24]
 1525 0082 7869     		ldr	r0, [r7, #20]
 1526 0084 FFF7FEFF 		bl	_WriteBlocking
 1527 0088 F861     		str	r0, [r7, #28]
1066:Core/Src/SEGGER_RTT.c ****     break;
 1528              		.loc 1 1066 5
 1529 008a 02E0     		b	.L62
 1530              	.L57:
1067:Core/Src/SEGGER_RTT.c ****   default:
1068:Core/Src/SEGGER_RTT.c ****     Status = 0u;
 1531              		.loc 1 1068 12
 1532 008c 0023     		movs	r3, #0
 1533 008e FB61     		str	r3, [r7, #28]
1069:Core/Src/SEGGER_RTT.c ****     break;
 1534              		.loc 1 1069 5
 1535 0090 00BF     		nop
 1536              	.L62:
1070:Core/Src/SEGGER_RTT.c ****   }
1071:Core/Src/SEGGER_RTT.c ****   //
1072:Core/Src/SEGGER_RTT.c ****   // Finish up.
1073:Core/Src/SEGGER_RTT.c ****   //
1074:Core/Src/SEGGER_RTT.c ****   return Status;
 1537              		.loc 1 1074 10
 1538 0092 FB69     		ldr	r3, [r7, #28]
1075:Core/Src/SEGGER_RTT.c **** }
 1539              		.loc 1 1075 1
 1540 0094 1846     		mov	r0, r3
 1541 0096 2037     		adds	r7, r7, #32
 1542              	.LCFI54:
 1543              		.cfi_def_cfa_offset 8
 1544 0098 BD46     		mov	sp, r7
 1545              	.LCFI55:
 1546              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 47


 1547              		@ sp needed
 1548 009a 80BD     		pop	{r7, pc}
 1549              	.L65:
 1550              		.align	2
 1551              	.L64:
 1552 009c 00000000 		.word	_SEGGER_RTT
 1553              		.cfi_endproc
 1554              	.LFE10:
 1556              		.section	.text.SEGGER_RTT_WriteNoLock,"ax",%progbits
 1557              		.align	1
 1558              		.global	SEGGER_RTT_WriteNoLock
 1559              		.syntax unified
 1560              		.thumb
 1561              		.thumb_func
 1563              	SEGGER_RTT_WriteNoLock:
 1564              	.LFB11:
1076:Core/Src/SEGGER_RTT.c **** 
1077:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1078:Core/Src/SEGGER_RTT.c **** *
1079:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_WriteNoLock
1080:Core/Src/SEGGER_RTT.c **** *
1081:Core/Src/SEGGER_RTT.c **** *  Function description
1082:Core/Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
1083:Core/Src/SEGGER_RTT.c **** *    control block which is then read by the host.
1084:Core/Src/SEGGER_RTT.c **** *    SEGGER_RTT_WriteNoLock does not lock the application.
1085:Core/Src/SEGGER_RTT.c **** *
1086:Core/Src/SEGGER_RTT.c **** *  Parameters
1087:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1088:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
1089:Core/Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
1090:Core/Src/SEGGER_RTT.c **** *
1091:Core/Src/SEGGER_RTT.c **** *  Return value
1092:Core/Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1093:Core/Src/SEGGER_RTT.c **** *
1094:Core/Src/SEGGER_RTT.c **** *  Notes
1095:Core/Src/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1096:Core/Src/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
1097:Core/Src/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
1098:Core/Src/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
1099:Core/Src/SEGGER_RTT.c **** */
1100:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 1565              		.loc 1 1100 95
 1566              		.cfi_startproc
 1567              		@ args = 0, pretend = 0, frame = 32
 1568              		@ frame_needed = 1, uses_anonymous_args = 0
 1569 0000 80B5     		push	{r7, lr}
 1570              	.LCFI56:
 1571              		.cfi_def_cfa_offset 8
 1572              		.cfi_offset 7, -8
 1573              		.cfi_offset 14, -4
 1574 0002 88B0     		sub	sp, sp, #32
 1575              	.LCFI57:
 1576              		.cfi_def_cfa_offset 40
 1577 0004 00AF     		add	r7, sp, #0
 1578              	.LCFI58:
 1579              		.cfi_def_cfa_register 7
 1580 0006 F860     		str	r0, [r7, #12]
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 48


 1581 0008 B960     		str	r1, [r7, #8]
 1582 000a 7A60     		str	r2, [r7, #4]
1101:Core/Src/SEGGER_RTT.c ****   unsigned              Status;
1102:Core/Src/SEGGER_RTT.c ****   unsigned              Avail;
1103:Core/Src/SEGGER_RTT.c ****   const char*           pData;
1104:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
1105:Core/Src/SEGGER_RTT.c ****   //
1106:Core/Src/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
1107:Core/Src/SEGGER_RTT.c ****   //
1108:Core/Src/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 1583              		.loc 1 1108 9
 1584 000c BB68     		ldr	r3, [r7, #8]
 1585 000e BB61     		str	r3, [r7, #24]
1109:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OF
 1586              		.loc 1 1109 9
 1587 0010 FB68     		ldr	r3, [r7, #12]
 1588 0012 5A1C     		adds	r2, r3, #1
 1589 0014 1346     		mov	r3, r2
 1590 0016 5B00     		lsls	r3, r3, #1
 1591 0018 1344     		add	r3, r3, r2
 1592 001a DB00     		lsls	r3, r3, #3
 1593 001c 1F4A     		ldr	r2, .L75
 1594 001e 1344     		add	r3, r3, r2
 1595 0020 7B61     		str	r3, [r7, #20]
1110:Core/Src/SEGGER_RTT.c ****   //
1111:Core/Src/SEGGER_RTT.c ****   // How we output depends upon the mode...
1112:Core/Src/SEGGER_RTT.c ****   //
1113:Core/Src/SEGGER_RTT.c ****   switch (pRing->Flags) {
 1596              		.loc 1 1113 16
 1597 0022 7B69     		ldr	r3, [r7, #20]
 1598 0024 5B69     		ldr	r3, [r3, #20]
 1599              		.loc 1 1113 3
 1600 0026 022B     		cmp	r3, #2
 1601 0028 29D0     		beq	.L67
 1602 002a 022B     		cmp	r3, #2
 1603 002c 2ED8     		bhi	.L68
 1604 002e 002B     		cmp	r3, #0
 1605 0030 02D0     		beq	.L69
 1606 0032 012B     		cmp	r3, #1
 1607 0034 13D0     		beq	.L70
 1608 0036 29E0     		b	.L68
 1609              	.L69:
1114:Core/Src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
1115:Core/Src/SEGGER_RTT.c ****     //
1116:Core/Src/SEGGER_RTT.c ****     // If we are in skip mode and there is no space for the whole
1117:Core/Src/SEGGER_RTT.c ****     // of this output, don't bother.
1118:Core/Src/SEGGER_RTT.c ****     //
1119:Core/Src/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
 1610              		.loc 1 1119 13
 1611 0038 7869     		ldr	r0, [r7, #20]
 1612 003a FFF7FEFF 		bl	_GetAvailWriteSpace
 1613 003e 3861     		str	r0, [r7, #16]
1120:Core/Src/SEGGER_RTT.c ****     if (Avail < NumBytes) {
 1614              		.loc 1 1120 8
 1615 0040 3A69     		ldr	r2, [r7, #16]
 1616 0042 7B68     		ldr	r3, [r7, #4]
 1617 0044 9A42     		cmp	r2, r3
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 49


 1618 0046 02D2     		bcs	.L71
1121:Core/Src/SEGGER_RTT.c ****       Status = 0u;
 1619              		.loc 1 1121 14
 1620 0048 0023     		movs	r3, #0
 1621 004a FB61     		str	r3, [r7, #28]
1122:Core/Src/SEGGER_RTT.c ****     } else {
1123:Core/Src/SEGGER_RTT.c ****       Status = NumBytes;
1124:Core/Src/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
1125:Core/Src/SEGGER_RTT.c ****     }
1126:Core/Src/SEGGER_RTT.c ****     break;
 1622              		.loc 1 1126 5
 1623 004c 21E0     		b	.L73
 1624              	.L71:
1123:Core/Src/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
 1625              		.loc 1 1123 14
 1626 004e 7B68     		ldr	r3, [r7, #4]
 1627 0050 FB61     		str	r3, [r7, #28]
1124:Core/Src/SEGGER_RTT.c ****     }
 1628              		.loc 1 1124 7
 1629 0052 7A68     		ldr	r2, [r7, #4]
 1630 0054 B969     		ldr	r1, [r7, #24]
 1631 0056 7869     		ldr	r0, [r7, #20]
 1632 0058 FFF7FEFF 		bl	_WriteNoCheck
 1633              		.loc 1 1126 5
 1634 005c 19E0     		b	.L73
 1635              	.L70:
1127:Core/Src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
1128:Core/Src/SEGGER_RTT.c ****     //
1129:Core/Src/SEGGER_RTT.c ****     // If we are in trim mode, trim to what we can output without blocking.
1130:Core/Src/SEGGER_RTT.c ****     //
1131:Core/Src/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
 1636              		.loc 1 1131 13
 1637 005e 7869     		ldr	r0, [r7, #20]
 1638 0060 FFF7FEFF 		bl	_GetAvailWriteSpace
 1639 0064 3861     		str	r0, [r7, #16]
1132:Core/Src/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
 1640              		.loc 1 1132 12
 1641 0066 7A68     		ldr	r2, [r7, #4]
 1642 0068 3B69     		ldr	r3, [r7, #16]
 1643 006a 9342     		cmp	r3, r2
 1644 006c 28BF     		it	cs
 1645 006e 1346     		movcs	r3, r2
 1646 0070 FB61     		str	r3, [r7, #28]
1133:Core/Src/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
 1647              		.loc 1 1133 5
 1648 0072 FA69     		ldr	r2, [r7, #28]
 1649 0074 B969     		ldr	r1, [r7, #24]
 1650 0076 7869     		ldr	r0, [r7, #20]
 1651 0078 FFF7FEFF 		bl	_WriteNoCheck
1134:Core/Src/SEGGER_RTT.c ****     break;
 1652              		.loc 1 1134 5
 1653 007c 09E0     		b	.L73
 1654              	.L67:
1135:Core/Src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
1136:Core/Src/SEGGER_RTT.c ****     //
1137:Core/Src/SEGGER_RTT.c ****     // If we are in blocking mode, output everything.
1138:Core/Src/SEGGER_RTT.c ****     //
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 50


1139:Core/Src/SEGGER_RTT.c ****     Status = _WriteBlocking(pRing, pData, NumBytes);
 1655              		.loc 1 1139 14
 1656 007e 7A68     		ldr	r2, [r7, #4]
 1657 0080 B969     		ldr	r1, [r7, #24]
 1658 0082 7869     		ldr	r0, [r7, #20]
 1659 0084 FFF7FEFF 		bl	_WriteBlocking
 1660 0088 F861     		str	r0, [r7, #28]
1140:Core/Src/SEGGER_RTT.c ****     break;
 1661              		.loc 1 1140 5
 1662 008a 02E0     		b	.L73
 1663              	.L68:
1141:Core/Src/SEGGER_RTT.c ****   default:
1142:Core/Src/SEGGER_RTT.c ****     Status = 0u;
 1664              		.loc 1 1142 12
 1665 008c 0023     		movs	r3, #0
 1666 008e FB61     		str	r3, [r7, #28]
1143:Core/Src/SEGGER_RTT.c ****     break;
 1667              		.loc 1 1143 5
 1668 0090 00BF     		nop
 1669              	.L73:
1144:Core/Src/SEGGER_RTT.c ****   }
1145:Core/Src/SEGGER_RTT.c ****   //
1146:Core/Src/SEGGER_RTT.c ****   // Finish up.
1147:Core/Src/SEGGER_RTT.c ****   //
1148:Core/Src/SEGGER_RTT.c ****   return Status;
 1670              		.loc 1 1148 10
 1671 0092 FB69     		ldr	r3, [r7, #28]
1149:Core/Src/SEGGER_RTT.c **** }
 1672              		.loc 1 1149 1
 1673 0094 1846     		mov	r0, r3
 1674 0096 2037     		adds	r7, r7, #32
 1675              	.LCFI59:
 1676              		.cfi_def_cfa_offset 8
 1677 0098 BD46     		mov	sp, r7
 1678              	.LCFI60:
 1679              		.cfi_def_cfa_register 13
 1680              		@ sp needed
 1681 009a 80BD     		pop	{r7, pc}
 1682              	.L76:
 1683              		.align	2
 1684              	.L75:
 1685 009c 00000000 		.word	_SEGGER_RTT
 1686              		.cfi_endproc
 1687              	.LFE11:
 1689              		.section	.text.SEGGER_RTT_WriteDownBuffer,"ax",%progbits
 1690              		.align	1
 1691              		.global	SEGGER_RTT_WriteDownBuffer
 1692              		.syntax unified
 1693              		.thumb
 1694              		.thumb_func
 1696              	SEGGER_RTT_WriteDownBuffer:
 1697              	.LFB12:
1150:Core/Src/SEGGER_RTT.c **** 
1151:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1152:Core/Src/SEGGER_RTT.c **** *
1153:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_WriteDownBuffer
1154:Core/Src/SEGGER_RTT.c **** *
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 51


1155:Core/Src/SEGGER_RTT.c **** *  Function description
1156:Core/Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT control block in a <Down> buffer.
1157:Core/Src/SEGGER_RTT.c **** *
1158:Core/Src/SEGGER_RTT.c **** *  Parameters
1159:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1160:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
1161:Core/Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
1162:Core/Src/SEGGER_RTT.c **** *
1163:Core/Src/SEGGER_RTT.c **** *  Return value
1164:Core/Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Down"-buffer.
1165:Core/Src/SEGGER_RTT.c **** *
1166:Core/Src/SEGGER_RTT.c **** *  Notes
1167:Core/Src/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1168:Core/Src/SEGGER_RTT.c **** *
1169:Core/Src/SEGGER_RTT.c **** *  Additional information
1170:Core/Src/SEGGER_RTT.c **** *    This function must not be called when J-Link might also do RTT.
1171:Core/Src/SEGGER_RTT.c **** *    This function locks against all other RTT operations. I.e. during
1172:Core/Src/SEGGER_RTT.c **** *    the write operation, writing from the application is also locked.
1173:Core/Src/SEGGER_RTT.c **** *    If only one consumer writes to the down buffer,
1174:Core/Src/SEGGER_RTT.c **** *    call SEGGER_RTT_WriteDownBufferNoLock() instead.
1175:Core/Src/SEGGER_RTT.c **** */
1176:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 1698              		.loc 1 1176 99
 1699              		.cfi_startproc
 1700              		@ args = 0, pretend = 0, frame = 32
 1701              		@ frame_needed = 1, uses_anonymous_args = 0
 1702 0000 80B5     		push	{r7, lr}
 1703              	.LCFI61:
 1704              		.cfi_def_cfa_offset 8
 1705              		.cfi_offset 7, -8
 1706              		.cfi_offset 14, -4
 1707 0002 88B0     		sub	sp, sp, #32
 1708              	.LCFI62:
 1709              		.cfi_def_cfa_offset 40
 1710 0004 00AF     		add	r7, sp, #0
 1711              	.LCFI63:
 1712              		.cfi_def_cfa_register 7
 1713 0006 F860     		str	r0, [r7, #12]
 1714 0008 B960     		str	r1, [r7, #8]
 1715 000a 7A60     		str	r2, [r7, #4]
 1716              	.LBB6:
1177:Core/Src/SEGGER_RTT.c ****   unsigned Status;
1178:Core/Src/SEGGER_RTT.c **** 
1179:Core/Src/SEGGER_RTT.c ****   INIT();
 1717              		.loc 1 1179 3
 1718 000c 0E4B     		ldr	r3, .L80
 1719 000e FB61     		str	r3, [r7, #28]
 1720 0010 FB69     		ldr	r3, [r7, #28]
 1721 0012 1B78     		ldrb	r3, [r3]
 1722 0014 DBB2     		uxtb	r3, r3
 1723 0016 532B     		cmp	r3, #83
 1724 0018 01D0     		beq	.L78
 1725              		.loc 1 1179 3 is_stmt 0 discriminator 1
 1726 001a FFF7FEFF 		bl	_DoInit
 1727              	.L78:
 1728              	.LBE6:
 1729              	.LBB7:
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 52


1180:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1730              		.loc 1 1180 3 is_stmt 1
 1731              		.syntax unified
 1732              	@ 1180 "Core/Src/SEGGER_RTT.c" 1
 1733 001e EFF31183 		mrs   r3, basepri  
 1734 0022 4FF02001 		mov   r1, #32       
 1735 0026 81F31188 		msr   basepri, r1  
 1736              		
 1737              	@ 0 "" 2
 1738              		.thumb
 1739              		.syntax unified
 1740 002a BB61     		str	r3, [r7, #24]
1181:Core/Src/SEGGER_RTT.c ****   Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locki
 1741              		.loc 1 1181 12
 1742 002c 7A68     		ldr	r2, [r7, #4]
 1743 002e B968     		ldr	r1, [r7, #8]
 1744 0030 F868     		ldr	r0, [r7, #12]
 1745 0032 FFF7FEFF 		bl	SEGGER_RTT_WriteDownBufferNoLock
 1746 0036 7861     		str	r0, [r7, #20]
1182:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 1747              		.loc 1 1182 3
 1748 0038 BB69     		ldr	r3, [r7, #24]
 1749              		.syntax unified
 1750              	@ 1182 "Core/Src/SEGGER_RTT.c" 1
 1751 003a 83F31188 		msr   basepri, r3  
 1752              		
 1753              	@ 0 "" 2
 1754              		.thumb
 1755              		.syntax unified
 1756              	.LBE7:
1183:Core/Src/SEGGER_RTT.c ****   return Status;
 1757              		.loc 1 1183 10
 1758 003e 7B69     		ldr	r3, [r7, #20]
1184:Core/Src/SEGGER_RTT.c **** }
 1759              		.loc 1 1184 1
 1760 0040 1846     		mov	r0, r3
 1761 0042 2037     		adds	r7, r7, #32
 1762              	.LCFI64:
 1763              		.cfi_def_cfa_offset 8
 1764 0044 BD46     		mov	sp, r7
 1765              	.LCFI65:
 1766              		.cfi_def_cfa_register 13
 1767              		@ sp needed
 1768 0046 80BD     		pop	{r7, pc}
 1769              	.L81:
 1770              		.align	2
 1771              	.L80:
 1772 0048 00000000 		.word	_SEGGER_RTT
 1773              		.cfi_endproc
 1774              	.LFE12:
 1776              		.section	.text.SEGGER_RTT_Write,"ax",%progbits
 1777              		.align	1
 1778              		.global	SEGGER_RTT_Write
 1779              		.syntax unified
 1780              		.thumb
 1781              		.thumb_func
 1783              	SEGGER_RTT_Write:
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 53


 1784              	.LFB13:
1185:Core/Src/SEGGER_RTT.c **** 
1186:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1187:Core/Src/SEGGER_RTT.c **** *
1188:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_Write
1189:Core/Src/SEGGER_RTT.c **** *
1190:Core/Src/SEGGER_RTT.c **** *  Function description
1191:Core/Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
1192:Core/Src/SEGGER_RTT.c **** *    control block which is then read by the host.
1193:Core/Src/SEGGER_RTT.c **** *
1194:Core/Src/SEGGER_RTT.c **** *  Parameters
1195:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1196:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
1197:Core/Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
1198:Core/Src/SEGGER_RTT.c **** *
1199:Core/Src/SEGGER_RTT.c **** *  Return value
1200:Core/Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1201:Core/Src/SEGGER_RTT.c **** *
1202:Core/Src/SEGGER_RTT.c **** *  Notes
1203:Core/Src/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1204:Core/Src/SEGGER_RTT.c **** */
1205:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 1785              		.loc 1 1205 89
 1786              		.cfi_startproc
 1787              		@ args = 0, pretend = 0, frame = 32
 1788              		@ frame_needed = 1, uses_anonymous_args = 0
 1789 0000 80B5     		push	{r7, lr}
 1790              	.LCFI66:
 1791              		.cfi_def_cfa_offset 8
 1792              		.cfi_offset 7, -8
 1793              		.cfi_offset 14, -4
 1794 0002 88B0     		sub	sp, sp, #32
 1795              	.LCFI67:
 1796              		.cfi_def_cfa_offset 40
 1797 0004 00AF     		add	r7, sp, #0
 1798              	.LCFI68:
 1799              		.cfi_def_cfa_register 7
 1800 0006 F860     		str	r0, [r7, #12]
 1801 0008 B960     		str	r1, [r7, #8]
 1802 000a 7A60     		str	r2, [r7, #4]
 1803              	.LBB8:
1206:Core/Src/SEGGER_RTT.c ****   unsigned Status;
1207:Core/Src/SEGGER_RTT.c **** 
1208:Core/Src/SEGGER_RTT.c ****   INIT();
 1804              		.loc 1 1208 3
 1805 000c 0E4B     		ldr	r3, .L85
 1806 000e FB61     		str	r3, [r7, #28]
 1807 0010 FB69     		ldr	r3, [r7, #28]
 1808 0012 1B78     		ldrb	r3, [r3]
 1809 0014 DBB2     		uxtb	r3, r3
 1810 0016 532B     		cmp	r3, #83
 1811 0018 01D0     		beq	.L83
 1812              		.loc 1 1208 3 is_stmt 0 discriminator 1
 1813 001a FFF7FEFF 		bl	_DoInit
 1814              	.L83:
 1815              	.LBE8:
 1816              	.LBB9:
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 54


1209:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1817              		.loc 1 1209 3 is_stmt 1
 1818              		.syntax unified
 1819              	@ 1209 "Core/Src/SEGGER_RTT.c" 1
 1820 001e EFF31183 		mrs   r3, basepri  
 1821 0022 4FF02001 		mov   r1, #32       
 1822 0026 81F31188 		msr   basepri, r1  
 1823              		
 1824              	@ 0 "" 2
 1825              		.thumb
 1826              		.syntax unified
 1827 002a BB61     		str	r3, [r7, #24]
1210:Core/Src/SEGGER_RTT.c ****   Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write f
 1828              		.loc 1 1210 12
 1829 002c 7A68     		ldr	r2, [r7, #4]
 1830 002e B968     		ldr	r1, [r7, #8]
 1831 0030 F868     		ldr	r0, [r7, #12]
 1832 0032 FFF7FEFF 		bl	SEGGER_RTT_WriteNoLock
 1833 0036 7861     		str	r0, [r7, #20]
1211:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 1834              		.loc 1 1211 3
 1835 0038 BB69     		ldr	r3, [r7, #24]
 1836              		.syntax unified
 1837              	@ 1211 "Core/Src/SEGGER_RTT.c" 1
 1838 003a 83F31188 		msr   basepri, r3  
 1839              		
 1840              	@ 0 "" 2
 1841              		.thumb
 1842              		.syntax unified
 1843              	.LBE9:
1212:Core/Src/SEGGER_RTT.c ****   return Status;
 1844              		.loc 1 1212 10
 1845 003e 7B69     		ldr	r3, [r7, #20]
1213:Core/Src/SEGGER_RTT.c **** }
 1846              		.loc 1 1213 1
 1847 0040 1846     		mov	r0, r3
 1848 0042 2037     		adds	r7, r7, #32
 1849              	.LCFI69:
 1850              		.cfi_def_cfa_offset 8
 1851 0044 BD46     		mov	sp, r7
 1852              	.LCFI70:
 1853              		.cfi_def_cfa_register 13
 1854              		@ sp needed
 1855 0046 80BD     		pop	{r7, pc}
 1856              	.L86:
 1857              		.align	2
 1858              	.L85:
 1859 0048 00000000 		.word	_SEGGER_RTT
 1860              		.cfi_endproc
 1861              	.LFE13:
 1863              		.section	.text.SEGGER_RTT_WriteString,"ax",%progbits
 1864              		.align	1
 1865              		.global	SEGGER_RTT_WriteString
 1866              		.syntax unified
 1867              		.thumb
 1868              		.thumb_func
 1870              	SEGGER_RTT_WriteString:
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 55


 1871              	.LFB14:
1214:Core/Src/SEGGER_RTT.c **** 
1215:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1216:Core/Src/SEGGER_RTT.c **** *
1217:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_WriteString
1218:Core/Src/SEGGER_RTT.c **** *
1219:Core/Src/SEGGER_RTT.c **** *  Function description
1220:Core/Src/SEGGER_RTT.c **** *    Stores string in SEGGER RTT control block.
1221:Core/Src/SEGGER_RTT.c **** *    This data is read by the host.
1222:Core/Src/SEGGER_RTT.c **** *
1223:Core/Src/SEGGER_RTT.c **** *  Parameters
1224:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1225:Core/Src/SEGGER_RTT.c **** *    s            Pointer to string.
1226:Core/Src/SEGGER_RTT.c **** *
1227:Core/Src/SEGGER_RTT.c **** *  Return value
1228:Core/Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1229:Core/Src/SEGGER_RTT.c **** *
1230:Core/Src/SEGGER_RTT.c **** *  Notes
1231:Core/Src/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1232:Core/Src/SEGGER_RTT.c **** *    (2) String passed to this function has to be \0 terminated
1233:Core/Src/SEGGER_RTT.c **** *    (3) \0 termination character is *not* stored in RTT buffer
1234:Core/Src/SEGGER_RTT.c **** */
1235:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteString(unsigned BufferIndex, const char* s) {
 1872              		.loc 1 1235 70
 1873              		.cfi_startproc
 1874              		@ args = 0, pretend = 0, frame = 16
 1875              		@ frame_needed = 1, uses_anonymous_args = 0
 1876 0000 80B5     		push	{r7, lr}
 1877              	.LCFI71:
 1878              		.cfi_def_cfa_offset 8
 1879              		.cfi_offset 7, -8
 1880              		.cfi_offset 14, -4
 1881 0002 84B0     		sub	sp, sp, #16
 1882              	.LCFI72:
 1883              		.cfi_def_cfa_offset 24
 1884 0004 00AF     		add	r7, sp, #0
 1885              	.LCFI73:
 1886              		.cfi_def_cfa_register 7
 1887 0006 7860     		str	r0, [r7, #4]
 1888 0008 3960     		str	r1, [r7]
1236:Core/Src/SEGGER_RTT.c ****   unsigned Len;
1237:Core/Src/SEGGER_RTT.c **** 
1238:Core/Src/SEGGER_RTT.c ****   Len = STRLEN(s);
 1889              		.loc 1 1238 9
 1890 000a 3868     		ldr	r0, [r7]
 1891 000c FFF7FEFF 		bl	strlen
 1892 0010 F860     		str	r0, [r7, #12]
1239:Core/Src/SEGGER_RTT.c ****   return SEGGER_RTT_Write(BufferIndex, s, Len);
 1893              		.loc 1 1239 10
 1894 0012 FA68     		ldr	r2, [r7, #12]
 1895 0014 3968     		ldr	r1, [r7]
 1896 0016 7868     		ldr	r0, [r7, #4]
 1897 0018 FFF7FEFF 		bl	SEGGER_RTT_Write
 1898 001c 0346     		mov	r3, r0
1240:Core/Src/SEGGER_RTT.c **** }
 1899              		.loc 1 1240 1
 1900 001e 1846     		mov	r0, r3
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 56


 1901 0020 1037     		adds	r7, r7, #16
 1902              	.LCFI74:
 1903              		.cfi_def_cfa_offset 8
 1904 0022 BD46     		mov	sp, r7
 1905              	.LCFI75:
 1906              		.cfi_def_cfa_register 13
 1907              		@ sp needed
 1908 0024 80BD     		pop	{r7, pc}
 1909              		.cfi_endproc
 1910              	.LFE14:
 1912              		.section	.text.SEGGER_RTT_PutCharSkipNoLock,"ax",%progbits
 1913              		.align	1
 1914              		.global	SEGGER_RTT_PutCharSkipNoLock
 1915              		.syntax unified
 1916              		.thumb
 1917              		.thumb_func
 1919              	SEGGER_RTT_PutCharSkipNoLock:
 1920              	.LFB15:
1241:Core/Src/SEGGER_RTT.c **** 
1242:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1243:Core/Src/SEGGER_RTT.c **** *
1244:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_PutCharSkipNoLock
1245:Core/Src/SEGGER_RTT.c **** *
1246:Core/Src/SEGGER_RTT.c **** *  Function description
1247:Core/Src/SEGGER_RTT.c **** *    Stores a single character/byte in SEGGER RTT buffer.
1248:Core/Src/SEGGER_RTT.c **** *    SEGGER_RTT_PutCharSkipNoLock does not lock the application and
1249:Core/Src/SEGGER_RTT.c **** *    skips the byte, if it does not fit into the buffer.
1250:Core/Src/SEGGER_RTT.c **** *
1251:Core/Src/SEGGER_RTT.c **** *  Parameters
1252:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1253:Core/Src/SEGGER_RTT.c **** *    c            Byte to be stored.
1254:Core/Src/SEGGER_RTT.c **** *
1255:Core/Src/SEGGER_RTT.c **** *  Return value
1256:Core/Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1257:Core/Src/SEGGER_RTT.c **** *
1258:Core/Src/SEGGER_RTT.c **** *  Notes
1259:Core/Src/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, the character is dropped.
1260:Core/Src/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
1261:Core/Src/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
1262:Core/Src/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
1263:Core/Src/SEGGER_RTT.c **** */
1264:Core/Src/SEGGER_RTT.c **** 
1265:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_PutCharSkipNoLock(unsigned BufferIndex, char c) {
 1921              		.loc 1 1265 69
 1922              		.cfi_startproc
 1923              		@ args = 0, pretend = 0, frame = 24
 1924              		@ frame_needed = 1, uses_anonymous_args = 0
 1925              		@ link register save eliminated.
 1926 0000 80B4     		push	{r7}
 1927              	.LCFI76:
 1928              		.cfi_def_cfa_offset 4
 1929              		.cfi_offset 7, -4
 1930 0002 87B0     		sub	sp, sp, #28
 1931              	.LCFI77:
 1932              		.cfi_def_cfa_offset 32
 1933 0004 00AF     		add	r7, sp, #0
 1934              	.LCFI78:
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 57


 1935              		.cfi_def_cfa_register 7
 1936 0006 7860     		str	r0, [r7, #4]
 1937 0008 0B46     		mov	r3, r1
 1938 000a FB70     		strb	r3, [r7, #3]
1266:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
1267:Core/Src/SEGGER_RTT.c ****   unsigned              WrOff;
1268:Core/Src/SEGGER_RTT.c ****   unsigned              Status;
1269:Core/Src/SEGGER_RTT.c ****   volatile char*        pDst;
1270:Core/Src/SEGGER_RTT.c ****   //
1271:Core/Src/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
1272:Core/Src/SEGGER_RTT.c ****   //
1273:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OF
 1939              		.loc 1 1273 9
 1940 000c 7B68     		ldr	r3, [r7, #4]
 1941 000e 5A1C     		adds	r2, r3, #1
 1942 0010 1346     		mov	r3, r2
 1943 0012 5B00     		lsls	r3, r3, #1
 1944 0014 1344     		add	r3, r3, r2
 1945 0016 DB00     		lsls	r3, r3, #3
 1946 0018 164A     		ldr	r2, .L94
 1947 001a 1344     		add	r3, r3, r2
 1948 001c FB60     		str	r3, [r7, #12]
1274:Core/Src/SEGGER_RTT.c ****   //
1275:Core/Src/SEGGER_RTT.c ****   // Get write position and handle wrap-around if necessary
1276:Core/Src/SEGGER_RTT.c ****   //
1277:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff + 1;
 1949              		.loc 1 1277 16
 1950 001e FB68     		ldr	r3, [r7, #12]
 1951 0020 DB68     		ldr	r3, [r3, #12]
 1952              		.loc 1 1277 9
 1953 0022 0133     		adds	r3, r3, #1
 1954 0024 7B61     		str	r3, [r7, #20]
1278:Core/Src/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
 1955              		.loc 1 1278 21
 1956 0026 FB68     		ldr	r3, [r7, #12]
 1957 0028 9B68     		ldr	r3, [r3, #8]
 1958              		.loc 1 1278 6
 1959 002a 7A69     		ldr	r2, [r7, #20]
 1960 002c 9A42     		cmp	r2, r3
 1961 002e 01D1     		bne	.L90
1279:Core/Src/SEGGER_RTT.c ****     WrOff = 0;
 1962              		.loc 1 1279 11
 1963 0030 0023     		movs	r3, #0
 1964 0032 7B61     		str	r3, [r7, #20]
 1965              	.L90:
1280:Core/Src/SEGGER_RTT.c ****   }
1281:Core/Src/SEGGER_RTT.c ****   //
1282:Core/Src/SEGGER_RTT.c ****   // Output byte if free space is available
1283:Core/Src/SEGGER_RTT.c ****   //
1284:Core/Src/SEGGER_RTT.c ****   if (WrOff != pRing->RdOff) {
 1966              		.loc 1 1284 21
 1967 0034 FB68     		ldr	r3, [r7, #12]
 1968 0036 1B69     		ldr	r3, [r3, #16]
 1969              		.loc 1 1284 6
 1970 0038 7A69     		ldr	r2, [r7, #20]
 1971 003a 9A42     		cmp	r2, r3
 1972 003c 10D0     		beq	.L91
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 58


1285:Core/Src/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + pRing->WrOff) + SEGGER_RTT_UNCACHED_OFF;
 1973              		.loc 1 1285 18
 1974 003e FB68     		ldr	r3, [r7, #12]
 1975 0040 5A68     		ldr	r2, [r3, #4]
 1976              		.loc 1 1285 35
 1977 0042 FB68     		ldr	r3, [r7, #12]
 1978 0044 DB68     		ldr	r3, [r3, #12]
 1979              		.loc 1 1285 10
 1980 0046 1344     		add	r3, r3, r2
 1981 0048 BB60     		str	r3, [r7, #8]
1286:Core/Src/SEGGER_RTT.c ****     *pDst = c;
 1982              		.loc 1 1286 11
 1983 004a BB68     		ldr	r3, [r7, #8]
 1984 004c FA78     		ldrb	r2, [r7, #3]
 1985 004e 1A70     		strb	r2, [r3]
1287:Core/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 1986              		.loc 1 1287 5
 1987              		.syntax unified
 1988              	@ 1287 "Core/Src/SEGGER_RTT.c" 1
 1989 0050 BFF35F8F 		dmb
 1990              	
 1991              	@ 0 "" 2
1288:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 1992              		.loc 1 1288 18
 1993              		.thumb
 1994              		.syntax unified
 1995 0054 FB68     		ldr	r3, [r7, #12]
 1996 0056 7A69     		ldr	r2, [r7, #20]
 1997 0058 DA60     		str	r2, [r3, #12]
1289:Core/Src/SEGGER_RTT.c ****     Status = 1;
 1998              		.loc 1 1289 12
 1999 005a 0123     		movs	r3, #1
 2000 005c 3B61     		str	r3, [r7, #16]
 2001 005e 01E0     		b	.L92
 2002              	.L91:
1290:Core/Src/SEGGER_RTT.c ****   } else {
1291:Core/Src/SEGGER_RTT.c ****     Status = 0;
 2003              		.loc 1 1291 12
 2004 0060 0023     		movs	r3, #0
 2005 0062 3B61     		str	r3, [r7, #16]
 2006              	.L92:
1292:Core/Src/SEGGER_RTT.c ****   }
1293:Core/Src/SEGGER_RTT.c ****   //
1294:Core/Src/SEGGER_RTT.c ****   return Status;
 2007              		.loc 1 1294 10
 2008 0064 3B69     		ldr	r3, [r7, #16]
1295:Core/Src/SEGGER_RTT.c **** }
 2009              		.loc 1 1295 1
 2010 0066 1846     		mov	r0, r3
 2011 0068 1C37     		adds	r7, r7, #28
 2012              	.LCFI79:
 2013              		.cfi_def_cfa_offset 4
 2014 006a BD46     		mov	sp, r7
 2015              	.LCFI80:
 2016              		.cfi_def_cfa_register 13
 2017              		@ sp needed
 2018 006c 5DF8047B 		ldr	r7, [sp], #4
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 59


 2019              	.LCFI81:
 2020              		.cfi_restore 7
 2021              		.cfi_def_cfa_offset 0
 2022 0070 7047     		bx	lr
 2023              	.L95:
 2024 0072 00BF     		.align	2
 2025              	.L94:
 2026 0074 00000000 		.word	_SEGGER_RTT
 2027              		.cfi_endproc
 2028              	.LFE15:
 2030              		.section	.text.SEGGER_RTT_PutCharSkip,"ax",%progbits
 2031              		.align	1
 2032              		.global	SEGGER_RTT_PutCharSkip
 2033              		.syntax unified
 2034              		.thumb
 2035              		.thumb_func
 2037              	SEGGER_RTT_PutCharSkip:
 2038              	.LFB16:
1296:Core/Src/SEGGER_RTT.c **** 
1297:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1298:Core/Src/SEGGER_RTT.c **** *
1299:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_PutCharSkip
1300:Core/Src/SEGGER_RTT.c **** *
1301:Core/Src/SEGGER_RTT.c **** *  Function description
1302:Core/Src/SEGGER_RTT.c **** *    Stores a single character/byte in SEGGER RTT buffer.
1303:Core/Src/SEGGER_RTT.c **** *
1304:Core/Src/SEGGER_RTT.c **** *  Parameters
1305:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1306:Core/Src/SEGGER_RTT.c **** *    c            Byte to be stored.
1307:Core/Src/SEGGER_RTT.c **** *
1308:Core/Src/SEGGER_RTT.c **** *  Return value
1309:Core/Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1310:Core/Src/SEGGER_RTT.c **** *
1311:Core/Src/SEGGER_RTT.c **** *  Notes
1312:Core/Src/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, the character is dropped.
1313:Core/Src/SEGGER_RTT.c **** */
1314:Core/Src/SEGGER_RTT.c **** 
1315:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_PutCharSkip(unsigned BufferIndex, char c) {
 2039              		.loc 1 1315 63
 2040              		.cfi_startproc
 2041              		@ args = 0, pretend = 0, frame = 32
 2042              		@ frame_needed = 1, uses_anonymous_args = 0
 2043 0000 80B5     		push	{r7, lr}
 2044              	.LCFI82:
 2045              		.cfi_def_cfa_offset 8
 2046              		.cfi_offset 7, -8
 2047              		.cfi_offset 14, -4
 2048 0002 88B0     		sub	sp, sp, #32
 2049              	.LCFI83:
 2050              		.cfi_def_cfa_offset 40
 2051 0004 00AF     		add	r7, sp, #0
 2052              	.LCFI84:
 2053              		.cfi_def_cfa_register 7
 2054 0006 7860     		str	r0, [r7, #4]
 2055 0008 0B46     		mov	r3, r1
 2056 000a FB70     		strb	r3, [r7, #3]
 2057              	.LBB10:
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 60


1316:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
1317:Core/Src/SEGGER_RTT.c ****   unsigned              WrOff;
1318:Core/Src/SEGGER_RTT.c ****   unsigned              Status;
1319:Core/Src/SEGGER_RTT.c ****   volatile char*        pDst;
1320:Core/Src/SEGGER_RTT.c ****   //
1321:Core/Src/SEGGER_RTT.c ****   // Prepare
1322:Core/Src/SEGGER_RTT.c ****   //
1323:Core/Src/SEGGER_RTT.c ****   INIT();
 2058              		.loc 1 1323 3
 2059 000c 214B     		ldr	r3, .L102
 2060 000e 7B61     		str	r3, [r7, #20]
 2061 0010 7B69     		ldr	r3, [r7, #20]
 2062 0012 1B78     		ldrb	r3, [r3]
 2063 0014 DBB2     		uxtb	r3, r3
 2064 0016 532B     		cmp	r3, #83
 2065 0018 01D0     		beq	.L97
 2066              		.loc 1 1323 3 is_stmt 0 discriminator 1
 2067 001a FFF7FEFF 		bl	_DoInit
 2068              	.L97:
 2069              	.LBE10:
 2070              	.LBB11:
1324:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2071              		.loc 1 1324 3 is_stmt 1
 2072              		.syntax unified
 2073              	@ 1324 "Core/Src/SEGGER_RTT.c" 1
 2074 001e EFF31183 		mrs   r3, basepri  
 2075 0022 4FF02001 		mov   r1, #32       
 2076 0026 81F31188 		msr   basepri, r1  
 2077              		
 2078              	@ 0 "" 2
 2079              		.thumb
 2080              		.syntax unified
 2081 002a 3B61     		str	r3, [r7, #16]
1325:Core/Src/SEGGER_RTT.c ****   //
1326:Core/Src/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
1327:Core/Src/SEGGER_RTT.c ****   //
1328:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OF
 2082              		.loc 1 1328 9
 2083 002c 7B68     		ldr	r3, [r7, #4]
 2084 002e 5A1C     		adds	r2, r3, #1
 2085 0030 1346     		mov	r3, r2
 2086 0032 5B00     		lsls	r3, r3, #1
 2087 0034 1344     		add	r3, r3, r2
 2088 0036 DB00     		lsls	r3, r3, #3
 2089 0038 164A     		ldr	r2, .L102
 2090 003a 1344     		add	r3, r3, r2
 2091 003c FB60     		str	r3, [r7, #12]
1329:Core/Src/SEGGER_RTT.c ****   //
1330:Core/Src/SEGGER_RTT.c ****   // Get write position and handle wrap-around if necessary
1331:Core/Src/SEGGER_RTT.c ****   //
1332:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff + 1;
 2092              		.loc 1 1332 16
 2093 003e FB68     		ldr	r3, [r7, #12]
 2094 0040 DB68     		ldr	r3, [r3, #12]
 2095              		.loc 1 1332 9
 2096 0042 0133     		adds	r3, r3, #1
 2097 0044 FB61     		str	r3, [r7, #28]
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 61


1333:Core/Src/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
 2098              		.loc 1 1333 21
 2099 0046 FB68     		ldr	r3, [r7, #12]
 2100 0048 9B68     		ldr	r3, [r3, #8]
 2101              		.loc 1 1333 6
 2102 004a FA69     		ldr	r2, [r7, #28]
 2103 004c 9A42     		cmp	r2, r3
 2104 004e 01D1     		bne	.L98
1334:Core/Src/SEGGER_RTT.c ****     WrOff = 0;
 2105              		.loc 1 1334 11
 2106 0050 0023     		movs	r3, #0
 2107 0052 FB61     		str	r3, [r7, #28]
 2108              	.L98:
1335:Core/Src/SEGGER_RTT.c ****   }
1336:Core/Src/SEGGER_RTT.c ****   //
1337:Core/Src/SEGGER_RTT.c ****   // Output byte if free space is available
1338:Core/Src/SEGGER_RTT.c ****   //
1339:Core/Src/SEGGER_RTT.c ****   if (WrOff != pRing->RdOff) {
 2109              		.loc 1 1339 21
 2110 0054 FB68     		ldr	r3, [r7, #12]
 2111 0056 1B69     		ldr	r3, [r3, #16]
 2112              		.loc 1 1339 6
 2113 0058 FA69     		ldr	r2, [r7, #28]
 2114 005a 9A42     		cmp	r2, r3
 2115 005c 10D0     		beq	.L99
1340:Core/Src/SEGGER_RTT.c ****     pDst  = (pRing->pBuffer + pRing->WrOff) + SEGGER_RTT_UNCACHED_OFF;
 2116              		.loc 1 1340 19
 2117 005e FB68     		ldr	r3, [r7, #12]
 2118 0060 5A68     		ldr	r2, [r3, #4]
 2119              		.loc 1 1340 36
 2120 0062 FB68     		ldr	r3, [r7, #12]
 2121 0064 DB68     		ldr	r3, [r3, #12]
 2122              		.loc 1 1340 11
 2123 0066 1344     		add	r3, r3, r2
 2124 0068 BB60     		str	r3, [r7, #8]
1341:Core/Src/SEGGER_RTT.c ****     *pDst = c;
 2125              		.loc 1 1341 11
 2126 006a BB68     		ldr	r3, [r7, #8]
 2127 006c FA78     		ldrb	r2, [r7, #3]
 2128 006e 1A70     		strb	r2, [r3]
1342:Core/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 2129              		.loc 1 1342 5
 2130              		.syntax unified
 2131              	@ 1342 "Core/Src/SEGGER_RTT.c" 1
 2132 0070 BFF35F8F 		dmb
 2133              	
 2134              	@ 0 "" 2
1343:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 2135              		.loc 1 1343 18
 2136              		.thumb
 2137              		.syntax unified
 2138 0074 FB68     		ldr	r3, [r7, #12]
 2139 0076 FA69     		ldr	r2, [r7, #28]
 2140 0078 DA60     		str	r2, [r3, #12]
1344:Core/Src/SEGGER_RTT.c ****     Status = 1;
 2141              		.loc 1 1344 12
 2142 007a 0123     		movs	r3, #1
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 62


 2143 007c BB61     		str	r3, [r7, #24]
 2144 007e 01E0     		b	.L100
 2145              	.L99:
1345:Core/Src/SEGGER_RTT.c ****   } else {
1346:Core/Src/SEGGER_RTT.c ****     Status = 0;
 2146              		.loc 1 1346 12
 2147 0080 0023     		movs	r3, #0
 2148 0082 BB61     		str	r3, [r7, #24]
 2149              	.L100:
1347:Core/Src/SEGGER_RTT.c ****   }
1348:Core/Src/SEGGER_RTT.c ****   //
1349:Core/Src/SEGGER_RTT.c ****   // Finish up.
1350:Core/Src/SEGGER_RTT.c ****   //
1351:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 2150              		.loc 1 1351 3
 2151 0084 3B69     		ldr	r3, [r7, #16]
 2152              		.syntax unified
 2153              	@ 1351 "Core/Src/SEGGER_RTT.c" 1
 2154 0086 83F31188 		msr   basepri, r3  
 2155              		
 2156              	@ 0 "" 2
 2157              		.thumb
 2158              		.syntax unified
 2159              	.LBE11:
1352:Core/Src/SEGGER_RTT.c ****   //
1353:Core/Src/SEGGER_RTT.c ****   return Status;
 2160              		.loc 1 1353 10
 2161 008a BB69     		ldr	r3, [r7, #24]
1354:Core/Src/SEGGER_RTT.c **** }
 2162              		.loc 1 1354 1
 2163 008c 1846     		mov	r0, r3
 2164 008e 2037     		adds	r7, r7, #32
 2165              	.LCFI85:
 2166              		.cfi_def_cfa_offset 8
 2167 0090 BD46     		mov	sp, r7
 2168              	.LCFI86:
 2169              		.cfi_def_cfa_register 13
 2170              		@ sp needed
 2171 0092 80BD     		pop	{r7, pc}
 2172              	.L103:
 2173              		.align	2
 2174              	.L102:
 2175 0094 00000000 		.word	_SEGGER_RTT
 2176              		.cfi_endproc
 2177              	.LFE16:
 2179              		.section	.text.SEGGER_RTT_PutChar,"ax",%progbits
 2180              		.align	1
 2181              		.global	SEGGER_RTT_PutChar
 2182              		.syntax unified
 2183              		.thumb
 2184              		.thumb_func
 2186              	SEGGER_RTT_PutChar:
 2187              	.LFB17:
1355:Core/Src/SEGGER_RTT.c **** 
1356:Core/Src/SEGGER_RTT.c ****  /*********************************************************************
1357:Core/Src/SEGGER_RTT.c **** *
1358:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_PutChar
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 63


1359:Core/Src/SEGGER_RTT.c **** *
1360:Core/Src/SEGGER_RTT.c **** *  Function description
1361:Core/Src/SEGGER_RTT.c **** *    Stores a single character/byte in SEGGER RTT buffer.
1362:Core/Src/SEGGER_RTT.c **** *
1363:Core/Src/SEGGER_RTT.c **** *  Parameters
1364:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1365:Core/Src/SEGGER_RTT.c **** *    c            Byte to be stored.
1366:Core/Src/SEGGER_RTT.c **** *
1367:Core/Src/SEGGER_RTT.c **** *  Return value
1368:Core/Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1369:Core/Src/SEGGER_RTT.c **** *
1370:Core/Src/SEGGER_RTT.c **** *  Notes
1371:Core/Src/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1372:Core/Src/SEGGER_RTT.c **** */
1373:Core/Src/SEGGER_RTT.c **** 
1374:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_PutChar(unsigned BufferIndex, char c) {
 2188              		.loc 1 1374 59
 2189              		.cfi_startproc
 2190              		@ args = 0, pretend = 0, frame = 32
 2191              		@ frame_needed = 1, uses_anonymous_args = 0
 2192 0000 80B5     		push	{r7, lr}
 2193              	.LCFI87:
 2194              		.cfi_def_cfa_offset 8
 2195              		.cfi_offset 7, -8
 2196              		.cfi_offset 14, -4
 2197 0002 88B0     		sub	sp, sp, #32
 2198              	.LCFI88:
 2199              		.cfi_def_cfa_offset 40
 2200 0004 00AF     		add	r7, sp, #0
 2201              	.LCFI89:
 2202              		.cfi_def_cfa_register 7
 2203 0006 7860     		str	r0, [r7, #4]
 2204 0008 0B46     		mov	r3, r1
 2205 000a FB70     		strb	r3, [r7, #3]
 2206              	.LBB12:
1375:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
1376:Core/Src/SEGGER_RTT.c ****   unsigned              WrOff;
1377:Core/Src/SEGGER_RTT.c ****   unsigned              Status;
1378:Core/Src/SEGGER_RTT.c ****   volatile char*        pDst;
1379:Core/Src/SEGGER_RTT.c ****   //
1380:Core/Src/SEGGER_RTT.c ****   // Prepare
1381:Core/Src/SEGGER_RTT.c ****   //
1382:Core/Src/SEGGER_RTT.c ****   INIT();
 2207              		.loc 1 1382 3
 2208 000c 264B     		ldr	r3, .L112
 2209 000e 7B61     		str	r3, [r7, #20]
 2210 0010 7B69     		ldr	r3, [r7, #20]
 2211 0012 1B78     		ldrb	r3, [r3]
 2212 0014 DBB2     		uxtb	r3, r3
 2213 0016 532B     		cmp	r3, #83
 2214 0018 01D0     		beq	.L105
 2215              		.loc 1 1382 3 is_stmt 0 discriminator 1
 2216 001a FFF7FEFF 		bl	_DoInit
 2217              	.L105:
 2218              	.LBE12:
 2219              	.LBB13:
1383:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 64


 2220              		.loc 1 1383 3 is_stmt 1
 2221              		.syntax unified
 2222              	@ 1383 "Core/Src/SEGGER_RTT.c" 1
 2223 001e EFF31183 		mrs   r3, basepri  
 2224 0022 4FF02001 		mov   r1, #32       
 2225 0026 81F31188 		msr   basepri, r1  
 2226              		
 2227              	@ 0 "" 2
 2228              		.thumb
 2229              		.syntax unified
 2230 002a 3B61     		str	r3, [r7, #16]
1384:Core/Src/SEGGER_RTT.c ****   //
1385:Core/Src/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
1386:Core/Src/SEGGER_RTT.c ****   //
1387:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OF
 2231              		.loc 1 1387 9
 2232 002c 7B68     		ldr	r3, [r7, #4]
 2233 002e 5A1C     		adds	r2, r3, #1
 2234 0030 1346     		mov	r3, r2
 2235 0032 5B00     		lsls	r3, r3, #1
 2236 0034 1344     		add	r3, r3, r2
 2237 0036 DB00     		lsls	r3, r3, #3
 2238 0038 1B4A     		ldr	r2, .L112
 2239 003a 1344     		add	r3, r3, r2
 2240 003c FB60     		str	r3, [r7, #12]
1388:Core/Src/SEGGER_RTT.c ****   //
1389:Core/Src/SEGGER_RTT.c ****   // Get write position and handle wrap-around if necessary
1390:Core/Src/SEGGER_RTT.c ****   //
1391:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff + 1;
 2241              		.loc 1 1391 16
 2242 003e FB68     		ldr	r3, [r7, #12]
 2243 0040 DB68     		ldr	r3, [r3, #12]
 2244              		.loc 1 1391 9
 2245 0042 0133     		adds	r3, r3, #1
 2246 0044 FB61     		str	r3, [r7, #28]
1392:Core/Src/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
 2247              		.loc 1 1392 21
 2248 0046 FB68     		ldr	r3, [r7, #12]
 2249 0048 9B68     		ldr	r3, [r3, #8]
 2250              		.loc 1 1392 6
 2251 004a FA69     		ldr	r2, [r7, #28]
 2252 004c 9A42     		cmp	r2, r3
 2253 004e 01D1     		bne	.L106
1393:Core/Src/SEGGER_RTT.c ****     WrOff = 0;
 2254              		.loc 1 1393 11
 2255 0050 0023     		movs	r3, #0
 2256 0052 FB61     		str	r3, [r7, #28]
 2257              	.L106:
1394:Core/Src/SEGGER_RTT.c ****   }
1395:Core/Src/SEGGER_RTT.c ****   //
1396:Core/Src/SEGGER_RTT.c ****   // Wait for free space if mode is set to blocking
1397:Core/Src/SEGGER_RTT.c ****   //
1398:Core/Src/SEGGER_RTT.c ****   if (pRing->Flags == SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL) {
 2258              		.loc 1 1398 12
 2259 0054 FB68     		ldr	r3, [r7, #12]
 2260 0056 5B69     		ldr	r3, [r3, #20]
 2261              		.loc 1 1398 6
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 65


 2262 0058 022B     		cmp	r3, #2
 2263 005a 05D1     		bne	.L107
1399:Core/Src/SEGGER_RTT.c ****     while (WrOff == pRing->RdOff) {
 2264              		.loc 1 1399 11
 2265 005c 00BF     		nop
 2266              	.L108:
 2267              		.loc 1 1399 26 discriminator 1
 2268 005e FB68     		ldr	r3, [r7, #12]
 2269 0060 1B69     		ldr	r3, [r3, #16]
 2270              		.loc 1 1399 18 discriminator 1
 2271 0062 FA69     		ldr	r2, [r7, #28]
 2272 0064 9A42     		cmp	r2, r3
 2273 0066 FAD0     		beq	.L108
 2274              	.L107:
1400:Core/Src/SEGGER_RTT.c ****       ;
1401:Core/Src/SEGGER_RTT.c ****     }
1402:Core/Src/SEGGER_RTT.c ****   }
1403:Core/Src/SEGGER_RTT.c ****   //
1404:Core/Src/SEGGER_RTT.c ****   // Output byte if free space is available
1405:Core/Src/SEGGER_RTT.c ****   //
1406:Core/Src/SEGGER_RTT.c ****   if (WrOff != pRing->RdOff) {
 2275              		.loc 1 1406 21
 2276 0068 FB68     		ldr	r3, [r7, #12]
 2277 006a 1B69     		ldr	r3, [r3, #16]
 2278              		.loc 1 1406 6
 2279 006c FA69     		ldr	r2, [r7, #28]
 2280 006e 9A42     		cmp	r2, r3
 2281 0070 10D0     		beq	.L109
1407:Core/Src/SEGGER_RTT.c ****     pDst  = (pRing->pBuffer + pRing->WrOff) + SEGGER_RTT_UNCACHED_OFF;
 2282              		.loc 1 1407 19
 2283 0072 FB68     		ldr	r3, [r7, #12]
 2284 0074 5A68     		ldr	r2, [r3, #4]
 2285              		.loc 1 1407 36
 2286 0076 FB68     		ldr	r3, [r7, #12]
 2287 0078 DB68     		ldr	r3, [r3, #12]
 2288              		.loc 1 1407 11
 2289 007a 1344     		add	r3, r3, r2
 2290 007c BB60     		str	r3, [r7, #8]
1408:Core/Src/SEGGER_RTT.c ****     *pDst = c;
 2291              		.loc 1 1408 11
 2292 007e BB68     		ldr	r3, [r7, #8]
 2293 0080 FA78     		ldrb	r2, [r7, #3]
 2294 0082 1A70     		strb	r2, [r3]
1409:Core/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 2295              		.loc 1 1409 5
 2296              		.syntax unified
 2297              	@ 1409 "Core/Src/SEGGER_RTT.c" 1
 2298 0084 BFF35F8F 		dmb
 2299              	
 2300              	@ 0 "" 2
1410:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 2301              		.loc 1 1410 18
 2302              		.thumb
 2303              		.syntax unified
 2304 0088 FB68     		ldr	r3, [r7, #12]
 2305 008a FA69     		ldr	r2, [r7, #28]
 2306 008c DA60     		str	r2, [r3, #12]
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 66


1411:Core/Src/SEGGER_RTT.c ****     Status = 1;
 2307              		.loc 1 1411 12
 2308 008e 0123     		movs	r3, #1
 2309 0090 BB61     		str	r3, [r7, #24]
 2310 0092 01E0     		b	.L110
 2311              	.L109:
1412:Core/Src/SEGGER_RTT.c ****   } else {
1413:Core/Src/SEGGER_RTT.c ****     Status = 0;
 2312              		.loc 1 1413 12
 2313 0094 0023     		movs	r3, #0
 2314 0096 BB61     		str	r3, [r7, #24]
 2315              	.L110:
1414:Core/Src/SEGGER_RTT.c ****   }
1415:Core/Src/SEGGER_RTT.c ****   //
1416:Core/Src/SEGGER_RTT.c ****   // Finish up.
1417:Core/Src/SEGGER_RTT.c ****   //
1418:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 2316              		.loc 1 1418 3
 2317 0098 3B69     		ldr	r3, [r7, #16]
 2318              		.syntax unified
 2319              	@ 1418 "Core/Src/SEGGER_RTT.c" 1
 2320 009a 83F31188 		msr   basepri, r3  
 2321              		
 2322              	@ 0 "" 2
 2323              		.thumb
 2324              		.syntax unified
 2325              	.LBE13:
1419:Core/Src/SEGGER_RTT.c ****   return Status;
 2326              		.loc 1 1419 10
 2327 009e BB69     		ldr	r3, [r7, #24]
1420:Core/Src/SEGGER_RTT.c **** }
 2328              		.loc 1 1420 1
 2329 00a0 1846     		mov	r0, r3
 2330 00a2 2037     		adds	r7, r7, #32
 2331              	.LCFI90:
 2332              		.cfi_def_cfa_offset 8
 2333 00a4 BD46     		mov	sp, r7
 2334              	.LCFI91:
 2335              		.cfi_def_cfa_register 13
 2336              		@ sp needed
 2337 00a6 80BD     		pop	{r7, pc}
 2338              	.L113:
 2339              		.align	2
 2340              	.L112:
 2341 00a8 00000000 		.word	_SEGGER_RTT
 2342              		.cfi_endproc
 2343              	.LFE17:
 2345              		.section	.text.SEGGER_RTT_GetKey,"ax",%progbits
 2346              		.align	1
 2347              		.global	SEGGER_RTT_GetKey
 2348              		.syntax unified
 2349              		.thumb
 2350              		.thumb_func
 2352              	SEGGER_RTT_GetKey:
 2353              	.LFB18:
1421:Core/Src/SEGGER_RTT.c **** 
1422:Core/Src/SEGGER_RTT.c **** /*********************************************************************
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 67


1423:Core/Src/SEGGER_RTT.c **** *
1424:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_GetKey
1425:Core/Src/SEGGER_RTT.c **** *
1426:Core/Src/SEGGER_RTT.c **** *  Function description
1427:Core/Src/SEGGER_RTT.c **** *    Reads one character from the SEGGER RTT buffer.
1428:Core/Src/SEGGER_RTT.c **** *    Host has previously stored data there.
1429:Core/Src/SEGGER_RTT.c **** *
1430:Core/Src/SEGGER_RTT.c **** *  Return value
1431:Core/Src/SEGGER_RTT.c **** *    <  0 -   No character available (buffer empty).
1432:Core/Src/SEGGER_RTT.c **** *    >= 0 -   Character which has been read. (Possible values: 0 - 255)
1433:Core/Src/SEGGER_RTT.c **** *
1434:Core/Src/SEGGER_RTT.c **** *  Notes
1435:Core/Src/SEGGER_RTT.c **** *    (1) This function is only specified for accesses to RTT buffer 0.
1436:Core/Src/SEGGER_RTT.c **** */
1437:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_GetKey(void) {
 2354              		.loc 1 1437 29
 2355              		.cfi_startproc
 2356              		@ args = 0, pretend = 0, frame = 8
 2357              		@ frame_needed = 1, uses_anonymous_args = 0
 2358 0000 80B5     		push	{r7, lr}
 2359              	.LCFI92:
 2360              		.cfi_def_cfa_offset 8
 2361              		.cfi_offset 7, -8
 2362              		.cfi_offset 14, -4
 2363 0002 82B0     		sub	sp, sp, #8
 2364              	.LCFI93:
 2365              		.cfi_def_cfa_offset 16
 2366 0004 00AF     		add	r7, sp, #0
 2367              	.LCFI94:
 2368              		.cfi_def_cfa_register 7
1438:Core/Src/SEGGER_RTT.c ****   char c;
1439:Core/Src/SEGGER_RTT.c ****   int r;
1440:Core/Src/SEGGER_RTT.c **** 
1441:Core/Src/SEGGER_RTT.c ****   r = (int)SEGGER_RTT_Read(0u, &c, 1u);
 2369              		.loc 1 1441 12
 2370 0006 FB1C     		adds	r3, r7, #3
 2371 0008 0122     		movs	r2, #1
 2372 000a 1946     		mov	r1, r3
 2373 000c 0020     		movs	r0, #0
 2374 000e FFF7FEFF 		bl	SEGGER_RTT_Read
 2375 0012 0346     		mov	r3, r0
 2376              		.loc 1 1441 5 discriminator 1
 2377 0014 7B60     		str	r3, [r7, #4]
1442:Core/Src/SEGGER_RTT.c ****   if (r == 1) {
 2378              		.loc 1 1442 6
 2379 0016 7B68     		ldr	r3, [r7, #4]
 2380 0018 012B     		cmp	r3, #1
 2381 001a 02D1     		bne	.L115
1443:Core/Src/SEGGER_RTT.c ****     r = (int)(unsigned char)c;
 2382              		.loc 1 1443 9
 2383 001c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2384              		.loc 1 1443 7
 2385 001e 7B60     		str	r3, [r7, #4]
 2386 0020 02E0     		b	.L116
 2387              	.L115:
1444:Core/Src/SEGGER_RTT.c ****   } else {
1445:Core/Src/SEGGER_RTT.c ****     r = -1;
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 68


 2388              		.loc 1 1445 7
 2389 0022 4FF0FF33 		mov	r3, #-1
 2390 0026 7B60     		str	r3, [r7, #4]
 2391              	.L116:
1446:Core/Src/SEGGER_RTT.c ****   }
1447:Core/Src/SEGGER_RTT.c ****   return r;
 2392              		.loc 1 1447 10
 2393 0028 7B68     		ldr	r3, [r7, #4]
1448:Core/Src/SEGGER_RTT.c **** }
 2394              		.loc 1 1448 1
 2395 002a 1846     		mov	r0, r3
 2396 002c 0837     		adds	r7, r7, #8
 2397              	.LCFI95:
 2398              		.cfi_def_cfa_offset 8
 2399 002e BD46     		mov	sp, r7
 2400              	.LCFI96:
 2401              		.cfi_def_cfa_register 13
 2402              		@ sp needed
 2403 0030 80BD     		pop	{r7, pc}
 2404              		.cfi_endproc
 2405              	.LFE18:
 2407              		.section	.text.SEGGER_RTT_WaitKey,"ax",%progbits
 2408              		.align	1
 2409              		.global	SEGGER_RTT_WaitKey
 2410              		.syntax unified
 2411              		.thumb
 2412              		.thumb_func
 2414              	SEGGER_RTT_WaitKey:
 2415              	.LFB19:
1449:Core/Src/SEGGER_RTT.c **** 
1450:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1451:Core/Src/SEGGER_RTT.c **** *
1452:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_WaitKey
1453:Core/Src/SEGGER_RTT.c **** *
1454:Core/Src/SEGGER_RTT.c **** *  Function description
1455:Core/Src/SEGGER_RTT.c **** *    Waits until at least one character is avaible in the SEGGER RTT buffer.
1456:Core/Src/SEGGER_RTT.c **** *    Once a character is available, it is read and this function returns.
1457:Core/Src/SEGGER_RTT.c **** *
1458:Core/Src/SEGGER_RTT.c **** *  Return value
1459:Core/Src/SEGGER_RTT.c **** *    >=0 -   Character which has been read.
1460:Core/Src/SEGGER_RTT.c **** *
1461:Core/Src/SEGGER_RTT.c **** *  Notes
1462:Core/Src/SEGGER_RTT.c **** *    (1) This function is only specified for accesses to RTT buffer 0
1463:Core/Src/SEGGER_RTT.c **** *    (2) This function is blocking if no character is present in RTT buffer
1464:Core/Src/SEGGER_RTT.c **** */
1465:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_WaitKey(void) {
 2416              		.loc 1 1465 30
 2417              		.cfi_startproc
 2418              		@ args = 0, pretend = 0, frame = 8
 2419              		@ frame_needed = 1, uses_anonymous_args = 0
 2420 0000 80B5     		push	{r7, lr}
 2421              	.LCFI97:
 2422              		.cfi_def_cfa_offset 8
 2423              		.cfi_offset 7, -8
 2424              		.cfi_offset 14, -4
 2425 0002 82B0     		sub	sp, sp, #8
 2426              	.LCFI98:
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 69


 2427              		.cfi_def_cfa_offset 16
 2428 0004 00AF     		add	r7, sp, #0
 2429              	.LCFI99:
 2430              		.cfi_def_cfa_register 7
 2431              	.L119:
1466:Core/Src/SEGGER_RTT.c ****   int r;
1467:Core/Src/SEGGER_RTT.c **** 
1468:Core/Src/SEGGER_RTT.c ****   do {
1469:Core/Src/SEGGER_RTT.c ****     r = SEGGER_RTT_GetKey();
 2432              		.loc 1 1469 9
 2433 0006 FFF7FEFF 		bl	SEGGER_RTT_GetKey
 2434 000a 7860     		str	r0, [r7, #4]
1470:Core/Src/SEGGER_RTT.c ****   } while (r < 0);
 2435              		.loc 1 1470 14 discriminator 1
 2436 000c 7B68     		ldr	r3, [r7, #4]
 2437 000e 002B     		cmp	r3, #0
 2438 0010 F9DB     		blt	.L119
1471:Core/Src/SEGGER_RTT.c ****   return r;
 2439              		.loc 1 1471 10
 2440 0012 7B68     		ldr	r3, [r7, #4]
1472:Core/Src/SEGGER_RTT.c **** }
 2441              		.loc 1 1472 1
 2442 0014 1846     		mov	r0, r3
 2443 0016 0837     		adds	r7, r7, #8
 2444              	.LCFI100:
 2445              		.cfi_def_cfa_offset 8
 2446 0018 BD46     		mov	sp, r7
 2447              	.LCFI101:
 2448              		.cfi_def_cfa_register 13
 2449              		@ sp needed
 2450 001a 80BD     		pop	{r7, pc}
 2451              		.cfi_endproc
 2452              	.LFE19:
 2454              		.section	.text.SEGGER_RTT_HasKey,"ax",%progbits
 2455              		.align	1
 2456              		.global	SEGGER_RTT_HasKey
 2457              		.syntax unified
 2458              		.thumb
 2459              		.thumb_func
 2461              	SEGGER_RTT_HasKey:
 2462              	.LFB20:
1473:Core/Src/SEGGER_RTT.c **** 
1474:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1475:Core/Src/SEGGER_RTT.c **** *
1476:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_HasKey
1477:Core/Src/SEGGER_RTT.c **** *
1478:Core/Src/SEGGER_RTT.c **** *  Function description
1479:Core/Src/SEGGER_RTT.c **** *    Checks if at least one character for reading is available in the SEGGER RTT buffer.
1480:Core/Src/SEGGER_RTT.c **** *
1481:Core/Src/SEGGER_RTT.c **** *  Return value
1482:Core/Src/SEGGER_RTT.c **** *    == 0 -     No characters are available to read.
1483:Core/Src/SEGGER_RTT.c **** *    == 1 -     At least one character is available.
1484:Core/Src/SEGGER_RTT.c **** *
1485:Core/Src/SEGGER_RTT.c **** *  Notes
1486:Core/Src/SEGGER_RTT.c **** *    (1) This function is only specified for accesses to RTT buffer 0
1487:Core/Src/SEGGER_RTT.c **** */
1488:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_HasKey(void) {
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 70


 2463              		.loc 1 1488 29
 2464              		.cfi_startproc
 2465              		@ args = 0, pretend = 0, frame = 16
 2466              		@ frame_needed = 1, uses_anonymous_args = 0
 2467 0000 80B5     		push	{r7, lr}
 2468              	.LCFI102:
 2469              		.cfi_def_cfa_offset 8
 2470              		.cfi_offset 7, -8
 2471              		.cfi_offset 14, -4
 2472 0002 84B0     		sub	sp, sp, #16
 2473              	.LCFI103:
 2474              		.cfi_def_cfa_offset 24
 2475 0004 00AF     		add	r7, sp, #0
 2476              	.LCFI104:
 2477              		.cfi_def_cfa_register 7
 2478              	.LBB14:
1489:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_DOWN* pRing;
1490:Core/Src/SEGGER_RTT.c ****   unsigned RdOff;
1491:Core/Src/SEGGER_RTT.c ****   int r;
1492:Core/Src/SEGGER_RTT.c **** 
1493:Core/Src/SEGGER_RTT.c ****   INIT();
 2479              		.loc 1 1493 3
 2480 0006 0E4B     		ldr	r3, .L126
 2481 0008 BB60     		str	r3, [r7, #8]
 2482 000a BB68     		ldr	r3, [r7, #8]
 2483 000c 1B78     		ldrb	r3, [r3]
 2484 000e DBB2     		uxtb	r3, r3
 2485 0010 532B     		cmp	r3, #83
 2486 0012 01D0     		beq	.L122
 2487              		.loc 1 1493 3 is_stmt 0 discriminator 1
 2488 0014 FFF7FEFF 		bl	_DoInit
 2489              	.L122:
 2490              	.LBE14:
1494:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[0] + SEGGER_RTT_UNCACHED_OFF);  /
 2491              		.loc 1 1494 9 is_stmt 1
 2492 0018 0A4B     		ldr	r3, .L126+4
 2493 001a 7B60     		str	r3, [r7, #4]
1495:Core/Src/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 2494              		.loc 1 1495 9
 2495 001c 7B68     		ldr	r3, [r7, #4]
 2496 001e 1B69     		ldr	r3, [r3, #16]
 2497 0020 3B60     		str	r3, [r7]
1496:Core/Src/SEGGER_RTT.c ****   if (RdOff != pRing->WrOff) {
 2498              		.loc 1 1496 21
 2499 0022 7B68     		ldr	r3, [r7, #4]
 2500 0024 DB68     		ldr	r3, [r3, #12]
 2501              		.loc 1 1496 6
 2502 0026 3A68     		ldr	r2, [r7]
 2503 0028 9A42     		cmp	r2, r3
 2504 002a 02D0     		beq	.L123
1497:Core/Src/SEGGER_RTT.c ****     r = 1;
 2505              		.loc 1 1497 7
 2506 002c 0123     		movs	r3, #1
 2507 002e FB60     		str	r3, [r7, #12]
 2508 0030 01E0     		b	.L124
 2509              	.L123:
1498:Core/Src/SEGGER_RTT.c ****   } else {
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 71


1499:Core/Src/SEGGER_RTT.c ****     r = 0;
 2510              		.loc 1 1499 7
 2511 0032 0023     		movs	r3, #0
 2512 0034 FB60     		str	r3, [r7, #12]
 2513              	.L124:
1500:Core/Src/SEGGER_RTT.c ****   }
1501:Core/Src/SEGGER_RTT.c ****   return r;
 2514              		.loc 1 1501 10
 2515 0036 FB68     		ldr	r3, [r7, #12]
1502:Core/Src/SEGGER_RTT.c **** }
 2516              		.loc 1 1502 1
 2517 0038 1846     		mov	r0, r3
 2518 003a 1037     		adds	r7, r7, #16
 2519              	.LCFI105:
 2520              		.cfi_def_cfa_offset 8
 2521 003c BD46     		mov	sp, r7
 2522              	.LCFI106:
 2523              		.cfi_def_cfa_register 13
 2524              		@ sp needed
 2525 003e 80BD     		pop	{r7, pc}
 2526              	.L127:
 2527              		.align	2
 2528              	.L126:
 2529 0040 00000000 		.word	_SEGGER_RTT
 2530 0044 60000000 		.word	_SEGGER_RTT+96
 2531              		.cfi_endproc
 2532              	.LFE20:
 2534              		.section	.text.SEGGER_RTT_HasData,"ax",%progbits
 2535              		.align	1
 2536              		.global	SEGGER_RTT_HasData
 2537              		.syntax unified
 2538              		.thumb
 2539              		.thumb_func
 2541              	SEGGER_RTT_HasData:
 2542              	.LFB21:
1503:Core/Src/SEGGER_RTT.c **** 
1504:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1505:Core/Src/SEGGER_RTT.c **** *
1506:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_HasData
1507:Core/Src/SEGGER_RTT.c **** *
1508:Core/Src/SEGGER_RTT.c **** *  Function description
1509:Core/Src/SEGGER_RTT.c **** *    Check if there is data from the host in the given buffer.
1510:Core/Src/SEGGER_RTT.c **** *
1511:Core/Src/SEGGER_RTT.c **** *  Return value:
1512:Core/Src/SEGGER_RTT.c **** *  ==0:  No data
1513:Core/Src/SEGGER_RTT.c **** *  !=0:  Data in buffer
1514:Core/Src/SEGGER_RTT.c **** *
1515:Core/Src/SEGGER_RTT.c **** */
1516:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_HasData(unsigned BufferIndex) {
 2543              		.loc 1 1516 51
 2544              		.cfi_startproc
 2545              		@ args = 0, pretend = 0, frame = 16
 2546              		@ frame_needed = 1, uses_anonymous_args = 0
 2547              		@ link register save eliminated.
 2548 0000 80B4     		push	{r7}
 2549              	.LCFI107:
 2550              		.cfi_def_cfa_offset 4
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 72


 2551              		.cfi_offset 7, -4
 2552 0002 85B0     		sub	sp, sp, #20
 2553              	.LCFI108:
 2554              		.cfi_def_cfa_offset 24
 2555 0004 00AF     		add	r7, sp, #0
 2556              	.LCFI109:
 2557              		.cfi_def_cfa_register 7
 2558 0006 7860     		str	r0, [r7, #4]
1517:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_DOWN* pRing;
1518:Core/Src/SEGGER_RTT.c ****   unsigned                v;
1519:Core/Src/SEGGER_RTT.c **** 
1520:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHE
 2559              		.loc 1 1520 9
 2560 0008 7A68     		ldr	r2, [r7, #4]
 2561 000a 1346     		mov	r3, r2
 2562 000c 5B00     		lsls	r3, r3, #1
 2563 000e 1344     		add	r3, r3, r2
 2564 0010 DB00     		lsls	r3, r3, #3
 2565 0012 6033     		adds	r3, r3, #96
 2566 0014 074A     		ldr	r2, .L130
 2567 0016 1344     		add	r3, r3, r2
 2568 0018 FB60     		str	r3, [r7, #12]
1521:Core/Src/SEGGER_RTT.c ****   v = pRing->WrOff;
 2569              		.loc 1 1521 5
 2570 001a FB68     		ldr	r3, [r7, #12]
 2571 001c DB68     		ldr	r3, [r3, #12]
 2572 001e BB60     		str	r3, [r7, #8]
1522:Core/Src/SEGGER_RTT.c ****   return v - pRing->RdOff;
 2573              		.loc 1 1522 19
 2574 0020 FB68     		ldr	r3, [r7, #12]
 2575 0022 1B69     		ldr	r3, [r3, #16]
 2576              		.loc 1 1522 12
 2577 0024 BA68     		ldr	r2, [r7, #8]
 2578 0026 D31A     		subs	r3, r2, r3
1523:Core/Src/SEGGER_RTT.c **** }
 2579              		.loc 1 1523 1
 2580 0028 1846     		mov	r0, r3
 2581 002a 1437     		adds	r7, r7, #20
 2582              	.LCFI110:
 2583              		.cfi_def_cfa_offset 4
 2584 002c BD46     		mov	sp, r7
 2585              	.LCFI111:
 2586              		.cfi_def_cfa_register 13
 2587              		@ sp needed
 2588 002e 5DF8047B 		ldr	r7, [sp], #4
 2589              	.LCFI112:
 2590              		.cfi_restore 7
 2591              		.cfi_def_cfa_offset 0
 2592 0032 7047     		bx	lr
 2593              	.L131:
 2594              		.align	2
 2595              	.L130:
 2596 0034 00000000 		.word	_SEGGER_RTT
 2597              		.cfi_endproc
 2598              	.LFE21:
 2600              		.section	.text.SEGGER_RTT_HasDataUp,"ax",%progbits
 2601              		.align	1
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 73


 2602              		.global	SEGGER_RTT_HasDataUp
 2603              		.syntax unified
 2604              		.thumb
 2605              		.thumb_func
 2607              	SEGGER_RTT_HasDataUp:
 2608              	.LFB22:
1524:Core/Src/SEGGER_RTT.c **** 
1525:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1526:Core/Src/SEGGER_RTT.c **** *
1527:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_HasDataUp
1528:Core/Src/SEGGER_RTT.c **** *
1529:Core/Src/SEGGER_RTT.c **** *  Function description
1530:Core/Src/SEGGER_RTT.c **** *    Check if there is data remaining to be sent in the given buffer.
1531:Core/Src/SEGGER_RTT.c **** *
1532:Core/Src/SEGGER_RTT.c **** *  Return value:
1533:Core/Src/SEGGER_RTT.c **** *  ==0:  No data
1534:Core/Src/SEGGER_RTT.c **** *  !=0:  Data in buffer
1535:Core/Src/SEGGER_RTT.c **** *
1536:Core/Src/SEGGER_RTT.c **** */
1537:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
 2609              		.loc 1 1537 53
 2610              		.cfi_startproc
 2611              		@ args = 0, pretend = 0, frame = 16
 2612              		@ frame_needed = 1, uses_anonymous_args = 0
 2613              		@ link register save eliminated.
 2614 0000 80B4     		push	{r7}
 2615              	.LCFI113:
 2616              		.cfi_def_cfa_offset 4
 2617              		.cfi_offset 7, -4
 2618 0002 85B0     		sub	sp, sp, #20
 2619              	.LCFI114:
 2620              		.cfi_def_cfa_offset 24
 2621 0004 00AF     		add	r7, sp, #0
 2622              	.LCFI115:
 2623              		.cfi_def_cfa_register 7
 2624 0006 7860     		str	r0, [r7, #4]
1538:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
1539:Core/Src/SEGGER_RTT.c ****   unsigned                v;
1540:Core/Src/SEGGER_RTT.c **** 
1541:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OF
 2625              		.loc 1 1541 9
 2626 0008 7B68     		ldr	r3, [r7, #4]
 2627 000a 5A1C     		adds	r2, r3, #1
 2628 000c 1346     		mov	r3, r2
 2629 000e 5B00     		lsls	r3, r3, #1
 2630 0010 1344     		add	r3, r3, r2
 2631 0012 DB00     		lsls	r3, r3, #3
 2632 0014 074A     		ldr	r2, .L134
 2633 0016 1344     		add	r3, r3, r2
 2634 0018 FB60     		str	r3, [r7, #12]
1542:Core/Src/SEGGER_RTT.c ****   v = pRing->RdOff;
 2635              		.loc 1 1542 5
 2636 001a FB68     		ldr	r3, [r7, #12]
 2637 001c 1B69     		ldr	r3, [r3, #16]
 2638 001e BB60     		str	r3, [r7, #8]
1543:Core/Src/SEGGER_RTT.c ****   return pRing->WrOff - v;
 2639              		.loc 1 1543 15
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 74


 2640 0020 FB68     		ldr	r3, [r7, #12]
 2641 0022 DA68     		ldr	r2, [r3, #12]
 2642              		.loc 1 1543 23
 2643 0024 BB68     		ldr	r3, [r7, #8]
 2644 0026 D31A     		subs	r3, r2, r3
1544:Core/Src/SEGGER_RTT.c **** }
 2645              		.loc 1 1544 1
 2646 0028 1846     		mov	r0, r3
 2647 002a 1437     		adds	r7, r7, #20
 2648              	.LCFI116:
 2649              		.cfi_def_cfa_offset 4
 2650 002c BD46     		mov	sp, r7
 2651              	.LCFI117:
 2652              		.cfi_def_cfa_register 13
 2653              		@ sp needed
 2654 002e 5DF8047B 		ldr	r7, [sp], #4
 2655              	.LCFI118:
 2656              		.cfi_restore 7
 2657              		.cfi_def_cfa_offset 0
 2658 0032 7047     		bx	lr
 2659              	.L135:
 2660              		.align	2
 2661              	.L134:
 2662 0034 00000000 		.word	_SEGGER_RTT
 2663              		.cfi_endproc
 2664              	.LFE22:
 2666              		.section	.text.SEGGER_RTT_AllocDownBuffer,"ax",%progbits
 2667              		.align	1
 2668              		.global	SEGGER_RTT_AllocDownBuffer
 2669              		.syntax unified
 2670              		.thumb
 2671              		.thumb_func
 2673              	SEGGER_RTT_AllocDownBuffer:
 2674              	.LFB23:
1545:Core/Src/SEGGER_RTT.c **** 
1546:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1547:Core/Src/SEGGER_RTT.c **** *
1548:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_AllocDownBuffer
1549:Core/Src/SEGGER_RTT.c **** *
1550:Core/Src/SEGGER_RTT.c **** *  Function description
1551:Core/Src/SEGGER_RTT.c **** *    Run-time configuration of the next down-buffer (H->T).
1552:Core/Src/SEGGER_RTT.c **** *    The next buffer, which is not used yet is configured.
1553:Core/Src/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1554:Core/Src/SEGGER_RTT.c **** *
1555:Core/Src/SEGGER_RTT.c **** *  Parameters
1556:Core/Src/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1557:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1558:Core/Src/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1559:Core/Src/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1560:Core/Src/SEGGER_RTT.c **** *                 Flags[31:24] are used for validity check and must be zero. Flags[23:2] are reserv
1561:Core/Src/SEGGER_RTT.c **** *
1562:Core/Src/SEGGER_RTT.c **** *  Return value
1563:Core/Src/SEGGER_RTT.c **** *    >= 0 - O.K. Buffer Index
1564:Core/Src/SEGGER_RTT.c **** *     < 0 - Error
1565:Core/Src/SEGGER_RTT.c **** */
1566:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_AllocDownBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flag
 2675              		.loc 1 1566 103
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 75


 2676              		.cfi_startproc
 2677              		@ args = 0, pretend = 0, frame = 32
 2678              		@ frame_needed = 1, uses_anonymous_args = 0
 2679 0000 80B5     		push	{r7, lr}
 2680              	.LCFI119:
 2681              		.cfi_def_cfa_offset 8
 2682              		.cfi_offset 7, -8
 2683              		.cfi_offset 14, -4
 2684 0002 88B0     		sub	sp, sp, #32
 2685              	.LCFI120:
 2686              		.cfi_def_cfa_offset 40
 2687 0004 00AF     		add	r7, sp, #0
 2688              	.LCFI121:
 2689              		.cfi_def_cfa_register 7
 2690 0006 F860     		str	r0, [r7, #12]
 2691 0008 B960     		str	r1, [r7, #8]
 2692 000a 7A60     		str	r2, [r7, #4]
 2693 000c 3B60     		str	r3, [r7]
 2694              	.LBB15:
1567:Core/Src/SEGGER_RTT.c ****   int BufferIndex;
1568:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
1569:Core/Src/SEGGER_RTT.c **** 
1570:Core/Src/SEGGER_RTT.c ****   INIT();
 2695              		.loc 1 1570 3
 2696 000e 3C4B     		ldr	r3, .L145
 2697 0010 BB61     		str	r3, [r7, #24]
 2698 0012 BB69     		ldr	r3, [r7, #24]
 2699 0014 1B78     		ldrb	r3, [r3]
 2700 0016 DBB2     		uxtb	r3, r3
 2701 0018 532B     		cmp	r3, #83
 2702 001a 01D0     		beq	.L137
 2703              		.loc 1 1570 3 is_stmt 0 discriminator 1
 2704 001c FFF7FEFF 		bl	_DoInit
 2705              	.L137:
 2706              	.LBE15:
 2707              	.LBB16:
1571:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2708              		.loc 1 1571 3 is_stmt 1
 2709              		.syntax unified
 2710              	@ 1571 "Core/Src/SEGGER_RTT.c" 1
 2711 0020 EFF31183 		mrs   r3, basepri  
 2712 0024 4FF02001 		mov   r1, #32       
 2713 0028 81F31188 		msr   basepri, r1  
 2714              		
 2715              	@ 0 "" 2
 2716              		.thumb
 2717              		.syntax unified
 2718 002c 7B61     		str	r3, [r7, #20]
1572:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access
 2719              		.loc 1 1572 10
 2720 002e 344B     		ldr	r3, .L145
 2721 0030 3B61     		str	r3, [r7, #16]
1573:Core/Src/SEGGER_RTT.c ****   BufferIndex = 0;
 2722              		.loc 1 1573 15
 2723 0032 0023     		movs	r3, #0
 2724 0034 FB61     		str	r3, [r7, #28]
 2725              	.L140:
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 76


1574:Core/Src/SEGGER_RTT.c ****   do {
1575:Core/Src/SEGGER_RTT.c ****     if (pRTTCB->aDown[BufferIndex].pBuffer == NULL) {
 2726              		.loc 1 1575 35
 2727 0036 3969     		ldr	r1, [r7, #16]
 2728 0038 FA69     		ldr	r2, [r7, #28]
 2729 003a 1346     		mov	r3, r2
 2730 003c 5B00     		lsls	r3, r3, #1
 2731 003e 1344     		add	r3, r3, r2
 2732 0040 DB00     		lsls	r3, r3, #3
 2733 0042 0B44     		add	r3, r3, r1
 2734 0044 6433     		adds	r3, r3, #100
 2735 0046 1B68     		ldr	r3, [r3]
 2736              		.loc 1 1575 8
 2737 0048 002B     		cmp	r3, #0
 2738 004a 08D0     		beq	.L144
1576:Core/Src/SEGGER_RTT.c ****       break;
1577:Core/Src/SEGGER_RTT.c ****     }
1578:Core/Src/SEGGER_RTT.c ****     BufferIndex++;
 2739              		.loc 1 1578 16
 2740 004c FB69     		ldr	r3, [r7, #28]
 2741 004e 0133     		adds	r3, r3, #1
 2742 0050 FB61     		str	r3, [r7, #28]
1579:Core/Src/SEGGER_RTT.c ****   } while (BufferIndex < pRTTCB->MaxNumDownBuffers);
 2743              		.loc 1 1579 32
 2744 0052 3B69     		ldr	r3, [r7, #16]
 2745 0054 5B69     		ldr	r3, [r3, #20]
 2746              		.loc 1 1579 24
 2747 0056 FA69     		ldr	r2, [r7, #28]
 2748 0058 9A42     		cmp	r2, r3
 2749 005a ECDB     		blt	.L140
 2750 005c 00E0     		b	.L139
 2751              	.L144:
1576:Core/Src/SEGGER_RTT.c ****       break;
 2752              		.loc 1 1576 7
 2753 005e 00BF     		nop
 2754              	.L139:
1580:Core/Src/SEGGER_RTT.c ****   if (BufferIndex < pRTTCB->MaxNumDownBuffers) {
 2755              		.loc 1 1580 27
 2756 0060 3B69     		ldr	r3, [r7, #16]
 2757 0062 5B69     		ldr	r3, [r3, #20]
 2758              		.loc 1 1580 6
 2759 0064 FA69     		ldr	r2, [r7, #28]
 2760 0066 9A42     		cmp	r2, r3
 2761 0068 3EDA     		bge	.L141
1581:Core/Src/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].sName        = sName;
 2762              		.loc 1 1581 45
 2763 006a 3969     		ldr	r1, [r7, #16]
 2764 006c FA69     		ldr	r2, [r7, #28]
 2765 006e 1346     		mov	r3, r2
 2766 0070 5B00     		lsls	r3, r3, #1
 2767 0072 1344     		add	r3, r3, r2
 2768 0074 DB00     		lsls	r3, r3, #3
 2769 0076 0B44     		add	r3, r3, r1
 2770 0078 6033     		adds	r3, r3, #96
 2771 007a FA68     		ldr	r2, [r7, #12]
 2772 007c 1A60     		str	r2, [r3]
1582:Core/Src/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 77


 2773              		.loc 1 1582 45
 2774 007e 3969     		ldr	r1, [r7, #16]
 2775 0080 FA69     		ldr	r2, [r7, #28]
 2776 0082 1346     		mov	r3, r2
 2777 0084 5B00     		lsls	r3, r3, #1
 2778 0086 1344     		add	r3, r3, r2
 2779 0088 DB00     		lsls	r3, r3, #3
 2780 008a 0B44     		add	r3, r3, r1
 2781 008c 6433     		adds	r3, r3, #100
 2782 008e BA68     		ldr	r2, [r7, #8]
 2783 0090 1A60     		str	r2, [r3]
1583:Core/Src/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 2784              		.loc 1 1583 45
 2785 0092 3969     		ldr	r1, [r7, #16]
 2786 0094 FA69     		ldr	r2, [r7, #28]
 2787 0096 1346     		mov	r3, r2
 2788 0098 5B00     		lsls	r3, r3, #1
 2789 009a 1344     		add	r3, r3, r2
 2790 009c DB00     		lsls	r3, r3, #3
 2791 009e 0B44     		add	r3, r3, r1
 2792 00a0 6833     		adds	r3, r3, #104
 2793 00a2 7A68     		ldr	r2, [r7, #4]
 2794 00a4 1A60     		str	r2, [r3]
1584:Core/Src/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 2795              		.loc 1 1584 45
 2796 00a6 3969     		ldr	r1, [r7, #16]
 2797 00a8 FA69     		ldr	r2, [r7, #28]
 2798 00aa 1346     		mov	r3, r2
 2799 00ac 5B00     		lsls	r3, r3, #1
 2800 00ae 1344     		add	r3, r3, r2
 2801 00b0 DB00     		lsls	r3, r3, #3
 2802 00b2 0B44     		add	r3, r3, r1
 2803 00b4 7033     		adds	r3, r3, #112
 2804 00b6 0022     		movs	r2, #0
 2805 00b8 1A60     		str	r2, [r3]
1585:Core/Src/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 2806              		.loc 1 1585 45
 2807 00ba 3969     		ldr	r1, [r7, #16]
 2808 00bc FA69     		ldr	r2, [r7, #28]
 2809 00be 1346     		mov	r3, r2
 2810 00c0 5B00     		lsls	r3, r3, #1
 2811 00c2 1344     		add	r3, r3, r2
 2812 00c4 DB00     		lsls	r3, r3, #3
 2813 00c6 0B44     		add	r3, r3, r1
 2814 00c8 6C33     		adds	r3, r3, #108
 2815 00ca 0022     		movs	r2, #0
 2816 00cc 1A60     		str	r2, [r3]
1586:Core/Src/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].Flags        = Flags;
 2817              		.loc 1 1586 45
 2818 00ce 3969     		ldr	r1, [r7, #16]
 2819 00d0 FA69     		ldr	r2, [r7, #28]
 2820 00d2 1346     		mov	r3, r2
 2821 00d4 5B00     		lsls	r3, r3, #1
 2822 00d6 1344     		add	r3, r3, r2
 2823 00d8 DB00     		lsls	r3, r3, #3
 2824 00da 0B44     		add	r3, r3, r1
 2825 00dc 7433     		adds	r3, r3, #116
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 78


 2826 00de 3A68     		ldr	r2, [r7]
 2827 00e0 1A60     		str	r2, [r3]
1587:Core/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 2828              		.loc 1 1587 5
 2829              		.syntax unified
 2830              	@ 1587 "Core/Src/SEGGER_RTT.c" 1
 2831 00e2 BFF35F8F 		dmb
 2832              	
 2833              	@ 0 "" 2
 2834              		.thumb
 2835              		.syntax unified
 2836 00e6 02E0     		b	.L142
 2837              	.L141:
1588:Core/Src/SEGGER_RTT.c ****   } else {
1589:Core/Src/SEGGER_RTT.c ****     BufferIndex = -1;
 2838              		.loc 1 1589 17
 2839 00e8 4FF0FF33 		mov	r3, #-1
 2840 00ec FB61     		str	r3, [r7, #28]
 2841              	.L142:
1590:Core/Src/SEGGER_RTT.c ****   }
1591:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 2842              		.loc 1 1591 3
 2843 00ee 7B69     		ldr	r3, [r7, #20]
 2844              		.syntax unified
 2845              	@ 1591 "Core/Src/SEGGER_RTT.c" 1
 2846 00f0 83F31188 		msr   basepri, r3  
 2847              		
 2848              	@ 0 "" 2
 2849              		.thumb
 2850              		.syntax unified
 2851              	.LBE16:
1592:Core/Src/SEGGER_RTT.c ****   return BufferIndex;
 2852              		.loc 1 1592 10
 2853 00f4 FB69     		ldr	r3, [r7, #28]
1593:Core/Src/SEGGER_RTT.c **** }
 2854              		.loc 1 1593 1
 2855 00f6 1846     		mov	r0, r3
 2856 00f8 2037     		adds	r7, r7, #32
 2857              	.LCFI122:
 2858              		.cfi_def_cfa_offset 8
 2859 00fa BD46     		mov	sp, r7
 2860              	.LCFI123:
 2861              		.cfi_def_cfa_register 13
 2862              		@ sp needed
 2863 00fc 80BD     		pop	{r7, pc}
 2864              	.L146:
 2865 00fe 00BF     		.align	2
 2866              	.L145:
 2867 0100 00000000 		.word	_SEGGER_RTT
 2868              		.cfi_endproc
 2869              	.LFE23:
 2871              		.section	.text.SEGGER_RTT_AllocUpBuffer,"ax",%progbits
 2872              		.align	1
 2873              		.global	SEGGER_RTT_AllocUpBuffer
 2874              		.syntax unified
 2875              		.thumb
 2876              		.thumb_func
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 79


 2878              	SEGGER_RTT_AllocUpBuffer:
 2879              	.LFB24:
1594:Core/Src/SEGGER_RTT.c **** 
1595:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1596:Core/Src/SEGGER_RTT.c **** *
1597:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_AllocUpBuffer
1598:Core/Src/SEGGER_RTT.c **** *
1599:Core/Src/SEGGER_RTT.c **** *  Function description
1600:Core/Src/SEGGER_RTT.c **** *    Run-time configuration of the next up-buffer (T->H).
1601:Core/Src/SEGGER_RTT.c **** *    The next buffer, which is not used yet is configured.
1602:Core/Src/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1603:Core/Src/SEGGER_RTT.c **** *
1604:Core/Src/SEGGER_RTT.c **** *  Parameters
1605:Core/Src/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1606:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1607:Core/Src/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1608:Core/Src/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1609:Core/Src/SEGGER_RTT.c **** *                 Flags[31:24] are used for validity check and must be zero. Flags[23:2] are reserv
1610:Core/Src/SEGGER_RTT.c **** *
1611:Core/Src/SEGGER_RTT.c **** *  Return value
1612:Core/Src/SEGGER_RTT.c **** *    >= 0 - O.K. Buffer Index
1613:Core/Src/SEGGER_RTT.c **** *     < 0 - Error
1614:Core/Src/SEGGER_RTT.c **** */
1615:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags)
 2880              		.loc 1 1615 101
 2881              		.cfi_startproc
 2882              		@ args = 0, pretend = 0, frame = 32
 2883              		@ frame_needed = 1, uses_anonymous_args = 0
 2884 0000 80B5     		push	{r7, lr}
 2885              	.LCFI124:
 2886              		.cfi_def_cfa_offset 8
 2887              		.cfi_offset 7, -8
 2888              		.cfi_offset 14, -4
 2889 0002 88B0     		sub	sp, sp, #32
 2890              	.LCFI125:
 2891              		.cfi_def_cfa_offset 40
 2892 0004 00AF     		add	r7, sp, #0
 2893              	.LCFI126:
 2894              		.cfi_def_cfa_register 7
 2895 0006 F860     		str	r0, [r7, #12]
 2896 0008 B960     		str	r1, [r7, #8]
 2897 000a 7A60     		str	r2, [r7, #4]
 2898 000c 3B60     		str	r3, [r7]
 2899              	.LBB17:
1616:Core/Src/SEGGER_RTT.c ****   int BufferIndex;
1617:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
1618:Core/Src/SEGGER_RTT.c **** 
1619:Core/Src/SEGGER_RTT.c ****   INIT();
 2900              		.loc 1 1619 3
 2901 000e 3D4B     		ldr	r3, .L156
 2902 0010 BB61     		str	r3, [r7, #24]
 2903 0012 BB69     		ldr	r3, [r7, #24]
 2904 0014 1B78     		ldrb	r3, [r3]
 2905 0016 DBB2     		uxtb	r3, r3
 2906 0018 532B     		cmp	r3, #83
 2907 001a 01D0     		beq	.L148
 2908              		.loc 1 1619 3 is_stmt 0 discriminator 1
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 80


 2909 001c FFF7FEFF 		bl	_DoInit
 2910              	.L148:
 2911              	.LBE17:
 2912              	.LBB18:
1620:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2913              		.loc 1 1620 3 is_stmt 1
 2914              		.syntax unified
 2915              	@ 1620 "Core/Src/SEGGER_RTT.c" 1
 2916 0020 EFF31183 		mrs   r3, basepri  
 2917 0024 4FF02001 		mov   r1, #32       
 2918 0028 81F31188 		msr   basepri, r1  
 2919              		
 2920              	@ 0 "" 2
 2921              		.thumb
 2922              		.syntax unified
 2923 002c 7B61     		str	r3, [r7, #20]
1621:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access
 2924              		.loc 1 1621 10
 2925 002e 354B     		ldr	r3, .L156
 2926 0030 3B61     		str	r3, [r7, #16]
1622:Core/Src/SEGGER_RTT.c ****   BufferIndex = 0;
 2927              		.loc 1 1622 15
 2928 0032 0023     		movs	r3, #0
 2929 0034 FB61     		str	r3, [r7, #28]
 2930              	.L151:
1623:Core/Src/SEGGER_RTT.c ****   do {
1624:Core/Src/SEGGER_RTT.c ****     if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 2931              		.loc 1 1624 33
 2932 0036 3969     		ldr	r1, [r7, #16]
 2933 0038 FB69     		ldr	r3, [r7, #28]
 2934 003a 5A1C     		adds	r2, r3, #1
 2935 003c 1346     		mov	r3, r2
 2936 003e 5B00     		lsls	r3, r3, #1
 2937 0040 1344     		add	r3, r3, r2
 2938 0042 DB00     		lsls	r3, r3, #3
 2939 0044 0B44     		add	r3, r3, r1
 2940 0046 0433     		adds	r3, r3, #4
 2941 0048 1B68     		ldr	r3, [r3]
 2942              		.loc 1 1624 8
 2943 004a 002B     		cmp	r3, #0
 2944 004c 08D0     		beq	.L155
1625:Core/Src/SEGGER_RTT.c ****       break;
1626:Core/Src/SEGGER_RTT.c ****     }
1627:Core/Src/SEGGER_RTT.c ****     BufferIndex++;
 2945              		.loc 1 1627 16
 2946 004e FB69     		ldr	r3, [r7, #28]
 2947 0050 0133     		adds	r3, r3, #1
 2948 0052 FB61     		str	r3, [r7, #28]
1628:Core/Src/SEGGER_RTT.c ****   } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 2949              		.loc 1 1628 32
 2950 0054 3B69     		ldr	r3, [r7, #16]
 2951 0056 1B69     		ldr	r3, [r3, #16]
 2952              		.loc 1 1628 24
 2953 0058 FA69     		ldr	r2, [r7, #28]
 2954 005a 9A42     		cmp	r2, r3
 2955 005c EBDB     		blt	.L151
 2956 005e 00E0     		b	.L150
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 81


 2957              	.L155:
1625:Core/Src/SEGGER_RTT.c ****       break;
 2958              		.loc 1 1625 7
 2959 0060 00BF     		nop
 2960              	.L150:
1629:Core/Src/SEGGER_RTT.c ****   if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 2961              		.loc 1 1629 27
 2962 0062 3B69     		ldr	r3, [r7, #16]
 2963 0064 1B69     		ldr	r3, [r3, #16]
 2964              		.loc 1 1629 6
 2965 0066 FA69     		ldr	r2, [r7, #28]
 2966 0068 9A42     		cmp	r2, r3
 2967 006a 3FDA     		bge	.L152
1630:Core/Src/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].sName        = sName;
 2968              		.loc 1 1630 43
 2969 006c 3969     		ldr	r1, [r7, #16]
 2970 006e FB69     		ldr	r3, [r7, #28]
 2971 0070 5A1C     		adds	r2, r3, #1
 2972 0072 1346     		mov	r3, r2
 2973 0074 5B00     		lsls	r3, r3, #1
 2974 0076 1344     		add	r3, r3, r2
 2975 0078 DB00     		lsls	r3, r3, #3
 2976 007a 0B44     		add	r3, r3, r1
 2977 007c FA68     		ldr	r2, [r7, #12]
 2978 007e 1A60     		str	r2, [r3]
1631:Core/Src/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 2979              		.loc 1 1631 43
 2980 0080 3969     		ldr	r1, [r7, #16]
 2981 0082 FB69     		ldr	r3, [r7, #28]
 2982 0084 5A1C     		adds	r2, r3, #1
 2983 0086 1346     		mov	r3, r2
 2984 0088 5B00     		lsls	r3, r3, #1
 2985 008a 1344     		add	r3, r3, r2
 2986 008c DB00     		lsls	r3, r3, #3
 2987 008e 0B44     		add	r3, r3, r1
 2988 0090 0433     		adds	r3, r3, #4
 2989 0092 BA68     		ldr	r2, [r7, #8]
 2990 0094 1A60     		str	r2, [r3]
1632:Core/Src/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 2991              		.loc 1 1632 43
 2992 0096 3969     		ldr	r1, [r7, #16]
 2993 0098 FA69     		ldr	r2, [r7, #28]
 2994 009a 1346     		mov	r3, r2
 2995 009c 5B00     		lsls	r3, r3, #1
 2996 009e 1344     		add	r3, r3, r2
 2997 00a0 DB00     		lsls	r3, r3, #3
 2998 00a2 0B44     		add	r3, r3, r1
 2999 00a4 2033     		adds	r3, r3, #32
 3000 00a6 7A68     		ldr	r2, [r7, #4]
 3001 00a8 1A60     		str	r2, [r3]
1633:Core/Src/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 3002              		.loc 1 1633 43
 3003 00aa 3969     		ldr	r1, [r7, #16]
 3004 00ac FA69     		ldr	r2, [r7, #28]
 3005 00ae 1346     		mov	r3, r2
 3006 00b0 5B00     		lsls	r3, r3, #1
 3007 00b2 1344     		add	r3, r3, r2
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 82


 3008 00b4 DB00     		lsls	r3, r3, #3
 3009 00b6 0B44     		add	r3, r3, r1
 3010 00b8 2833     		adds	r3, r3, #40
 3011 00ba 0022     		movs	r2, #0
 3012 00bc 1A60     		str	r2, [r3]
1634:Core/Src/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 3013              		.loc 1 1634 43
 3014 00be 3969     		ldr	r1, [r7, #16]
 3015 00c0 FA69     		ldr	r2, [r7, #28]
 3016 00c2 1346     		mov	r3, r2
 3017 00c4 5B00     		lsls	r3, r3, #1
 3018 00c6 1344     		add	r3, r3, r2
 3019 00c8 DB00     		lsls	r3, r3, #3
 3020 00ca 0B44     		add	r3, r3, r1
 3021 00cc 2433     		adds	r3, r3, #36
 3022 00ce 0022     		movs	r2, #0
 3023 00d0 1A60     		str	r2, [r3]
1635:Core/Src/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].Flags        = Flags;
 3024              		.loc 1 1635 43
 3025 00d2 3969     		ldr	r1, [r7, #16]
 3026 00d4 FA69     		ldr	r2, [r7, #28]
 3027 00d6 1346     		mov	r3, r2
 3028 00d8 5B00     		lsls	r3, r3, #1
 3029 00da 1344     		add	r3, r3, r2
 3030 00dc DB00     		lsls	r3, r3, #3
 3031 00de 0B44     		add	r3, r3, r1
 3032 00e0 2C33     		adds	r3, r3, #44
 3033 00e2 3A68     		ldr	r2, [r7]
 3034 00e4 1A60     		str	r2, [r3]
1636:Core/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 3035              		.loc 1 1636 5
 3036              		.syntax unified
 3037              	@ 1636 "Core/Src/SEGGER_RTT.c" 1
 3038 00e6 BFF35F8F 		dmb
 3039              	
 3040              	@ 0 "" 2
 3041              		.thumb
 3042              		.syntax unified
 3043 00ea 02E0     		b	.L153
 3044              	.L152:
1637:Core/Src/SEGGER_RTT.c ****   } else {
1638:Core/Src/SEGGER_RTT.c ****     BufferIndex = -1;
 3045              		.loc 1 1638 17
 3046 00ec 4FF0FF33 		mov	r3, #-1
 3047 00f0 FB61     		str	r3, [r7, #28]
 3048              	.L153:
1639:Core/Src/SEGGER_RTT.c ****   }
1640:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 3049              		.loc 1 1640 3
 3050 00f2 7B69     		ldr	r3, [r7, #20]
 3051              		.syntax unified
 3052              	@ 1640 "Core/Src/SEGGER_RTT.c" 1
 3053 00f4 83F31188 		msr   basepri, r3  
 3054              		
 3055              	@ 0 "" 2
 3056              		.thumb
 3057              		.syntax unified
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 83


 3058              	.LBE18:
1641:Core/Src/SEGGER_RTT.c ****   return BufferIndex;
 3059              		.loc 1 1641 10
 3060 00f8 FB69     		ldr	r3, [r7, #28]
1642:Core/Src/SEGGER_RTT.c **** }
 3061              		.loc 1 1642 1
 3062 00fa 1846     		mov	r0, r3
 3063 00fc 2037     		adds	r7, r7, #32
 3064              	.LCFI127:
 3065              		.cfi_def_cfa_offset 8
 3066 00fe BD46     		mov	sp, r7
 3067              	.LCFI128:
 3068              		.cfi_def_cfa_register 13
 3069              		@ sp needed
 3070 0100 80BD     		pop	{r7, pc}
 3071              	.L157:
 3072 0102 00BF     		.align	2
 3073              	.L156:
 3074 0104 00000000 		.word	_SEGGER_RTT
 3075              		.cfi_endproc
 3076              	.LFE24:
 3078              		.section	.text.SEGGER_RTT_ConfigUpBuffer,"ax",%progbits
 3079              		.align	1
 3080              		.global	SEGGER_RTT_ConfigUpBuffer
 3081              		.syntax unified
 3082              		.thumb
 3083              		.thumb_func
 3085              	SEGGER_RTT_ConfigUpBuffer:
 3086              	.LFB25:
1643:Core/Src/SEGGER_RTT.c **** 
1644:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1645:Core/Src/SEGGER_RTT.c **** *
1646:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_ConfigUpBuffer
1647:Core/Src/SEGGER_RTT.c **** *
1648:Core/Src/SEGGER_RTT.c **** *  Function description
1649:Core/Src/SEGGER_RTT.c **** *    Run-time configuration of a specific up-buffer (T->H).
1650:Core/Src/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1651:Core/Src/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1652:Core/Src/SEGGER_RTT.c **** *
1653:Core/Src/SEGGER_RTT.c **** *  Parameters
1654:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to configure.
1655:Core/Src/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1656:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1657:Core/Src/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1658:Core/Src/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1659:Core/Src/SEGGER_RTT.c **** *                 Flags[31:24] are used for validity check and must be zero. Flags[23:2] are reserv
1660:Core/Src/SEGGER_RTT.c **** *
1661:Core/Src/SEGGER_RTT.c **** *  Return value
1662:Core/Src/SEGGER_RTT.c **** *    >= 0 - O.K.
1663:Core/Src/SEGGER_RTT.c **** *     < 0 - Error
1664:Core/Src/SEGGER_RTT.c **** *
1665:Core/Src/SEGGER_RTT.c **** *  Additional information
1666:Core/Src/SEGGER_RTT.c **** *    Buffer 0 is configured on compile-time.
1667:Core/Src/SEGGER_RTT.c **** *    May only be called once per buffer.
1668:Core/Src/SEGGER_RTT.c **** *    Buffer name and flags can be reconfigured using the appropriate functions.
1669:Core/Src/SEGGER_RTT.c **** */
1670:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned Buff
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 84


 3087              		.loc 1 1670 124
 3088              		.cfi_startproc
 3089              		@ args = 4, pretend = 0, frame = 40
 3090              		@ frame_needed = 1, uses_anonymous_args = 0
 3091 0000 80B5     		push	{r7, lr}
 3092              	.LCFI129:
 3093              		.cfi_def_cfa_offset 8
 3094              		.cfi_offset 7, -8
 3095              		.cfi_offset 14, -4
 3096 0002 8AB0     		sub	sp, sp, #40
 3097              	.LCFI130:
 3098              		.cfi_def_cfa_offset 48
 3099 0004 00AF     		add	r7, sp, #0
 3100              	.LCFI131:
 3101              		.cfi_def_cfa_register 7
 3102 0006 F860     		str	r0, [r7, #12]
 3103 0008 B960     		str	r1, [r7, #8]
 3104 000a 7A60     		str	r2, [r7, #4]
 3105 000c 3B60     		str	r3, [r7]
 3106              	.LBB19:
1671:Core/Src/SEGGER_RTT.c ****   int r;
1672:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
1673:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_UP* pUp;
1674:Core/Src/SEGGER_RTT.c **** 
1675:Core/Src/SEGGER_RTT.c ****   INIT();
 3107              		.loc 1 1675 3
 3108 000e 204B     		ldr	r3, .L164
 3109 0010 3B62     		str	r3, [r7, #32]
 3110 0012 3B6A     		ldr	r3, [r7, #32]
 3111 0014 1B78     		ldrb	r3, [r3]
 3112 0016 DBB2     		uxtb	r3, r3
 3113 0018 532B     		cmp	r3, #83
 3114 001a 01D0     		beq	.L159
 3115              		.loc 1 1675 3 is_stmt 0 discriminator 1
 3116 001c FFF7FEFF 		bl	_DoInit
 3117              	.L159:
 3118              	.LBE19:
1676:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access
 3119              		.loc 1 1676 10 is_stmt 1
 3120 0020 1B4B     		ldr	r3, .L164
 3121 0022 FB61     		str	r3, [r7, #28]
1677:Core/Src/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_UP_BUFFERS) {
 3122              		.loc 1 1677 6
 3123 0024 FB68     		ldr	r3, [r7, #12]
 3124 0026 022B     		cmp	r3, #2
 3125 0028 2AD8     		bhi	.L160
 3126              	.LBB20:
1678:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3127              		.loc 1 1678 5
 3128              		.syntax unified
 3129              	@ 1678 "Core/Src/SEGGER_RTT.c" 1
 3130 002a EFF31183 		mrs   r3, basepri  
 3131 002e 4FF02001 		mov   r1, #32       
 3132 0032 81F31188 		msr   basepri, r1  
 3133              		
 3134              	@ 0 "" 2
 3135              		.thumb
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 85


 3136              		.syntax unified
 3137 0036 BB61     		str	r3, [r7, #24]
1679:Core/Src/SEGGER_RTT.c ****     pUp = &pRTTCB->aUp[BufferIndex];
 3138              		.loc 1 1679 9
 3139 0038 FB68     		ldr	r3, [r7, #12]
 3140 003a 5A1C     		adds	r2, r3, #1
 3141 003c 1346     		mov	r3, r2
 3142 003e 5B00     		lsls	r3, r3, #1
 3143 0040 1344     		add	r3, r3, r2
 3144 0042 DB00     		lsls	r3, r3, #3
 3145 0044 FA69     		ldr	r2, [r7, #28]
 3146 0046 1344     		add	r3, r3, r2
 3147 0048 7B61     		str	r3, [r7, #20]
1680:Core/Src/SEGGER_RTT.c ****     if (BufferIndex) {
 3148              		.loc 1 1680 8
 3149 004a FB68     		ldr	r3, [r7, #12]
 3150 004c 002B     		cmp	r3, #0
 3151 004e 0ED0     		beq	.L161
1681:Core/Src/SEGGER_RTT.c ****       pUp->sName        = sName;
 3152              		.loc 1 1681 25
 3153 0050 7B69     		ldr	r3, [r7, #20]
 3154 0052 BA68     		ldr	r2, [r7, #8]
 3155 0054 1A60     		str	r2, [r3]
1682:Core/Src/SEGGER_RTT.c ****       pUp->pBuffer      = (char*)pBuffer;
 3156              		.loc 1 1682 25
 3157 0056 7B69     		ldr	r3, [r7, #20]
 3158 0058 7A68     		ldr	r2, [r7, #4]
 3159 005a 5A60     		str	r2, [r3, #4]
1683:Core/Src/SEGGER_RTT.c ****       pUp->SizeOfBuffer = BufferSize;
 3160              		.loc 1 1683 25
 3161 005c 7B69     		ldr	r3, [r7, #20]
 3162 005e 3A68     		ldr	r2, [r7]
 3163 0060 9A60     		str	r2, [r3, #8]
1684:Core/Src/SEGGER_RTT.c ****       pUp->RdOff        = 0u;
 3164              		.loc 1 1684 25
 3165 0062 7B69     		ldr	r3, [r7, #20]
 3166 0064 0022     		movs	r2, #0
 3167 0066 1A61     		str	r2, [r3, #16]
1685:Core/Src/SEGGER_RTT.c ****       pUp->WrOff        = 0u;
 3168              		.loc 1 1685 25
 3169 0068 7B69     		ldr	r3, [r7, #20]
 3170 006a 0022     		movs	r2, #0
 3171 006c DA60     		str	r2, [r3, #12]
 3172              	.L161:
1686:Core/Src/SEGGER_RTT.c ****     }
1687:Core/Src/SEGGER_RTT.c ****     pUp->Flags          = Flags;
 3173              		.loc 1 1687 25
 3174 006e 7B69     		ldr	r3, [r7, #20]
 3175 0070 3A6B     		ldr	r2, [r7, #48]
 3176 0072 5A61     		str	r2, [r3, #20]
1688:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3177              		.loc 1 1688 5
 3178 0074 BB69     		ldr	r3, [r7, #24]
 3179              		.syntax unified
 3180              	@ 1688 "Core/Src/SEGGER_RTT.c" 1
 3181 0076 83F31188 		msr   basepri, r3  
 3182              		
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 86


 3183              	@ 0 "" 2
 3184              		.thumb
 3185              		.syntax unified
 3186              	.LBE20:
1689:Core/Src/SEGGER_RTT.c ****     r =  0;
 3187              		.loc 1 1689 7
 3188 007a 0023     		movs	r3, #0
 3189 007c 7B62     		str	r3, [r7, #36]
 3190 007e 02E0     		b	.L162
 3191              	.L160:
1690:Core/Src/SEGGER_RTT.c ****   } else {
1691:Core/Src/SEGGER_RTT.c ****     r = -1;
 3192              		.loc 1 1691 7
 3193 0080 4FF0FF33 		mov	r3, #-1
 3194 0084 7B62     		str	r3, [r7, #36]
 3195              	.L162:
1692:Core/Src/SEGGER_RTT.c ****   }
1693:Core/Src/SEGGER_RTT.c ****   return r;
 3196              		.loc 1 1693 10
 3197 0086 7B6A     		ldr	r3, [r7, #36]
1694:Core/Src/SEGGER_RTT.c **** }
 3198              		.loc 1 1694 1
 3199 0088 1846     		mov	r0, r3
 3200 008a 2837     		adds	r7, r7, #40
 3201              	.LCFI132:
 3202              		.cfi_def_cfa_offset 8
 3203 008c BD46     		mov	sp, r7
 3204              	.LCFI133:
 3205              		.cfi_def_cfa_register 13
 3206              		@ sp needed
 3207 008e 80BD     		pop	{r7, pc}
 3208              	.L165:
 3209              		.align	2
 3210              	.L164:
 3211 0090 00000000 		.word	_SEGGER_RTT
 3212              		.cfi_endproc
 3213              	.LFE25:
 3215              		.section	.text.SEGGER_RTT_ConfigDownBuffer,"ax",%progbits
 3216              		.align	1
 3217              		.global	SEGGER_RTT_ConfigDownBuffer
 3218              		.syntax unified
 3219              		.thumb
 3220              		.thumb_func
 3222              	SEGGER_RTT_ConfigDownBuffer:
 3223              	.LFB26:
1695:Core/Src/SEGGER_RTT.c **** 
1696:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1697:Core/Src/SEGGER_RTT.c **** *
1698:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_ConfigDownBuffer
1699:Core/Src/SEGGER_RTT.c **** *
1700:Core/Src/SEGGER_RTT.c **** *  Function description
1701:Core/Src/SEGGER_RTT.c **** *    Run-time configuration of a specific down-buffer (H->T).
1702:Core/Src/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1703:Core/Src/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1704:Core/Src/SEGGER_RTT.c **** *
1705:Core/Src/SEGGER_RTT.c **** *  Parameters
1706:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to configure.
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 87


1707:Core/Src/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1708:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1709:Core/Src/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1710:Core/Src/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1711:Core/Src/SEGGER_RTT.c **** *                 Flags[31:24] are used for validity check and must be zero. Flags[23:2] are reserv
1712:Core/Src/SEGGER_RTT.c **** *
1713:Core/Src/SEGGER_RTT.c **** *  Return value
1714:Core/Src/SEGGER_RTT.c **** *    >= 0  O.K.
1715:Core/Src/SEGGER_RTT.c **** *     < 0  Error
1716:Core/Src/SEGGER_RTT.c **** *
1717:Core/Src/SEGGER_RTT.c **** *  Additional information
1718:Core/Src/SEGGER_RTT.c **** *    Buffer 0 is configured on compile-time.
1719:Core/Src/SEGGER_RTT.c **** *    May only be called once per buffer.
1720:Core/Src/SEGGER_RTT.c **** *    Buffer name and flags can be reconfigured using the appropriate functions.
1721:Core/Src/SEGGER_RTT.c **** */
1722:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned Bu
 3224              		.loc 1 1722 126
 3225              		.cfi_startproc
 3226              		@ args = 4, pretend = 0, frame = 40
 3227              		@ frame_needed = 1, uses_anonymous_args = 0
 3228 0000 80B5     		push	{r7, lr}
 3229              	.LCFI134:
 3230              		.cfi_def_cfa_offset 8
 3231              		.cfi_offset 7, -8
 3232              		.cfi_offset 14, -4
 3233 0002 8AB0     		sub	sp, sp, #40
 3234              	.LCFI135:
 3235              		.cfi_def_cfa_offset 48
 3236 0004 00AF     		add	r7, sp, #0
 3237              	.LCFI136:
 3238              		.cfi_def_cfa_register 7
 3239 0006 F860     		str	r0, [r7, #12]
 3240 0008 B960     		str	r1, [r7, #8]
 3241 000a 7A60     		str	r2, [r7, #4]
 3242 000c 3B60     		str	r3, [r7]
 3243              	.LBB21:
1723:Core/Src/SEGGER_RTT.c ****   int r;
1724:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
1725:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_DOWN* pDown;
1726:Core/Src/SEGGER_RTT.c **** 
1727:Core/Src/SEGGER_RTT.c ****   INIT();
 3244              		.loc 1 1727 3
 3245 000e 214B     		ldr	r3, .L172
 3246 0010 3B62     		str	r3, [r7, #32]
 3247 0012 3B6A     		ldr	r3, [r7, #32]
 3248 0014 1B78     		ldrb	r3, [r3]
 3249 0016 DBB2     		uxtb	r3, r3
 3250 0018 532B     		cmp	r3, #83
 3251 001a 01D0     		beq	.L167
 3252              		.loc 1 1727 3 is_stmt 0 discriminator 1
 3253 001c FFF7FEFF 		bl	_DoInit
 3254              	.L167:
 3255              	.LBE21:
1728:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access
 3256              		.loc 1 1728 10 is_stmt 1
 3257 0020 1C4B     		ldr	r3, .L172
 3258 0022 FB61     		str	r3, [r7, #28]
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 88


1729:Core/Src/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 3259              		.loc 1 1729 6
 3260 0024 FB68     		ldr	r3, [r7, #12]
 3261 0026 022B     		cmp	r3, #2
 3262 0028 2CD8     		bhi	.L168
 3263              	.LBB22:
1730:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3264              		.loc 1 1730 5
 3265              		.syntax unified
 3266              	@ 1730 "Core/Src/SEGGER_RTT.c" 1
 3267 002a EFF31183 		mrs   r3, basepri  
 3268 002e 4FF02001 		mov   r1, #32       
 3269 0032 81F31188 		msr   basepri, r1  
 3270              		
 3271              	@ 0 "" 2
 3272              		.thumb
 3273              		.syntax unified
 3274 0036 BB61     		str	r3, [r7, #24]
1731:Core/Src/SEGGER_RTT.c ****     pDown = &pRTTCB->aDown[BufferIndex];
 3275              		.loc 1 1731 11
 3276 0038 FA68     		ldr	r2, [r7, #12]
 3277 003a 1346     		mov	r3, r2
 3278 003c 5B00     		lsls	r3, r3, #1
 3279 003e 1344     		add	r3, r3, r2
 3280 0040 DB00     		lsls	r3, r3, #3
 3281 0042 6033     		adds	r3, r3, #96
 3282 0044 FA69     		ldr	r2, [r7, #28]
 3283 0046 1344     		add	r3, r3, r2
 3284 0048 7B61     		str	r3, [r7, #20]
1732:Core/Src/SEGGER_RTT.c ****     if (BufferIndex) {
 3285              		.loc 1 1732 8
 3286 004a FB68     		ldr	r3, [r7, #12]
 3287 004c 002B     		cmp	r3, #0
 3288 004e 0ED0     		beq	.L169
1733:Core/Src/SEGGER_RTT.c ****       pDown->sName        = sName;
 3289              		.loc 1 1733 27
 3290 0050 7B69     		ldr	r3, [r7, #20]
 3291 0052 BA68     		ldr	r2, [r7, #8]
 3292 0054 1A60     		str	r2, [r3]
1734:Core/Src/SEGGER_RTT.c ****       pDown->pBuffer      = (char*)pBuffer;
 3293              		.loc 1 1734 27
 3294 0056 7B69     		ldr	r3, [r7, #20]
 3295 0058 7A68     		ldr	r2, [r7, #4]
 3296 005a 5A60     		str	r2, [r3, #4]
1735:Core/Src/SEGGER_RTT.c ****       pDown->SizeOfBuffer = BufferSize;
 3297              		.loc 1 1735 27
 3298 005c 7B69     		ldr	r3, [r7, #20]
 3299 005e 3A68     		ldr	r2, [r7]
 3300 0060 9A60     		str	r2, [r3, #8]
1736:Core/Src/SEGGER_RTT.c ****       pDown->RdOff        = 0u;
 3301              		.loc 1 1736 27
 3302 0062 7B69     		ldr	r3, [r7, #20]
 3303 0064 0022     		movs	r2, #0
 3304 0066 1A61     		str	r2, [r3, #16]
1737:Core/Src/SEGGER_RTT.c ****       pDown->WrOff        = 0u;
 3305              		.loc 1 1737 27
 3306 0068 7B69     		ldr	r3, [r7, #20]
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 89


 3307 006a 0022     		movs	r2, #0
 3308 006c DA60     		str	r2, [r3, #12]
 3309              	.L169:
1738:Core/Src/SEGGER_RTT.c ****     }
1739:Core/Src/SEGGER_RTT.c ****     pDown->Flags          = Flags;
 3310              		.loc 1 1739 27
 3311 006e 7B69     		ldr	r3, [r7, #20]
 3312 0070 3A6B     		ldr	r2, [r7, #48]
 3313 0072 5A61     		str	r2, [r3, #20]
1740:Core/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 3314              		.loc 1 1740 5
 3315              		.syntax unified
 3316              	@ 1740 "Core/Src/SEGGER_RTT.c" 1
 3317 0074 BFF35F8F 		dmb
 3318              	
 3319              	@ 0 "" 2
1741:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3320              		.loc 1 1741 5
 3321              		.thumb
 3322              		.syntax unified
 3323 0078 BB69     		ldr	r3, [r7, #24]
 3324              		.syntax unified
 3325              	@ 1741 "Core/Src/SEGGER_RTT.c" 1
 3326 007a 83F31188 		msr   basepri, r3  
 3327              		
 3328              	@ 0 "" 2
 3329              		.thumb
 3330              		.syntax unified
 3331              	.LBE22:
1742:Core/Src/SEGGER_RTT.c ****     r =  0;
 3332              		.loc 1 1742 7
 3333 007e 0023     		movs	r3, #0
 3334 0080 7B62     		str	r3, [r7, #36]
 3335 0082 02E0     		b	.L170
 3336              	.L168:
1743:Core/Src/SEGGER_RTT.c ****   } else {
1744:Core/Src/SEGGER_RTT.c ****     r = -1;
 3337              		.loc 1 1744 7
 3338 0084 4FF0FF33 		mov	r3, #-1
 3339 0088 7B62     		str	r3, [r7, #36]
 3340              	.L170:
1745:Core/Src/SEGGER_RTT.c ****   }
1746:Core/Src/SEGGER_RTT.c ****   return r;
 3341              		.loc 1 1746 10
 3342 008a 7B6A     		ldr	r3, [r7, #36]
1747:Core/Src/SEGGER_RTT.c **** }
 3343              		.loc 1 1747 1
 3344 008c 1846     		mov	r0, r3
 3345 008e 2837     		adds	r7, r7, #40
 3346              	.LCFI137:
 3347              		.cfi_def_cfa_offset 8
 3348 0090 BD46     		mov	sp, r7
 3349              	.LCFI138:
 3350              		.cfi_def_cfa_register 13
 3351              		@ sp needed
 3352 0092 80BD     		pop	{r7, pc}
 3353              	.L173:
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 90


 3354              		.align	2
 3355              	.L172:
 3356 0094 00000000 		.word	_SEGGER_RTT
 3357              		.cfi_endproc
 3358              	.LFE26:
 3360              		.section	.text.SEGGER_RTT_SetNameUpBuffer,"ax",%progbits
 3361              		.align	1
 3362              		.global	SEGGER_RTT_SetNameUpBuffer
 3363              		.syntax unified
 3364              		.thumb
 3365              		.thumb_func
 3367              	SEGGER_RTT_SetNameUpBuffer:
 3368              	.LFB27:
1748:Core/Src/SEGGER_RTT.c **** 
1749:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1750:Core/Src/SEGGER_RTT.c **** *
1751:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_SetNameUpBuffer
1752:Core/Src/SEGGER_RTT.c **** *
1753:Core/Src/SEGGER_RTT.c **** *  Function description
1754:Core/Src/SEGGER_RTT.c **** *    Run-time configuration of a specific up-buffer name (T->H).
1755:Core/Src/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1756:Core/Src/SEGGER_RTT.c **** *
1757:Core/Src/SEGGER_RTT.c **** *  Parameters
1758:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to renamed.
1759:Core/Src/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1760:Core/Src/SEGGER_RTT.c **** *
1761:Core/Src/SEGGER_RTT.c **** *  Return value
1762:Core/Src/SEGGER_RTT.c **** *    >= 0  O.K.
1763:Core/Src/SEGGER_RTT.c **** *     < 0  Error
1764:Core/Src/SEGGER_RTT.c **** */
1765:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_SetNameUpBuffer(unsigned BufferIndex, const char* sName) {
 3369              		.loc 1 1765 73
 3370              		.cfi_startproc
 3371              		@ args = 0, pretend = 0, frame = 32
 3372              		@ frame_needed = 1, uses_anonymous_args = 0
 3373 0000 80B5     		push	{r7, lr}
 3374              	.LCFI139:
 3375              		.cfi_def_cfa_offset 8
 3376              		.cfi_offset 7, -8
 3377              		.cfi_offset 14, -4
 3378 0002 88B0     		sub	sp, sp, #32
 3379              	.LCFI140:
 3380              		.cfi_def_cfa_offset 40
 3381 0004 00AF     		add	r7, sp, #0
 3382              	.LCFI141:
 3383              		.cfi_def_cfa_register 7
 3384 0006 7860     		str	r0, [r7, #4]
 3385 0008 3960     		str	r1, [r7]
 3386              	.LBB23:
1766:Core/Src/SEGGER_RTT.c ****   int r;
1767:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
1768:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_UP* pUp;
1769:Core/Src/SEGGER_RTT.c **** 
1770:Core/Src/SEGGER_RTT.c ****   INIT();
 3387              		.loc 1 1770 3
 3388 000a 174B     		ldr	r3, .L179
 3389 000c BB61     		str	r3, [r7, #24]
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 91


 3390 000e BB69     		ldr	r3, [r7, #24]
 3391 0010 1B78     		ldrb	r3, [r3]
 3392 0012 DBB2     		uxtb	r3, r3
 3393 0014 532B     		cmp	r3, #83
 3394 0016 01D0     		beq	.L175
 3395              		.loc 1 1770 3 is_stmt 0 discriminator 1
 3396 0018 FFF7FEFF 		bl	_DoInit
 3397              	.L175:
 3398              	.LBE23:
1771:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access
 3399              		.loc 1 1771 10 is_stmt 1
 3400 001c 124B     		ldr	r3, .L179
 3401 001e 7B61     		str	r3, [r7, #20]
1772:Core/Src/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_UP_BUFFERS) {
 3402              		.loc 1 1772 6
 3403 0020 7B68     		ldr	r3, [r7, #4]
 3404 0022 022B     		cmp	r3, #2
 3405 0024 18D8     		bhi	.L176
 3406              	.LBB24:
1773:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3407              		.loc 1 1773 5
 3408              		.syntax unified
 3409              	@ 1773 "Core/Src/SEGGER_RTT.c" 1
 3410 0026 EFF31183 		mrs   r3, basepri  
 3411 002a 4FF02001 		mov   r1, #32       
 3412 002e 81F31188 		msr   basepri, r1  
 3413              		
 3414              	@ 0 "" 2
 3415              		.thumb
 3416              		.syntax unified
 3417 0032 3B61     		str	r3, [r7, #16]
1774:Core/Src/SEGGER_RTT.c ****     pUp = &pRTTCB->aUp[BufferIndex];
 3418              		.loc 1 1774 9
 3419 0034 7B68     		ldr	r3, [r7, #4]
 3420 0036 5A1C     		adds	r2, r3, #1
 3421 0038 1346     		mov	r3, r2
 3422 003a 5B00     		lsls	r3, r3, #1
 3423 003c 1344     		add	r3, r3, r2
 3424 003e DB00     		lsls	r3, r3, #3
 3425 0040 7A69     		ldr	r2, [r7, #20]
 3426 0042 1344     		add	r3, r3, r2
 3427 0044 FB60     		str	r3, [r7, #12]
1775:Core/Src/SEGGER_RTT.c ****     pUp->sName = sName;
 3428              		.loc 1 1775 16
 3429 0046 FB68     		ldr	r3, [r7, #12]
 3430 0048 3A68     		ldr	r2, [r7]
 3431 004a 1A60     		str	r2, [r3]
1776:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3432              		.loc 1 1776 5
 3433 004c 3B69     		ldr	r3, [r7, #16]
 3434              		.syntax unified
 3435              	@ 1776 "Core/Src/SEGGER_RTT.c" 1
 3436 004e 83F31188 		msr   basepri, r3  
 3437              		
 3438              	@ 0 "" 2
 3439              		.thumb
 3440              		.syntax unified
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 92


 3441              	.LBE24:
1777:Core/Src/SEGGER_RTT.c ****     r =  0;
 3442              		.loc 1 1777 7
 3443 0052 0023     		movs	r3, #0
 3444 0054 FB61     		str	r3, [r7, #28]
 3445 0056 02E0     		b	.L177
 3446              	.L176:
1778:Core/Src/SEGGER_RTT.c ****   } else {
1779:Core/Src/SEGGER_RTT.c ****     r = -1;
 3447              		.loc 1 1779 7
 3448 0058 4FF0FF33 		mov	r3, #-1
 3449 005c FB61     		str	r3, [r7, #28]
 3450              	.L177:
1780:Core/Src/SEGGER_RTT.c ****   }
1781:Core/Src/SEGGER_RTT.c ****   return r;
 3451              		.loc 1 1781 10
 3452 005e FB69     		ldr	r3, [r7, #28]
1782:Core/Src/SEGGER_RTT.c **** }
 3453              		.loc 1 1782 1
 3454 0060 1846     		mov	r0, r3
 3455 0062 2037     		adds	r7, r7, #32
 3456              	.LCFI142:
 3457              		.cfi_def_cfa_offset 8
 3458 0064 BD46     		mov	sp, r7
 3459              	.LCFI143:
 3460              		.cfi_def_cfa_register 13
 3461              		@ sp needed
 3462 0066 80BD     		pop	{r7, pc}
 3463              	.L180:
 3464              		.align	2
 3465              	.L179:
 3466 0068 00000000 		.word	_SEGGER_RTT
 3467              		.cfi_endproc
 3468              	.LFE27:
 3470              		.section	.text.SEGGER_RTT_SetNameDownBuffer,"ax",%progbits
 3471              		.align	1
 3472              		.global	SEGGER_RTT_SetNameDownBuffer
 3473              		.syntax unified
 3474              		.thumb
 3475              		.thumb_func
 3477              	SEGGER_RTT_SetNameDownBuffer:
 3478              	.LFB28:
1783:Core/Src/SEGGER_RTT.c **** 
1784:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1785:Core/Src/SEGGER_RTT.c **** *
1786:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_SetNameDownBuffer
1787:Core/Src/SEGGER_RTT.c **** *
1788:Core/Src/SEGGER_RTT.c **** *  Function description
1789:Core/Src/SEGGER_RTT.c **** *    Run-time configuration of a specific Down-buffer name (T->H).
1790:Core/Src/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1791:Core/Src/SEGGER_RTT.c **** *
1792:Core/Src/SEGGER_RTT.c **** *  Parameters
1793:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to renamed.
1794:Core/Src/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1795:Core/Src/SEGGER_RTT.c **** *
1796:Core/Src/SEGGER_RTT.c **** *  Return value
1797:Core/Src/SEGGER_RTT.c **** *    >= 0  O.K.
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 93


1798:Core/Src/SEGGER_RTT.c **** *     < 0  Error
1799:Core/Src/SEGGER_RTT.c **** */
1800:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_SetNameDownBuffer(unsigned BufferIndex, const char* sName) {
 3479              		.loc 1 1800 75
 3480              		.cfi_startproc
 3481              		@ args = 0, pretend = 0, frame = 32
 3482              		@ frame_needed = 1, uses_anonymous_args = 0
 3483 0000 80B5     		push	{r7, lr}
 3484              	.LCFI144:
 3485              		.cfi_def_cfa_offset 8
 3486              		.cfi_offset 7, -8
 3487              		.cfi_offset 14, -4
 3488 0002 88B0     		sub	sp, sp, #32
 3489              	.LCFI145:
 3490              		.cfi_def_cfa_offset 40
 3491 0004 00AF     		add	r7, sp, #0
 3492              	.LCFI146:
 3493              		.cfi_def_cfa_register 7
 3494 0006 7860     		str	r0, [r7, #4]
 3495 0008 3960     		str	r1, [r7]
 3496              	.LBB25:
1801:Core/Src/SEGGER_RTT.c ****   int r;
1802:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
1803:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_DOWN* pDown;
1804:Core/Src/SEGGER_RTT.c **** 
1805:Core/Src/SEGGER_RTT.c ****   INIT();
 3497              		.loc 1 1805 3
 3498 000a 174B     		ldr	r3, .L186
 3499 000c BB61     		str	r3, [r7, #24]
 3500 000e BB69     		ldr	r3, [r7, #24]
 3501 0010 1B78     		ldrb	r3, [r3]
 3502 0012 DBB2     		uxtb	r3, r3
 3503 0014 532B     		cmp	r3, #83
 3504 0016 01D0     		beq	.L182
 3505              		.loc 1 1805 3 is_stmt 0 discriminator 1
 3506 0018 FFF7FEFF 		bl	_DoInit
 3507              	.L182:
 3508              	.LBE25:
1806:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access
 3509              		.loc 1 1806 10 is_stmt 1
 3510 001c 124B     		ldr	r3, .L186
 3511 001e 7B61     		str	r3, [r7, #20]
1807:Core/Src/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 3512              		.loc 1 1807 6
 3513 0020 7B68     		ldr	r3, [r7, #4]
 3514 0022 022B     		cmp	r3, #2
 3515 0024 18D8     		bhi	.L183
 3516              	.LBB26:
1808:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3517              		.loc 1 1808 5
 3518              		.syntax unified
 3519              	@ 1808 "Core/Src/SEGGER_RTT.c" 1
 3520 0026 EFF31183 		mrs   r3, basepri  
 3521 002a 4FF02001 		mov   r1, #32       
 3522 002e 81F31188 		msr   basepri, r1  
 3523              		
 3524              	@ 0 "" 2
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 94


 3525              		.thumb
 3526              		.syntax unified
 3527 0032 3B61     		str	r3, [r7, #16]
1809:Core/Src/SEGGER_RTT.c ****     pDown = &pRTTCB->aDown[BufferIndex];
 3528              		.loc 1 1809 11
 3529 0034 7A68     		ldr	r2, [r7, #4]
 3530 0036 1346     		mov	r3, r2
 3531 0038 5B00     		lsls	r3, r3, #1
 3532 003a 1344     		add	r3, r3, r2
 3533 003c DB00     		lsls	r3, r3, #3
 3534 003e 6033     		adds	r3, r3, #96
 3535 0040 7A69     		ldr	r2, [r7, #20]
 3536 0042 1344     		add	r3, r3, r2
 3537 0044 FB60     		str	r3, [r7, #12]
1810:Core/Src/SEGGER_RTT.c ****     pDown->sName = sName;
 3538              		.loc 1 1810 18
 3539 0046 FB68     		ldr	r3, [r7, #12]
 3540 0048 3A68     		ldr	r2, [r7]
 3541 004a 1A60     		str	r2, [r3]
1811:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3542              		.loc 1 1811 5
 3543 004c 3B69     		ldr	r3, [r7, #16]
 3544              		.syntax unified
 3545              	@ 1811 "Core/Src/SEGGER_RTT.c" 1
 3546 004e 83F31188 		msr   basepri, r3  
 3547              		
 3548              	@ 0 "" 2
 3549              		.thumb
 3550              		.syntax unified
 3551              	.LBE26:
1812:Core/Src/SEGGER_RTT.c ****     r =  0;
 3552              		.loc 1 1812 7
 3553 0052 0023     		movs	r3, #0
 3554 0054 FB61     		str	r3, [r7, #28]
 3555 0056 02E0     		b	.L184
 3556              	.L183:
1813:Core/Src/SEGGER_RTT.c ****   } else {
1814:Core/Src/SEGGER_RTT.c ****     r = -1;
 3557              		.loc 1 1814 7
 3558 0058 4FF0FF33 		mov	r3, #-1
 3559 005c FB61     		str	r3, [r7, #28]
 3560              	.L184:
1815:Core/Src/SEGGER_RTT.c ****   }
1816:Core/Src/SEGGER_RTT.c ****   return r;
 3561              		.loc 1 1816 10
 3562 005e FB69     		ldr	r3, [r7, #28]
1817:Core/Src/SEGGER_RTT.c **** }
 3563              		.loc 1 1817 1
 3564 0060 1846     		mov	r0, r3
 3565 0062 2037     		adds	r7, r7, #32
 3566              	.LCFI147:
 3567              		.cfi_def_cfa_offset 8
 3568 0064 BD46     		mov	sp, r7
 3569              	.LCFI148:
 3570              		.cfi_def_cfa_register 13
 3571              		@ sp needed
 3572 0066 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 95


 3573              	.L187:
 3574              		.align	2
 3575              	.L186:
 3576 0068 00000000 		.word	_SEGGER_RTT
 3577              		.cfi_endproc
 3578              	.LFE28:
 3580              		.section	.text.SEGGER_RTT_SetFlagsUpBuffer,"ax",%progbits
 3581              		.align	1
 3582              		.global	SEGGER_RTT_SetFlagsUpBuffer
 3583              		.syntax unified
 3584              		.thumb
 3585              		.thumb_func
 3587              	SEGGER_RTT_SetFlagsUpBuffer:
 3588              	.LFB29:
1818:Core/Src/SEGGER_RTT.c **** 
1819:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1820:Core/Src/SEGGER_RTT.c **** *
1821:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_SetFlagsUpBuffer
1822:Core/Src/SEGGER_RTT.c **** *
1823:Core/Src/SEGGER_RTT.c **** *  Function description
1824:Core/Src/SEGGER_RTT.c **** *    Run-time configuration of specific up-buffer flags (T->H).
1825:Core/Src/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1826:Core/Src/SEGGER_RTT.c **** *
1827:Core/Src/SEGGER_RTT.c **** *  Parameters
1828:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer.
1829:Core/Src/SEGGER_RTT.c **** *    Flags        Flags to set for the buffer.
1830:Core/Src/SEGGER_RTT.c **** *                 Flags[31:24] are used for validity check and must be zero. Flags[23:2] are reserv
1831:Core/Src/SEGGER_RTT.c **** *
1832:Core/Src/SEGGER_RTT.c **** *  Return value
1833:Core/Src/SEGGER_RTT.c **** *    >= 0  O.K.
1834:Core/Src/SEGGER_RTT.c **** *     < 0  Error
1835:Core/Src/SEGGER_RTT.c **** */
1836:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_SetFlagsUpBuffer(unsigned BufferIndex, unsigned Flags) {
 3589              		.loc 1 1836 71
 3590              		.cfi_startproc
 3591              		@ args = 0, pretend = 0, frame = 32
 3592              		@ frame_needed = 1, uses_anonymous_args = 0
 3593 0000 80B5     		push	{r7, lr}
 3594              	.LCFI149:
 3595              		.cfi_def_cfa_offset 8
 3596              		.cfi_offset 7, -8
 3597              		.cfi_offset 14, -4
 3598 0002 88B0     		sub	sp, sp, #32
 3599              	.LCFI150:
 3600              		.cfi_def_cfa_offset 40
 3601 0004 00AF     		add	r7, sp, #0
 3602              	.LCFI151:
 3603              		.cfi_def_cfa_register 7
 3604 0006 7860     		str	r0, [r7, #4]
 3605 0008 3960     		str	r1, [r7]
 3606              	.LBB27:
1837:Core/Src/SEGGER_RTT.c ****   int r;
1838:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
1839:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_UP* pUp;
1840:Core/Src/SEGGER_RTT.c **** 
1841:Core/Src/SEGGER_RTT.c ****   INIT();
 3607              		.loc 1 1841 3
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 96


 3608 000a 174B     		ldr	r3, .L193
 3609 000c BB61     		str	r3, [r7, #24]
 3610 000e BB69     		ldr	r3, [r7, #24]
 3611 0010 1B78     		ldrb	r3, [r3]
 3612 0012 DBB2     		uxtb	r3, r3
 3613 0014 532B     		cmp	r3, #83
 3614 0016 01D0     		beq	.L189
 3615              		.loc 1 1841 3 is_stmt 0 discriminator 1
 3616 0018 FFF7FEFF 		bl	_DoInit
 3617              	.L189:
 3618              	.LBE27:
1842:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access
 3619              		.loc 1 1842 10 is_stmt 1
 3620 001c 124B     		ldr	r3, .L193
 3621 001e 7B61     		str	r3, [r7, #20]
1843:Core/Src/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_UP_BUFFERS) {
 3622              		.loc 1 1843 6
 3623 0020 7B68     		ldr	r3, [r7, #4]
 3624 0022 022B     		cmp	r3, #2
 3625 0024 18D8     		bhi	.L190
 3626              	.LBB28:
1844:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3627              		.loc 1 1844 5
 3628              		.syntax unified
 3629              	@ 1844 "Core/Src/SEGGER_RTT.c" 1
 3630 0026 EFF31183 		mrs   r3, basepri  
 3631 002a 4FF02001 		mov   r1, #32       
 3632 002e 81F31188 		msr   basepri, r1  
 3633              		
 3634              	@ 0 "" 2
 3635              		.thumb
 3636              		.syntax unified
 3637 0032 3B61     		str	r3, [r7, #16]
1845:Core/Src/SEGGER_RTT.c ****     pUp = &pRTTCB->aUp[BufferIndex];
 3638              		.loc 1 1845 9
 3639 0034 7B68     		ldr	r3, [r7, #4]
 3640 0036 5A1C     		adds	r2, r3, #1
 3641 0038 1346     		mov	r3, r2
 3642 003a 5B00     		lsls	r3, r3, #1
 3643 003c 1344     		add	r3, r3, r2
 3644 003e DB00     		lsls	r3, r3, #3
 3645 0040 7A69     		ldr	r2, [r7, #20]
 3646 0042 1344     		add	r3, r3, r2
 3647 0044 FB60     		str	r3, [r7, #12]
1846:Core/Src/SEGGER_RTT.c ****     pUp->Flags = Flags;
 3648              		.loc 1 1846 16
 3649 0046 FB68     		ldr	r3, [r7, #12]
 3650 0048 3A68     		ldr	r2, [r7]
 3651 004a 5A61     		str	r2, [r3, #20]
1847:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3652              		.loc 1 1847 5
 3653 004c 3B69     		ldr	r3, [r7, #16]
 3654              		.syntax unified
 3655              	@ 1847 "Core/Src/SEGGER_RTT.c" 1
 3656 004e 83F31188 		msr   basepri, r3  
 3657              		
 3658              	@ 0 "" 2
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 97


 3659              		.thumb
 3660              		.syntax unified
 3661              	.LBE28:
1848:Core/Src/SEGGER_RTT.c ****     r =  0;
 3662              		.loc 1 1848 7
 3663 0052 0023     		movs	r3, #0
 3664 0054 FB61     		str	r3, [r7, #28]
 3665 0056 02E0     		b	.L191
 3666              	.L190:
1849:Core/Src/SEGGER_RTT.c ****   } else {
1850:Core/Src/SEGGER_RTT.c ****     r = -1;
 3667              		.loc 1 1850 7
 3668 0058 4FF0FF33 		mov	r3, #-1
 3669 005c FB61     		str	r3, [r7, #28]
 3670              	.L191:
1851:Core/Src/SEGGER_RTT.c ****   }
1852:Core/Src/SEGGER_RTT.c ****   return r;
 3671              		.loc 1 1852 10
 3672 005e FB69     		ldr	r3, [r7, #28]
1853:Core/Src/SEGGER_RTT.c **** }
 3673              		.loc 1 1853 1
 3674 0060 1846     		mov	r0, r3
 3675 0062 2037     		adds	r7, r7, #32
 3676              	.LCFI152:
 3677              		.cfi_def_cfa_offset 8
 3678 0064 BD46     		mov	sp, r7
 3679              	.LCFI153:
 3680              		.cfi_def_cfa_register 13
 3681              		@ sp needed
 3682 0066 80BD     		pop	{r7, pc}
 3683              	.L194:
 3684              		.align	2
 3685              	.L193:
 3686 0068 00000000 		.word	_SEGGER_RTT
 3687              		.cfi_endproc
 3688              	.LFE29:
 3690              		.section	.text.SEGGER_RTT_SetFlagsDownBuffer,"ax",%progbits
 3691              		.align	1
 3692              		.global	SEGGER_RTT_SetFlagsDownBuffer
 3693              		.syntax unified
 3694              		.thumb
 3695              		.thumb_func
 3697              	SEGGER_RTT_SetFlagsDownBuffer:
 3698              	.LFB30:
1854:Core/Src/SEGGER_RTT.c **** 
1855:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1856:Core/Src/SEGGER_RTT.c **** *
1857:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_SetFlagsDownBuffer
1858:Core/Src/SEGGER_RTT.c **** *
1859:Core/Src/SEGGER_RTT.c **** *  Function description
1860:Core/Src/SEGGER_RTT.c **** *    Run-time configuration of specific Down-buffer flags (T->H).
1861:Core/Src/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1862:Core/Src/SEGGER_RTT.c **** *
1863:Core/Src/SEGGER_RTT.c **** *  Parameters
1864:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to renamed.
1865:Core/Src/SEGGER_RTT.c **** *    Flags        Flags to set for the buffer.
1866:Core/Src/SEGGER_RTT.c **** *                 Flags[31:24] are used for validity check and must be zero. Flags[23:2] are reserv
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 98


1867:Core/Src/SEGGER_RTT.c **** *
1868:Core/Src/SEGGER_RTT.c **** *  Return value
1869:Core/Src/SEGGER_RTT.c **** *    >= 0  O.K.
1870:Core/Src/SEGGER_RTT.c **** *     < 0  Error
1871:Core/Src/SEGGER_RTT.c **** */
1872:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_SetFlagsDownBuffer(unsigned BufferIndex, unsigned Flags) {
 3699              		.loc 1 1872 73
 3700              		.cfi_startproc
 3701              		@ args = 0, pretend = 0, frame = 32
 3702              		@ frame_needed = 1, uses_anonymous_args = 0
 3703 0000 80B5     		push	{r7, lr}
 3704              	.LCFI154:
 3705              		.cfi_def_cfa_offset 8
 3706              		.cfi_offset 7, -8
 3707              		.cfi_offset 14, -4
 3708 0002 88B0     		sub	sp, sp, #32
 3709              	.LCFI155:
 3710              		.cfi_def_cfa_offset 40
 3711 0004 00AF     		add	r7, sp, #0
 3712              	.LCFI156:
 3713              		.cfi_def_cfa_register 7
 3714 0006 7860     		str	r0, [r7, #4]
 3715 0008 3960     		str	r1, [r7]
 3716              	.LBB29:
1873:Core/Src/SEGGER_RTT.c ****   int r;
1874:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
1875:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_DOWN* pDown;
1876:Core/Src/SEGGER_RTT.c **** 
1877:Core/Src/SEGGER_RTT.c ****   INIT();
 3717              		.loc 1 1877 3
 3718 000a 174B     		ldr	r3, .L200
 3719 000c BB61     		str	r3, [r7, #24]
 3720 000e BB69     		ldr	r3, [r7, #24]
 3721 0010 1B78     		ldrb	r3, [r3]
 3722 0012 DBB2     		uxtb	r3, r3
 3723 0014 532B     		cmp	r3, #83
 3724 0016 01D0     		beq	.L196
 3725              		.loc 1 1877 3 is_stmt 0 discriminator 1
 3726 0018 FFF7FEFF 		bl	_DoInit
 3727              	.L196:
 3728              	.LBE29:
1878:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access
 3729              		.loc 1 1878 10 is_stmt 1
 3730 001c 124B     		ldr	r3, .L200
 3731 001e 7B61     		str	r3, [r7, #20]
1879:Core/Src/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 3732              		.loc 1 1879 6
 3733 0020 7B68     		ldr	r3, [r7, #4]
 3734 0022 022B     		cmp	r3, #2
 3735 0024 18D8     		bhi	.L197
 3736              	.LBB30:
1880:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3737              		.loc 1 1880 5
 3738              		.syntax unified
 3739              	@ 1880 "Core/Src/SEGGER_RTT.c" 1
 3740 0026 EFF31183 		mrs   r3, basepri  
 3741 002a 4FF02001 		mov   r1, #32       
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 99


 3742 002e 81F31188 		msr   basepri, r1  
 3743              		
 3744              	@ 0 "" 2
 3745              		.thumb
 3746              		.syntax unified
 3747 0032 3B61     		str	r3, [r7, #16]
1881:Core/Src/SEGGER_RTT.c ****     pDown = &pRTTCB->aDown[BufferIndex];
 3748              		.loc 1 1881 11
 3749 0034 7A68     		ldr	r2, [r7, #4]
 3750 0036 1346     		mov	r3, r2
 3751 0038 5B00     		lsls	r3, r3, #1
 3752 003a 1344     		add	r3, r3, r2
 3753 003c DB00     		lsls	r3, r3, #3
 3754 003e 6033     		adds	r3, r3, #96
 3755 0040 7A69     		ldr	r2, [r7, #20]
 3756 0042 1344     		add	r3, r3, r2
 3757 0044 FB60     		str	r3, [r7, #12]
1882:Core/Src/SEGGER_RTT.c ****     pDown->Flags = Flags;
 3758              		.loc 1 1882 18
 3759 0046 FB68     		ldr	r3, [r7, #12]
 3760 0048 3A68     		ldr	r2, [r7]
 3761 004a 5A61     		str	r2, [r3, #20]
1883:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3762              		.loc 1 1883 5
 3763 004c 3B69     		ldr	r3, [r7, #16]
 3764              		.syntax unified
 3765              	@ 1883 "Core/Src/SEGGER_RTT.c" 1
 3766 004e 83F31188 		msr   basepri, r3  
 3767              		
 3768              	@ 0 "" 2
 3769              		.thumb
 3770              		.syntax unified
 3771              	.LBE30:
1884:Core/Src/SEGGER_RTT.c ****     r =  0;
 3772              		.loc 1 1884 7
 3773 0052 0023     		movs	r3, #0
 3774 0054 FB61     		str	r3, [r7, #28]
 3775 0056 02E0     		b	.L198
 3776              	.L197:
1885:Core/Src/SEGGER_RTT.c ****   } else {
1886:Core/Src/SEGGER_RTT.c ****     r = -1;
 3777              		.loc 1 1886 7
 3778 0058 4FF0FF33 		mov	r3, #-1
 3779 005c FB61     		str	r3, [r7, #28]
 3780              	.L198:
1887:Core/Src/SEGGER_RTT.c ****   }
1888:Core/Src/SEGGER_RTT.c ****   return r;
 3781              		.loc 1 1888 10
 3782 005e FB69     		ldr	r3, [r7, #28]
1889:Core/Src/SEGGER_RTT.c **** }
 3783              		.loc 1 1889 1
 3784 0060 1846     		mov	r0, r3
 3785 0062 2037     		adds	r7, r7, #32
 3786              	.LCFI157:
 3787              		.cfi_def_cfa_offset 8
 3788 0064 BD46     		mov	sp, r7
 3789              	.LCFI158:
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 100


 3790              		.cfi_def_cfa_register 13
 3791              		@ sp needed
 3792 0066 80BD     		pop	{r7, pc}
 3793              	.L201:
 3794              		.align	2
 3795              	.L200:
 3796 0068 00000000 		.word	_SEGGER_RTT
 3797              		.cfi_endproc
 3798              	.LFE30:
 3800              		.section	.text.SEGGER_RTT_Init,"ax",%progbits
 3801              		.align	1
 3802              		.global	SEGGER_RTT_Init
 3803              		.syntax unified
 3804              		.thumb
 3805              		.thumb_func
 3807              	SEGGER_RTT_Init:
 3808              	.LFB31:
1890:Core/Src/SEGGER_RTT.c **** 
1891:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1892:Core/Src/SEGGER_RTT.c **** *
1893:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_Init
1894:Core/Src/SEGGER_RTT.c **** *
1895:Core/Src/SEGGER_RTT.c **** *  Function description
1896:Core/Src/SEGGER_RTT.c **** *    Initializes the RTT Control Block.
1897:Core/Src/SEGGER_RTT.c **** *    Should be used in RAM targets, at start of the application.
1898:Core/Src/SEGGER_RTT.c **** *
1899:Core/Src/SEGGER_RTT.c **** */
1900:Core/Src/SEGGER_RTT.c **** void SEGGER_RTT_Init (void) {
 3809              		.loc 1 1900 29
 3810              		.cfi_startproc
 3811              		@ args = 0, pretend = 0, frame = 0
 3812              		@ frame_needed = 1, uses_anonymous_args = 0
 3813 0000 80B5     		push	{r7, lr}
 3814              	.LCFI159:
 3815              		.cfi_def_cfa_offset 8
 3816              		.cfi_offset 7, -8
 3817              		.cfi_offset 14, -4
 3818 0002 00AF     		add	r7, sp, #0
 3819              	.LCFI160:
 3820              		.cfi_def_cfa_register 7
1901:Core/Src/SEGGER_RTT.c ****   _DoInit();
 3821              		.loc 1 1901 3
 3822 0004 FFF7FEFF 		bl	_DoInit
1902:Core/Src/SEGGER_RTT.c **** }
 3823              		.loc 1 1902 1
 3824 0008 00BF     		nop
 3825 000a 80BD     		pop	{r7, pc}
 3826              		.cfi_endproc
 3827              	.LFE31:
 3829              		.section	.text.SEGGER_RTT_SetTerminal,"ax",%progbits
 3830              		.align	1
 3831              		.global	SEGGER_RTT_SetTerminal
 3832              		.syntax unified
 3833              		.thumb
 3834              		.thumb_func
 3836              	SEGGER_RTT_SetTerminal:
 3837              	.LFB32:
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 101


1903:Core/Src/SEGGER_RTT.c **** 
1904:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1905:Core/Src/SEGGER_RTT.c **** *
1906:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_SetTerminal
1907:Core/Src/SEGGER_RTT.c **** *
1908:Core/Src/SEGGER_RTT.c **** *  Function description
1909:Core/Src/SEGGER_RTT.c **** *    Sets the terminal to be used for output on channel 0.
1910:Core/Src/SEGGER_RTT.c **** *
1911:Core/Src/SEGGER_RTT.c **** *  Parameters
1912:Core/Src/SEGGER_RTT.c **** *    TerminalId  Index of the terminal.
1913:Core/Src/SEGGER_RTT.c **** *
1914:Core/Src/SEGGER_RTT.c **** *  Return value
1915:Core/Src/SEGGER_RTT.c **** *    >= 0  O.K.
1916:Core/Src/SEGGER_RTT.c **** *     < 0  Error (e.g. if RTT is configured for non-blocking mode and there was no space in the buf
1917:Core/Src/SEGGER_RTT.c **** *
1918:Core/Src/SEGGER_RTT.c **** *  Notes
1919:Core/Src/SEGGER_RTT.c **** *    (1) Buffer 0 is always reserved for terminal I/O, so we can use index 0 here, fixed
1920:Core/Src/SEGGER_RTT.c **** */
1921:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_SetTerminal (unsigned char TerminalId) {
 3838              		.loc 1 1921 55
 3839              		.cfi_startproc
 3840              		@ args = 0, pretend = 0, frame = 32
 3841              		@ frame_needed = 1, uses_anonymous_args = 0
 3842 0000 80B5     		push	{r7, lr}
 3843              	.LCFI161:
 3844              		.cfi_def_cfa_offset 8
 3845              		.cfi_offset 7, -8
 3846              		.cfi_offset 14, -4
 3847 0002 88B0     		sub	sp, sp, #32
 3848              	.LCFI162:
 3849              		.cfi_def_cfa_offset 40
 3850 0004 00AF     		add	r7, sp, #0
 3851              	.LCFI163:
 3852              		.cfi_def_cfa_register 7
 3853 0006 0346     		mov	r3, r0
 3854 0008 FB71     		strb	r3, [r7, #7]
 3855              	.LBB31:
1922:Core/Src/SEGGER_RTT.c ****   unsigned char         ac[2];
1923:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
1924:Core/Src/SEGGER_RTT.c ****   unsigned Avail;
1925:Core/Src/SEGGER_RTT.c ****   int r;
1926:Core/Src/SEGGER_RTT.c **** 
1927:Core/Src/SEGGER_RTT.c ****   INIT();
 3856              		.loc 1 1927 3
 3857 000a 274B     		ldr	r3, .L211
 3858 000c BB61     		str	r3, [r7, #24]
 3859 000e BB69     		ldr	r3, [r7, #24]
 3860 0010 1B78     		ldrb	r3, [r3]
 3861 0012 DBB2     		uxtb	r3, r3
 3862 0014 532B     		cmp	r3, #83
 3863 0016 01D0     		beq	.L204
 3864              		.loc 1 1927 3 is_stmt 0 discriminator 1
 3865 0018 FFF7FEFF 		bl	_DoInit
 3866              	.L204:
 3867              	.LBE31:
1928:Core/Src/SEGGER_RTT.c ****   r = 0;
 3868              		.loc 1 1928 5 is_stmt 1
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 102


 3869 001c 0023     		movs	r3, #0
 3870 001e FB61     		str	r3, [r7, #28]
1929:Core/Src/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 3871              		.loc 1 1929 9
 3872 0020 FF23     		movs	r3, #255
 3873 0022 3B72     		strb	r3, [r7, #8]
1930:Core/Src/SEGGER_RTT.c ****   if (TerminalId < sizeof(_aTerminalId)) { // We only support a certain number of channels
 3874              		.loc 1 1930 6
 3875 0024 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3876 0026 0F2B     		cmp	r3, #15
 3877 0028 36D8     		bhi	.L205
1931:Core/Src/SEGGER_RTT.c ****     ac[1] = _aTerminalId[TerminalId];
 3878              		.loc 1 1931 25
 3879 002a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3880 002c 1F4A     		ldr	r2, .L211+4
 3881 002e D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 3882              		.loc 1 1931 11
 3883 0030 7B72     		strb	r3, [r7, #9]
1932:Core/Src/SEGGER_RTT.c ****     pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[0] + SEGGER_RTT_UNCACHED_OFF);  // 
 3884              		.loc 1 1932 11
 3885 0032 1F4B     		ldr	r3, .L211+8
 3886 0034 7B61     		str	r3, [r7, #20]
 3887              	.LBB32:
1933:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();                     // Lock to make sure that no other task is writing into 
 3888              		.loc 1 1933 5
 3889              		.syntax unified
 3890              	@ 1933 "Core/Src/SEGGER_RTT.c" 1
 3891 0036 EFF31183 		mrs   r3, basepri  
 3892 003a 4FF02001 		mov   r1, #32       
 3893 003e 81F31188 		msr   basepri, r1  
 3894              		
 3895              	@ 0 "" 2
 3896              		.thumb
 3897              		.syntax unified
 3898 0042 3B61     		str	r3, [r7, #16]
1934:Core/Src/SEGGER_RTT.c ****     if ((pRing->Flags & SEGGER_RTT_MODE_MASK) == SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL) {
 3899              		.loc 1 1934 15
 3900 0044 7B69     		ldr	r3, [r7, #20]
 3901 0046 5B69     		ldr	r3, [r3, #20]
 3902              		.loc 1 1934 23
 3903 0048 03F00303 		and	r3, r3, #3
 3904              		.loc 1 1934 8
 3905 004c 022B     		cmp	r3, #2
 3906 004e 0AD1     		bne	.L206
1935:Core/Src/SEGGER_RTT.c ****       _ActiveTerminal = TerminalId;
 3907              		.loc 1 1935 23
 3908 0050 184A     		ldr	r2, .L211+12
 3909 0052 FB79     		ldrb	r3, [r7, #7]
 3910 0054 1370     		strb	r3, [r2]
1936:Core/Src/SEGGER_RTT.c ****       _WriteBlocking(pRing, (const char*)ac, 2u);
 3911              		.loc 1 1936 7
 3912 0056 07F10803 		add	r3, r7, #8
 3913 005a 0222     		movs	r2, #2
 3914 005c 1946     		mov	r1, r3
 3915 005e 7869     		ldr	r0, [r7, #20]
 3916 0060 FFF7FEFF 		bl	_WriteBlocking
 3917 0064 14E0     		b	.L207
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 103


 3918              	.L206:
1937:Core/Src/SEGGER_RTT.c ****     } else {                                                                            // Skipping
1938:Core/Src/SEGGER_RTT.c ****       Avail = _GetAvailWriteSpace(pRing);
 3919              		.loc 1 1938 15
 3920 0066 7869     		ldr	r0, [r7, #20]
 3921 0068 FFF7FEFF 		bl	_GetAvailWriteSpace
 3922 006c F860     		str	r0, [r7, #12]
1939:Core/Src/SEGGER_RTT.c ****       if (Avail >= 2) {
 3923              		.loc 1 1939 10
 3924 006e FB68     		ldr	r3, [r7, #12]
 3925 0070 012B     		cmp	r3, #1
 3926 0072 0AD9     		bls	.L208
1940:Core/Src/SEGGER_RTT.c ****         _ActiveTerminal = TerminalId;    // Only change active terminal in case of success
 3927              		.loc 1 1940 25
 3928 0074 0F4A     		ldr	r2, .L211+12
 3929 0076 FB79     		ldrb	r3, [r7, #7]
 3930 0078 1370     		strb	r3, [r2]
1941:Core/Src/SEGGER_RTT.c ****         _WriteNoCheck(pRing, (const char*)ac, 2u);
 3931              		.loc 1 1941 9
 3932 007a 07F10803 		add	r3, r7, #8
 3933 007e 0222     		movs	r2, #2
 3934 0080 1946     		mov	r1, r3
 3935 0082 7869     		ldr	r0, [r7, #20]
 3936 0084 FFF7FEFF 		bl	_WriteNoCheck
 3937 0088 02E0     		b	.L207
 3938              	.L208:
1942:Core/Src/SEGGER_RTT.c ****       } else {
1943:Core/Src/SEGGER_RTT.c ****         r = -1;
 3939              		.loc 1 1943 11
 3940 008a 4FF0FF33 		mov	r3, #-1
 3941 008e FB61     		str	r3, [r7, #28]
 3942              	.L207:
1944:Core/Src/SEGGER_RTT.c ****       }
1945:Core/Src/SEGGER_RTT.c ****     }
1946:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3943              		.loc 1 1946 5
 3944 0090 3B69     		ldr	r3, [r7, #16]
 3945              		.syntax unified
 3946              	@ 1946 "Core/Src/SEGGER_RTT.c" 1
 3947 0092 83F31188 		msr   basepri, r3  
 3948              		
 3949              	@ 0 "" 2
 3950              		.thumb
 3951              		.syntax unified
 3952              	.LBE32:
 3953 0096 02E0     		b	.L209
 3954              	.L205:
1947:Core/Src/SEGGER_RTT.c ****   } else {
1948:Core/Src/SEGGER_RTT.c ****     r = -1;
 3955              		.loc 1 1948 7
 3956 0098 4FF0FF33 		mov	r3, #-1
 3957 009c FB61     		str	r3, [r7, #28]
 3958              	.L209:
1949:Core/Src/SEGGER_RTT.c ****   }
1950:Core/Src/SEGGER_RTT.c ****   return r;
 3959              		.loc 1 1950 10
 3960 009e FB69     		ldr	r3, [r7, #28]
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 104


1951:Core/Src/SEGGER_RTT.c **** }
 3961              		.loc 1 1951 1
 3962 00a0 1846     		mov	r0, r3
 3963 00a2 2037     		adds	r7, r7, #32
 3964              	.LCFI164:
 3965              		.cfi_def_cfa_offset 8
 3966 00a4 BD46     		mov	sp, r7
 3967              	.LCFI165:
 3968              		.cfi_def_cfa_register 13
 3969              		@ sp needed
 3970 00a6 80BD     		pop	{r7, pc}
 3971              	.L212:
 3972              		.align	2
 3973              	.L211:
 3974 00a8 00000000 		.word	_SEGGER_RTT
 3975 00ac 00000000 		.word	_aTerminalId
 3976 00b0 18000000 		.word	_SEGGER_RTT+24
 3977 00b4 00000000 		.word	_ActiveTerminal
 3978              		.cfi_endproc
 3979              	.LFE32:
 3981              		.section	.text.SEGGER_RTT_TerminalOut,"ax",%progbits
 3982              		.align	1
 3983              		.global	SEGGER_RTT_TerminalOut
 3984              		.syntax unified
 3985              		.thumb
 3986              		.thumb_func
 3988              	SEGGER_RTT_TerminalOut:
 3989              	.LFB33:
1952:Core/Src/SEGGER_RTT.c **** 
1953:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1954:Core/Src/SEGGER_RTT.c **** *
1955:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_TerminalOut
1956:Core/Src/SEGGER_RTT.c **** *
1957:Core/Src/SEGGER_RTT.c **** *  Function description
1958:Core/Src/SEGGER_RTT.c **** *    Writes a string to the given terminal
1959:Core/Src/SEGGER_RTT.c **** *     without changing the terminal for channel 0.
1960:Core/Src/SEGGER_RTT.c **** *
1961:Core/Src/SEGGER_RTT.c **** *  Parameters
1962:Core/Src/SEGGER_RTT.c **** *    TerminalId   Index of the terminal.
1963:Core/Src/SEGGER_RTT.c **** *    s            String to be printed on the terminal.
1964:Core/Src/SEGGER_RTT.c **** *
1965:Core/Src/SEGGER_RTT.c **** *  Return value
1966:Core/Src/SEGGER_RTT.c **** *    >= 0 - Number of bytes written.
1967:Core/Src/SEGGER_RTT.c **** *     < 0 - Error.
1968:Core/Src/SEGGER_RTT.c **** *
1969:Core/Src/SEGGER_RTT.c **** */
1970:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_TerminalOut (unsigned char TerminalId, const char* s) {
 3990              		.loc 1 1970 70
 3991              		.cfi_startproc
 3992              		@ args = 0, pretend = 0, frame = 32
 3993              		@ frame_needed = 1, uses_anonymous_args = 0
 3994 0000 80B5     		push	{r7, lr}
 3995              	.LCFI166:
 3996              		.cfi_def_cfa_offset 8
 3997              		.cfi_offset 7, -8
 3998              		.cfi_offset 14, -4
 3999 0002 88B0     		sub	sp, sp, #32
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 105


 4000              	.LCFI167:
 4001              		.cfi_def_cfa_offset 40
 4002 0004 00AF     		add	r7, sp, #0
 4003              	.LCFI168:
 4004              		.cfi_def_cfa_register 7
 4005 0006 0346     		mov	r3, r0
 4006 0008 3960     		str	r1, [r7]
 4007 000a FB71     		strb	r3, [r7, #7]
 4008              	.LBB33:
1971:Core/Src/SEGGER_RTT.c ****   int                   Status;
1972:Core/Src/SEGGER_RTT.c ****   unsigned              FragLen;
1973:Core/Src/SEGGER_RTT.c ****   unsigned              Avail;
1974:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
1975:Core/Src/SEGGER_RTT.c ****   //
1976:Core/Src/SEGGER_RTT.c ****   INIT();
 4009              		.loc 1 1976 3
 4010 000c 434B     		ldr	r3, .L227
 4011 000e BB61     		str	r3, [r7, #24]
 4012 0010 BB69     		ldr	r3, [r7, #24]
 4013 0012 1B78     		ldrb	r3, [r3]
 4014 0014 DBB2     		uxtb	r3, r3
 4015 0016 532B     		cmp	r3, #83
 4016 0018 01D0     		beq	.L214
 4017              		.loc 1 1976 3 is_stmt 0 discriminator 1
 4018 001a FFF7FEFF 		bl	_DoInit
 4019              	.L214:
 4020              	.LBE33:
1977:Core/Src/SEGGER_RTT.c ****   //
1978:Core/Src/SEGGER_RTT.c ****   // Validate terminal ID.
1979:Core/Src/SEGGER_RTT.c ****   //
1980:Core/Src/SEGGER_RTT.c ****   if (TerminalId < (char)sizeof(_aTerminalId)) { // We only support a certain number of channels
 4021              		.loc 1 1980 6 is_stmt 1
 4022 001e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4023 0020 0F2B     		cmp	r3, #15
 4024 0022 73D8     		bhi	.L215
1981:Core/Src/SEGGER_RTT.c ****     //
1982:Core/Src/SEGGER_RTT.c ****     // Get "to-host" ring buffer.
1983:Core/Src/SEGGER_RTT.c ****     //
1984:Core/Src/SEGGER_RTT.c ****     pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[0] + SEGGER_RTT_UNCACHED_OFF);  // 
 4025              		.loc 1 1984 11
 4026 0024 3E4B     		ldr	r3, .L227+4
 4027 0026 7B61     		str	r3, [r7, #20]
1985:Core/Src/SEGGER_RTT.c ****     //
1986:Core/Src/SEGGER_RTT.c ****     // Need to be able to change terminal, write data, change back.
1987:Core/Src/SEGGER_RTT.c ****     // Compute the fixed and variable sizes.
1988:Core/Src/SEGGER_RTT.c ****     //
1989:Core/Src/SEGGER_RTT.c ****     FragLen = STRLEN(s);
 4028              		.loc 1 1989 15
 4029 0028 3868     		ldr	r0, [r7]
 4030 002a FFF7FEFF 		bl	strlen
 4031 002e 3861     		str	r0, [r7, #16]
 4032              	.LBB34:
1990:Core/Src/SEGGER_RTT.c ****     //
1991:Core/Src/SEGGER_RTT.c ****     // How we output depends upon the mode...
1992:Core/Src/SEGGER_RTT.c ****     //
1993:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 4033              		.loc 1 1993 5
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 106


 4034              		.syntax unified
 4035              	@ 1993 "Core/Src/SEGGER_RTT.c" 1
 4036 0030 EFF31183 		mrs   r3, basepri  
 4037 0034 4FF02001 		mov   r1, #32       
 4038 0038 81F31188 		msr   basepri, r1  
 4039              		
 4040              	@ 0 "" 2
 4041              		.thumb
 4042              		.syntax unified
 4043 003c FB60     		str	r3, [r7, #12]
1994:Core/Src/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
 4044              		.loc 1 1994 13
 4045 003e 7869     		ldr	r0, [r7, #20]
 4046 0040 FFF7FEFF 		bl	_GetAvailWriteSpace
 4047 0044 B860     		str	r0, [r7, #8]
1995:Core/Src/SEGGER_RTT.c ****     switch (pRing->Flags & SEGGER_RTT_MODE_MASK) {
 4048              		.loc 1 1995 18
 4049 0046 7B69     		ldr	r3, [r7, #20]
 4050 0048 5B69     		ldr	r3, [r3, #20]
 4051              		.loc 1 1995 26
 4052 004a 03F00303 		and	r3, r3, #3
 4053              		.loc 1 1995 5
 4054 004e 022B     		cmp	r3, #2
 4055 0050 41D0     		beq	.L216
 4056 0052 022B     		cmp	r3, #2
 4057 0054 52D8     		bhi	.L217
 4058 0056 002B     		cmp	r3, #0
 4059 0058 02D0     		beq	.L218
 4060 005a 012B     		cmp	r3, #1
 4061 005c 1BD0     		beq	.L219
 4062 005e 4DE0     		b	.L217
 4063              	.L218:
1996:Core/Src/SEGGER_RTT.c ****     case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
1997:Core/Src/SEGGER_RTT.c ****       //
1998:Core/Src/SEGGER_RTT.c ****       // If we are in skip mode and there is no space for the whole
1999:Core/Src/SEGGER_RTT.c ****       // of this output, don't bother switching terminals at all.
2000:Core/Src/SEGGER_RTT.c ****       //
2001:Core/Src/SEGGER_RTT.c ****       if (Avail < (FragLen + 4u)) {
 4064              		.loc 1 2001 28
 4065 0060 3B69     		ldr	r3, [r7, #16]
 4066 0062 0433     		adds	r3, r3, #4
 4067              		.loc 1 2001 10
 4068 0064 BA68     		ldr	r2, [r7, #8]
 4069 0066 9A42     		cmp	r2, r3
 4070 0068 02D2     		bcs	.L220
2002:Core/Src/SEGGER_RTT.c ****         Status = 0;
 4071              		.loc 1 2002 16
 4072 006a 0023     		movs	r3, #0
 4073 006c FB61     		str	r3, [r7, #28]
2003:Core/Src/SEGGER_RTT.c ****       } else {
2004:Core/Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, TerminalId);
2005:Core/Src/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, FragLen);
2006:Core/Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
2007:Core/Src/SEGGER_RTT.c ****       }
2008:Core/Src/SEGGER_RTT.c ****       break;
 4074              		.loc 1 2008 7
 4075 006e 49E0     		b	.L222
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 107


 4076              	.L220:
2004:Core/Src/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, FragLen);
 4077              		.loc 1 2004 9
 4078 0070 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4079 0072 1946     		mov	r1, r3
 4080 0074 7869     		ldr	r0, [r7, #20]
 4081 0076 FFF7FEFF 		bl	_PostTerminalSwitch
2005:Core/Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 4082              		.loc 1 2005 23
 4083 007a 3A69     		ldr	r2, [r7, #16]
 4084 007c 3968     		ldr	r1, [r7]
 4085 007e 7869     		ldr	r0, [r7, #20]
 4086 0080 FFF7FEFF 		bl	_WriteBlocking
 4087 0084 0346     		mov	r3, r0
2005:Core/Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 4088              		.loc 1 2005 16 discriminator 1
 4089 0086 FB61     		str	r3, [r7, #28]
2006:Core/Src/SEGGER_RTT.c ****       }
 4090              		.loc 1 2006 9
 4091 0088 264B     		ldr	r3, .L227+8
 4092 008a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4093 008c 1946     		mov	r1, r3
 4094 008e 7869     		ldr	r0, [r7, #20]
 4095 0090 FFF7FEFF 		bl	_PostTerminalSwitch
 4096              		.loc 1 2008 7
 4097 0094 36E0     		b	.L222
 4098              	.L219:
2009:Core/Src/SEGGER_RTT.c ****     case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
2010:Core/Src/SEGGER_RTT.c ****       //
2011:Core/Src/SEGGER_RTT.c ****       // If we are in trim mode and there is not enough space for everything,
2012:Core/Src/SEGGER_RTT.c ****       // trim the output but always include the terminal switch.  If no room
2013:Core/Src/SEGGER_RTT.c ****       // for terminal switch, skip that totally.
2014:Core/Src/SEGGER_RTT.c ****       //
2015:Core/Src/SEGGER_RTT.c ****       if (Avail < 4u) {
 4099              		.loc 1 2015 10
 4100 0096 BB68     		ldr	r3, [r7, #8]
 4101 0098 032B     		cmp	r3, #3
 4102 009a 03D8     		bhi	.L223
2016:Core/Src/SEGGER_RTT.c ****         Status = -1;
 4103              		.loc 1 2016 16
 4104 009c 4FF0FF33 		mov	r3, #-1
 4105 00a0 FB61     		str	r3, [r7, #28]
2017:Core/Src/SEGGER_RTT.c ****       } else {
2018:Core/Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, TerminalId);
2019:Core/Src/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, (FragLen < (Avail - 4u)) ? FragLen : (Avail - 4u));
2020:Core/Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
2021:Core/Src/SEGGER_RTT.c ****       }
2022:Core/Src/SEGGER_RTT.c ****       break;
 4106              		.loc 1 2022 7
 4107 00a2 2FE0     		b	.L222
 4108              	.L223:
2018:Core/Src/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, (FragLen < (Avail - 4u)) ? FragLen : (Avail - 4u));
 4109              		.loc 1 2018 9
 4110 00a4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4111 00a6 1946     		mov	r1, r3
 4112 00a8 7869     		ldr	r0, [r7, #20]
 4113 00aa FFF7FEFF 		bl	_PostTerminalSwitch
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 108


2019:Core/Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 4114              		.loc 1 2019 66
 4115 00ae BB68     		ldr	r3, [r7, #8]
 4116 00b0 1A1F     		subs	r2, r3, #4
2019:Core/Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 4117              		.loc 1 2019 23
 4118 00b2 3B69     		ldr	r3, [r7, #16]
 4119 00b4 9342     		cmp	r3, r2
 4120 00b6 28BF     		it	cs
 4121 00b8 1346     		movcs	r3, r2
 4122 00ba 1A46     		mov	r2, r3
 4123 00bc 3968     		ldr	r1, [r7]
 4124 00be 7869     		ldr	r0, [r7, #20]
 4125 00c0 FFF7FEFF 		bl	_WriteBlocking
 4126 00c4 0346     		mov	r3, r0
2019:Core/Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 4127              		.loc 1 2019 16 discriminator 1
 4128 00c6 FB61     		str	r3, [r7, #28]
2020:Core/Src/SEGGER_RTT.c ****       }
 4129              		.loc 1 2020 9
 4130 00c8 164B     		ldr	r3, .L227+8
 4131 00ca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4132 00cc 1946     		mov	r1, r3
 4133 00ce 7869     		ldr	r0, [r7, #20]
 4134 00d0 FFF7FEFF 		bl	_PostTerminalSwitch
 4135              		.loc 1 2022 7
 4136 00d4 16E0     		b	.L222
 4137              	.L216:
2023:Core/Src/SEGGER_RTT.c ****     case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
2024:Core/Src/SEGGER_RTT.c ****       //
2025:Core/Src/SEGGER_RTT.c ****       // If we are in blocking mode, output everything.
2026:Core/Src/SEGGER_RTT.c ****       //
2027:Core/Src/SEGGER_RTT.c ****       _PostTerminalSwitch(pRing, TerminalId);
 4138              		.loc 1 2027 7
 4139 00d6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4140 00d8 1946     		mov	r1, r3
 4141 00da 7869     		ldr	r0, [r7, #20]
 4142 00dc FFF7FEFF 		bl	_PostTerminalSwitch
2028:Core/Src/SEGGER_RTT.c ****       Status = (int)_WriteBlocking(pRing, s, FragLen);
 4143              		.loc 1 2028 21
 4144 00e0 3A69     		ldr	r2, [r7, #16]
 4145 00e2 3968     		ldr	r1, [r7]
 4146 00e4 7869     		ldr	r0, [r7, #20]
 4147 00e6 FFF7FEFF 		bl	_WriteBlocking
 4148 00ea 0346     		mov	r3, r0
 4149              		.loc 1 2028 14 discriminator 1
 4150 00ec FB61     		str	r3, [r7, #28]
2029:Core/Src/SEGGER_RTT.c ****       _PostTerminalSwitch(pRing, _ActiveTerminal);
 4151              		.loc 1 2029 7
 4152 00ee 0D4B     		ldr	r3, .L227+8
 4153 00f0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4154 00f2 1946     		mov	r1, r3
 4155 00f4 7869     		ldr	r0, [r7, #20]
 4156 00f6 FFF7FEFF 		bl	_PostTerminalSwitch
2030:Core/Src/SEGGER_RTT.c ****       break;
 4157              		.loc 1 2030 7
 4158 00fa 03E0     		b	.L222
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 109


 4159              	.L217:
2031:Core/Src/SEGGER_RTT.c ****     default:
2032:Core/Src/SEGGER_RTT.c ****       Status = -1;
 4160              		.loc 1 2032 14
 4161 00fc 4FF0FF33 		mov	r3, #-1
 4162 0100 FB61     		str	r3, [r7, #28]
2033:Core/Src/SEGGER_RTT.c ****       break;
 4163              		.loc 1 2033 7
 4164 0102 00BF     		nop
 4165              	.L222:
2034:Core/Src/SEGGER_RTT.c ****     }
2035:Core/Src/SEGGER_RTT.c ****     //
2036:Core/Src/SEGGER_RTT.c ****     // Finish up.
2037:Core/Src/SEGGER_RTT.c ****     //
2038:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 4166              		.loc 1 2038 5
 4167 0104 FB68     		ldr	r3, [r7, #12]
 4168              		.syntax unified
 4169              	@ 2038 "Core/Src/SEGGER_RTT.c" 1
 4170 0106 83F31188 		msr   basepri, r3  
 4171              		
 4172              	@ 0 "" 2
 4173              		.thumb
 4174              		.syntax unified
 4175              	.LBE34:
 4176 010a 02E0     		b	.L225
 4177              	.L215:
2039:Core/Src/SEGGER_RTT.c ****   } else {
2040:Core/Src/SEGGER_RTT.c ****     Status = -1;
 4178              		.loc 1 2040 12
 4179 010c 4FF0FF33 		mov	r3, #-1
 4180 0110 FB61     		str	r3, [r7, #28]
 4181              	.L225:
2041:Core/Src/SEGGER_RTT.c ****   }
2042:Core/Src/SEGGER_RTT.c ****   return Status;
 4182              		.loc 1 2042 10
 4183 0112 FB69     		ldr	r3, [r7, #28]
2043:Core/Src/SEGGER_RTT.c **** }
 4184              		.loc 1 2043 1
 4185 0114 1846     		mov	r0, r3
 4186 0116 2037     		adds	r7, r7, #32
 4187              	.LCFI169:
 4188              		.cfi_def_cfa_offset 8
 4189 0118 BD46     		mov	sp, r7
 4190              	.LCFI170:
 4191              		.cfi_def_cfa_register 13
 4192              		@ sp needed
 4193 011a 80BD     		pop	{r7, pc}
 4194              	.L228:
 4195              		.align	2
 4196              	.L227:
 4197 011c 00000000 		.word	_SEGGER_RTT
 4198 0120 18000000 		.word	_SEGGER_RTT+24
 4199 0124 00000000 		.word	_ActiveTerminal
 4200              		.cfi_endproc
 4201              	.LFE33:
 4203              		.section	.text.SEGGER_RTT_GetAvailWriteSpace,"ax",%progbits
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 110


 4204              		.align	1
 4205              		.global	SEGGER_RTT_GetAvailWriteSpace
 4206              		.syntax unified
 4207              		.thumb
 4208              		.thumb_func
 4210              	SEGGER_RTT_GetAvailWriteSpace:
 4211              	.LFB34:
2044:Core/Src/SEGGER_RTT.c **** 
2045:Core/Src/SEGGER_RTT.c **** /*********************************************************************
2046:Core/Src/SEGGER_RTT.c **** *
2047:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_GetAvailWriteSpace
2048:Core/Src/SEGGER_RTT.c **** *
2049:Core/Src/SEGGER_RTT.c **** *  Function description
2050:Core/Src/SEGGER_RTT.c **** *    Returns the number of bytes available in the ring buffer.
2051:Core/Src/SEGGER_RTT.c **** *
2052:Core/Src/SEGGER_RTT.c **** *  Parameters
2053:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of the up buffer.
2054:Core/Src/SEGGER_RTT.c **** *
2055:Core/Src/SEGGER_RTT.c **** *  Return value
2056:Core/Src/SEGGER_RTT.c **** *    Number of bytes that are free in the selected up buffer.
2057:Core/Src/SEGGER_RTT.c **** */
2058:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_GetAvailWriteSpace (unsigned BufferIndex) {
 4212              		.loc 1 2058 63
 4213              		.cfi_startproc
 4214              		@ args = 0, pretend = 0, frame = 16
 4215              		@ frame_needed = 1, uses_anonymous_args = 0
 4216 0000 80B5     		push	{r7, lr}
 4217              	.LCFI171:
 4218              		.cfi_def_cfa_offset 8
 4219              		.cfi_offset 7, -8
 4220              		.cfi_offset 14, -4
 4221 0002 84B0     		sub	sp, sp, #16
 4222              	.LCFI172:
 4223              		.cfi_def_cfa_offset 24
 4224 0004 00AF     		add	r7, sp, #0
 4225              	.LCFI173:
 4226              		.cfi_def_cfa_register 7
 4227 0006 7860     		str	r0, [r7, #4]
2059:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
2060:Core/Src/SEGGER_RTT.c **** 
2061:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OF
 4228              		.loc 1 2061 9
 4229 0008 7B68     		ldr	r3, [r7, #4]
 4230 000a 5A1C     		adds	r2, r3, #1
 4231 000c 1346     		mov	r3, r2
 4232 000e 5B00     		lsls	r3, r3, #1
 4233 0010 1344     		add	r3, r3, r2
 4234 0012 DB00     		lsls	r3, r3, #3
 4235 0014 054A     		ldr	r2, .L231
 4236 0016 1344     		add	r3, r3, r2
 4237 0018 FB60     		str	r3, [r7, #12]
2062:Core/Src/SEGGER_RTT.c ****   return _GetAvailWriteSpace(pRing);
 4238              		.loc 1 2062 10
 4239 001a F868     		ldr	r0, [r7, #12]
 4240 001c FFF7FEFF 		bl	_GetAvailWriteSpace
 4241 0020 0346     		mov	r3, r0
2063:Core/Src/SEGGER_RTT.c **** }
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 111


 4242              		.loc 1 2063 1
 4243 0022 1846     		mov	r0, r3
 4244 0024 1037     		adds	r7, r7, #16
 4245              	.LCFI174:
 4246              		.cfi_def_cfa_offset 8
 4247 0026 BD46     		mov	sp, r7
 4248              	.LCFI175:
 4249              		.cfi_def_cfa_register 13
 4250              		@ sp needed
 4251 0028 80BD     		pop	{r7, pc}
 4252              	.L232:
 4253 002a 00BF     		.align	2
 4254              	.L231:
 4255 002c 00000000 		.word	_SEGGER_RTT
 4256              		.cfi_endproc
 4257              	.LFE34:
 4259              		.section	.text.SEGGER_RTT_GetBytesInBuffer,"ax",%progbits
 4260              		.align	1
 4261              		.global	SEGGER_RTT_GetBytesInBuffer
 4262              		.syntax unified
 4263              		.thumb
 4264              		.thumb_func
 4266              	SEGGER_RTT_GetBytesInBuffer:
 4267              	.LFB35:
2064:Core/Src/SEGGER_RTT.c **** 
2065:Core/Src/SEGGER_RTT.c **** 
2066:Core/Src/SEGGER_RTT.c **** /*********************************************************************
2067:Core/Src/SEGGER_RTT.c **** *
2068:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_GetBytesInBuffer()
2069:Core/Src/SEGGER_RTT.c **** *
2070:Core/Src/SEGGER_RTT.c **** *  Function description
2071:Core/Src/SEGGER_RTT.c **** *    Returns the number of bytes currently used in the up buffer.
2072:Core/Src/SEGGER_RTT.c **** *
2073:Core/Src/SEGGER_RTT.c **** *  Parameters
2074:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of the up buffer.
2075:Core/Src/SEGGER_RTT.c **** *
2076:Core/Src/SEGGER_RTT.c **** *  Return value
2077:Core/Src/SEGGER_RTT.c **** *    Number of bytes that are used in the buffer.
2078:Core/Src/SEGGER_RTT.c **** */
2079:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_GetBytesInBuffer(unsigned BufferIndex) {
 4268              		.loc 1 2079 60
 4269              		.cfi_startproc
 4270              		@ args = 0, pretend = 0, frame = 24
 4271              		@ frame_needed = 1, uses_anonymous_args = 0
 4272              		@ link register save eliminated.
 4273 0000 80B4     		push	{r7}
 4274              	.LCFI176:
 4275              		.cfi_def_cfa_offset 4
 4276              		.cfi_offset 7, -4
 4277 0002 87B0     		sub	sp, sp, #28
 4278              	.LCFI177:
 4279              		.cfi_def_cfa_offset 32
 4280 0004 00AF     		add	r7, sp, #0
 4281              	.LCFI178:
 4282              		.cfi_def_cfa_register 7
 4283 0006 7860     		str	r0, [r7, #4]
2080:Core/Src/SEGGER_RTT.c ****   unsigned RdOff;
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 112


2081:Core/Src/SEGGER_RTT.c ****   unsigned WrOff;
2082:Core/Src/SEGGER_RTT.c ****   unsigned r;
2083:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
2084:Core/Src/SEGGER_RTT.c ****   //
2085:Core/Src/SEGGER_RTT.c ****   // Avoid warnings regarding volatile access order.  It's not a problem
2086:Core/Src/SEGGER_RTT.c ****   // in this case, but dampen compiler enthusiasm.
2087:Core/Src/SEGGER_RTT.c ****   //
2088:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access
 4284              		.loc 1 2088 10
 4285 0008 194B     		ldr	r3, .L237
 4286 000a 3B61     		str	r3, [r7, #16]
2089:Core/Src/SEGGER_RTT.c ****   RdOff = pRTTCB->aUp[BufferIndex].RdOff;
 4287              		.loc 1 2089 9
 4288 000c 3969     		ldr	r1, [r7, #16]
 4289 000e 7A68     		ldr	r2, [r7, #4]
 4290 0010 1346     		mov	r3, r2
 4291 0012 5B00     		lsls	r3, r3, #1
 4292 0014 1344     		add	r3, r3, r2
 4293 0016 DB00     		lsls	r3, r3, #3
 4294 0018 0B44     		add	r3, r3, r1
 4295 001a 2833     		adds	r3, r3, #40
 4296 001c 1B68     		ldr	r3, [r3]
 4297 001e FB60     		str	r3, [r7, #12]
2090:Core/Src/SEGGER_RTT.c ****   WrOff = pRTTCB->aUp[BufferIndex].WrOff;
 4298              		.loc 1 2090 9
 4299 0020 3969     		ldr	r1, [r7, #16]
 4300 0022 7A68     		ldr	r2, [r7, #4]
 4301 0024 1346     		mov	r3, r2
 4302 0026 5B00     		lsls	r3, r3, #1
 4303 0028 1344     		add	r3, r3, r2
 4304 002a DB00     		lsls	r3, r3, #3
 4305 002c 0B44     		add	r3, r3, r1
 4306 002e 2433     		adds	r3, r3, #36
 4307 0030 1B68     		ldr	r3, [r3]
 4308 0032 BB60     		str	r3, [r7, #8]
2091:Core/Src/SEGGER_RTT.c ****   if (RdOff <= WrOff) {
 4309              		.loc 1 2091 6
 4310 0034 FA68     		ldr	r2, [r7, #12]
 4311 0036 BB68     		ldr	r3, [r7, #8]
 4312 0038 9A42     		cmp	r2, r3
 4313 003a 04D8     		bhi	.L234
2092:Core/Src/SEGGER_RTT.c ****     r = WrOff - RdOff;
 4314              		.loc 1 2092 7
 4315 003c BA68     		ldr	r2, [r7, #8]
 4316 003e FB68     		ldr	r3, [r7, #12]
 4317 0040 D31A     		subs	r3, r2, r3
 4318 0042 7B61     		str	r3, [r7, #20]
 4319 0044 0DE0     		b	.L235
 4320              	.L234:
2093:Core/Src/SEGGER_RTT.c ****   } else {
2094:Core/Src/SEGGER_RTT.c ****     r = pRTTCB->aUp[BufferIndex].SizeOfBuffer - (WrOff - RdOff);
 4321              		.loc 1 2094 33
 4322 0046 3969     		ldr	r1, [r7, #16]
 4323 0048 7A68     		ldr	r2, [r7, #4]
 4324 004a 1346     		mov	r3, r2
 4325 004c 5B00     		lsls	r3, r3, #1
 4326 004e 1344     		add	r3, r3, r2
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 113


 4327 0050 DB00     		lsls	r3, r3, #3
 4328 0052 0B44     		add	r3, r3, r1
 4329 0054 2033     		adds	r3, r3, #32
 4330 0056 1A68     		ldr	r2, [r3]
 4331              		.loc 1 2094 47
 4332 0058 F968     		ldr	r1, [r7, #12]
 4333 005a BB68     		ldr	r3, [r7, #8]
 4334 005c CB1A     		subs	r3, r1, r3
 4335              		.loc 1 2094 7
 4336 005e 1344     		add	r3, r3, r2
 4337 0060 7B61     		str	r3, [r7, #20]
 4338              	.L235:
2095:Core/Src/SEGGER_RTT.c ****   }
2096:Core/Src/SEGGER_RTT.c ****   return r;
 4339              		.loc 1 2096 10
 4340 0062 7B69     		ldr	r3, [r7, #20]
2097:Core/Src/SEGGER_RTT.c **** }
 4341              		.loc 1 2097 1
 4342 0064 1846     		mov	r0, r3
 4343 0066 1C37     		adds	r7, r7, #28
 4344              	.LCFI179:
 4345              		.cfi_def_cfa_offset 4
 4346 0068 BD46     		mov	sp, r7
 4347              	.LCFI180:
 4348              		.cfi_def_cfa_register 13
 4349              		@ sp needed
 4350 006a 5DF8047B 		ldr	r7, [sp], #4
 4351              	.LCFI181:
 4352              		.cfi_restore 7
 4353              		.cfi_def_cfa_offset 0
 4354 006e 7047     		bx	lr
 4355              	.L238:
 4356              		.align	2
 4357              	.L237:
 4358 0070 00000000 		.word	_SEGGER_RTT
 4359              		.cfi_endproc
 4360              	.LFE35:
 4362              		.section	.rodata._aInitStr.0,"a"
 4363              		.align	2
 4366              	_aInitStr.0:
 4367 0000 00000000 		.ascii	"\000\000\000\000\000\000TTR REGGES\000"
 4367      00005454 
 4367      52205245 
 4367      47474553 
 4367      00
 4368              		.text
 4369              	.Letext0:
 4370              		.file 2 "C:/Program Files (x86)/Arm GNU Toolchain arm-none-eabi/13.2 Rel1/lib/gcc/arm-none-eabi/13
 4371              		.file 3 "C:/Program Files (x86)/Arm GNU Toolchain arm-none-eabi/13.2 Rel1/arm-none-eabi/include/ma
 4372              		.file 4 "C:/Program Files (x86)/Arm GNU Toolchain arm-none-eabi/13.2 Rel1/arm-none-eabi/include/sy
 4373              		.file 5 "Core/Inc/SEGGER_RTT.h"
 4374              		.file 6 "C:/Program Files (x86)/Arm GNU Toolchain arm-none-eabi/13.2 Rel1/arm-none-eabi/include/st
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 114


DEFINED SYMBOLS
                            *ABS*:00000000 SEGGER_RTT.c
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:21     .rodata._aTerminalId:00000000 $d
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:24     .rodata._aTerminalId:00000000 _aTerminalId
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:31     .bss._SEGGER_RTT:00000000 _SEGGER_RTT
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:28     .bss._SEGGER_RTT:00000000 $d
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:34     .bss._acUpBuffer:00000000 $d
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:37     .bss._acUpBuffer:00000000 _acUpBuffer
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:40     .bss._acDownBuffer:00000000 $d
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:43     .bss._acDownBuffer:00000000 _acDownBuffer
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:48     .bss._ActiveTerminal:00000000 _ActiveTerminal
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:49     .bss._ActiveTerminal:00000000 $d
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:51     .rodata:00000000 $d
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:55     .text._DoInit:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:60     .text._DoInit:00000000 _DoInit
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:197    .text._DoInit:000000a0 $d
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:4366   .rodata._aInitStr.0:00000000 _aInitStr.0
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:206    .text._WriteBlocking:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:211    .text._WriteBlocking:00000000 _WriteBlocking
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:363    .text._WriteNoCheck:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:368    .text._WriteNoCheck:00000000 _WriteNoCheck
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:493    .text._PostTerminalSwitch:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:498    .text._PostTerminalSwitch:00000000 _PostTerminalSwitch
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:546    .text._PostTerminalSwitch:00000030 $d
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:551    .text._GetAvailWriteSpace:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:556    .text._GetAvailWriteSpace:00000000 _GetAvailWriteSpace
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:629    .text.SEGGER_RTT_ReadUpBufferNoLock:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:635    .text.SEGGER_RTT_ReadUpBufferNoLock:00000000 SEGGER_RTT_ReadUpBufferNoLock
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:827    .text.SEGGER_RTT_ReadUpBufferNoLock:00000108 $d
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:832    .text.SEGGER_RTT_ReadNoLock:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:838    .text.SEGGER_RTT_ReadNoLock:00000000 SEGGER_RTT_ReadNoLock
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:1030   .text.SEGGER_RTT_ReadNoLock:00000108 $d
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:1035   .text.SEGGER_RTT_ReadUpBuffer:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:1041   .text.SEGGER_RTT_ReadUpBuffer:00000000 SEGGER_RTT_ReadUpBuffer
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:1105   .text.SEGGER_RTT_Read:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:1111   .text.SEGGER_RTT_Read:00000000 SEGGER_RTT_Read
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:1175   .text.SEGGER_RTT_WriteWithOverwriteNoLock:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:1181   .text.SEGGER_RTT_WriteWithOverwriteNoLock:00000000 SEGGER_RTT_WriteWithOverwriteNoLock
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:1419   .text.SEGGER_RTT_WriteWithOverwriteNoLock:00000120 $d
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:1424   .text.SEGGER_RTT_WriteDownBufferNoLock:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:1430   .text.SEGGER_RTT_WriteDownBufferNoLock:00000000 SEGGER_RTT_WriteDownBufferNoLock
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:1552   .text.SEGGER_RTT_WriteDownBufferNoLock:0000009c $d
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:1557   .text.SEGGER_RTT_WriteNoLock:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:1563   .text.SEGGER_RTT_WriteNoLock:00000000 SEGGER_RTT_WriteNoLock
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:1685   .text.SEGGER_RTT_WriteNoLock:0000009c $d
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:1690   .text.SEGGER_RTT_WriteDownBuffer:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:1696   .text.SEGGER_RTT_WriteDownBuffer:00000000 SEGGER_RTT_WriteDownBuffer
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:1772   .text.SEGGER_RTT_WriteDownBuffer:00000048 $d
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:1777   .text.SEGGER_RTT_Write:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:1783   .text.SEGGER_RTT_Write:00000000 SEGGER_RTT_Write
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:1859   .text.SEGGER_RTT_Write:00000048 $d
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:1864   .text.SEGGER_RTT_WriteString:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:1870   .text.SEGGER_RTT_WriteString:00000000 SEGGER_RTT_WriteString
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:1913   .text.SEGGER_RTT_PutCharSkipNoLock:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:1919   .text.SEGGER_RTT_PutCharSkipNoLock:00000000 SEGGER_RTT_PutCharSkipNoLock
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:2026   .text.SEGGER_RTT_PutCharSkipNoLock:00000074 $d
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:2031   .text.SEGGER_RTT_PutCharSkip:00000000 $t
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 115


C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:2037   .text.SEGGER_RTT_PutCharSkip:00000000 SEGGER_RTT_PutCharSkip
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:2175   .text.SEGGER_RTT_PutCharSkip:00000094 $d
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:2180   .text.SEGGER_RTT_PutChar:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:2186   .text.SEGGER_RTT_PutChar:00000000 SEGGER_RTT_PutChar
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:2341   .text.SEGGER_RTT_PutChar:000000a8 $d
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:2346   .text.SEGGER_RTT_GetKey:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:2352   .text.SEGGER_RTT_GetKey:00000000 SEGGER_RTT_GetKey
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:2408   .text.SEGGER_RTT_WaitKey:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:2414   .text.SEGGER_RTT_WaitKey:00000000 SEGGER_RTT_WaitKey
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:2455   .text.SEGGER_RTT_HasKey:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:2461   .text.SEGGER_RTT_HasKey:00000000 SEGGER_RTT_HasKey
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:2529   .text.SEGGER_RTT_HasKey:00000040 $d
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:2535   .text.SEGGER_RTT_HasData:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:2541   .text.SEGGER_RTT_HasData:00000000 SEGGER_RTT_HasData
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:2596   .text.SEGGER_RTT_HasData:00000034 $d
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:2601   .text.SEGGER_RTT_HasDataUp:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:2607   .text.SEGGER_RTT_HasDataUp:00000000 SEGGER_RTT_HasDataUp
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:2662   .text.SEGGER_RTT_HasDataUp:00000034 $d
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:2667   .text.SEGGER_RTT_AllocDownBuffer:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:2673   .text.SEGGER_RTT_AllocDownBuffer:00000000 SEGGER_RTT_AllocDownBuffer
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:2867   .text.SEGGER_RTT_AllocDownBuffer:00000100 $d
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:2872   .text.SEGGER_RTT_AllocUpBuffer:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:2878   .text.SEGGER_RTT_AllocUpBuffer:00000000 SEGGER_RTT_AllocUpBuffer
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:3074   .text.SEGGER_RTT_AllocUpBuffer:00000104 $d
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:3079   .text.SEGGER_RTT_ConfigUpBuffer:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:3085   .text.SEGGER_RTT_ConfigUpBuffer:00000000 SEGGER_RTT_ConfigUpBuffer
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:3211   .text.SEGGER_RTT_ConfigUpBuffer:00000090 $d
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:3216   .text.SEGGER_RTT_ConfigDownBuffer:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:3222   .text.SEGGER_RTT_ConfigDownBuffer:00000000 SEGGER_RTT_ConfigDownBuffer
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:3356   .text.SEGGER_RTT_ConfigDownBuffer:00000094 $d
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:3361   .text.SEGGER_RTT_SetNameUpBuffer:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:3367   .text.SEGGER_RTT_SetNameUpBuffer:00000000 SEGGER_RTT_SetNameUpBuffer
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:3466   .text.SEGGER_RTT_SetNameUpBuffer:00000068 $d
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:3471   .text.SEGGER_RTT_SetNameDownBuffer:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:3477   .text.SEGGER_RTT_SetNameDownBuffer:00000000 SEGGER_RTT_SetNameDownBuffer
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:3576   .text.SEGGER_RTT_SetNameDownBuffer:00000068 $d
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:3581   .text.SEGGER_RTT_SetFlagsUpBuffer:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:3587   .text.SEGGER_RTT_SetFlagsUpBuffer:00000000 SEGGER_RTT_SetFlagsUpBuffer
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:3686   .text.SEGGER_RTT_SetFlagsUpBuffer:00000068 $d
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:3691   .text.SEGGER_RTT_SetFlagsDownBuffer:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:3697   .text.SEGGER_RTT_SetFlagsDownBuffer:00000000 SEGGER_RTT_SetFlagsDownBuffer
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:3796   .text.SEGGER_RTT_SetFlagsDownBuffer:00000068 $d
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:3801   .text.SEGGER_RTT_Init:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:3807   .text.SEGGER_RTT_Init:00000000 SEGGER_RTT_Init
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:3830   .text.SEGGER_RTT_SetTerminal:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:3836   .text.SEGGER_RTT_SetTerminal:00000000 SEGGER_RTT_SetTerminal
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:3974   .text.SEGGER_RTT_SetTerminal:000000a8 $d
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:3982   .text.SEGGER_RTT_TerminalOut:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:3988   .text.SEGGER_RTT_TerminalOut:00000000 SEGGER_RTT_TerminalOut
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:4197   .text.SEGGER_RTT_TerminalOut:0000011c $d
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:4204   .text.SEGGER_RTT_GetAvailWriteSpace:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:4210   .text.SEGGER_RTT_GetAvailWriteSpace:00000000 SEGGER_RTT_GetAvailWriteSpace
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:4255   .text.SEGGER_RTT_GetAvailWriteSpace:0000002c $d
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:4260   .text.SEGGER_RTT_GetBytesInBuffer:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:4266   .text.SEGGER_RTT_GetBytesInBuffer:00000000 SEGGER_RTT_GetBytesInBuffer
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:4358   .text.SEGGER_RTT_GetBytesInBuffer:00000070 $d
C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s:4363   .rodata._aInitStr.0:00000000 $d
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\ccea1ewu.s 			page 116


                           .group:00000000 wm4.0.f079ee757cd02b273648dd4f0fb0fb55
                           .group:00000000 wm4.SEGGER_RTT_Conf.h.59.2e8eb984a219996e2ba347277233bc2d
                           .group:00000000 wm4.SEGGER_RTT.h.147.e9269338dc91c0deb410c789275bb3f3
                           .group:00000000 wm4.ieeefp.h.77.5ad60f72ea25fc152400b550ac118212
                           .group:00000000 wm4._newlib_version.h.4.6d111ab2e95434b664b53815e5c8ccba
                           .group:00000000 wm4.newlib.h.27.d4bf77c18f14f545101dac22f0b54118
                           .group:00000000 wm4.features.h.22.4e5514d51694f64cae235f84d9e565a5
                           .group:00000000 wm4.config.h.224.10ee1ad185d877c6e334e6581faab44d
                           .group:00000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.stddef.h.185.882514a1a6169ceba9142f401cbe27c6
                           .group:00000000 wm4.stddef.h.39.794fa375de48dda278c4aebb5c74aa5b
                           .group:00000000 wm4._default_types.h.6.959254cf5f09734ea7516c89e8bb21bd
                           .group:00000000 wm4.cdefs.h.49.70fc7af612f78ddcace70fdd90b5623b
                           .group:00000000 wm4._types.h.20.dd0d04dca3800a0d2a6129b87f3adbb2
                           .group:00000000 wm4.stddef.h.158.6f8e08a347b1cff664332fa350bfceb3
                           .group:00000000 wm4._types.h.127.3bdfe3ff8ea2d0985b03d9cbe93480e3
                           .group:00000000 wm4.reent.h.18.25503cdc8b7e55dd0d6ea7b3e5af7a03
                           .group:00000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:00000000 wm4.reent.h.78.7f0775353a33c852a1479c008f68cd03
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.56.f4862cfbf4363a1db01842d5bdf72c18
                           .group:00000000 wm4.stdarg.h.31.f7f4f3bfddce9ed034956076d59396f7
                           .group:00000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.SEGGER_RTT.h.301.d7fa48155a2ba9362898c9543a662609
                           .group:00000000 wm4.string.h.8.c4b8571ce60dff2817f43fec8b86aecd
                           .group:00000000 wm4.stddef.h.158.eec8bf00b5213f43d095cb984c5f22e3

UNDEFINED SYMBOLS
memset
memcpy
strlen
