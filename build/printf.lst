ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"printf.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/printf.c"
  20              		.section	.text.get_bit_access,"ax",%progbits
  21              		.align	1
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	get_bit_access:
  27              	.LFB0:
   1:Core/Src/printf.c **** /**
   2:Core/Src/printf.c ****  * @author (c) Eyal Rozenberg <eyalroz1@gmx.com>
   3:Core/Src/printf.c ****  *             2021-2022, Haifa, Palestine/Israel
   4:Core/Src/printf.c ****  * @author (c) Marco Paland (info@paland.com)
   5:Core/Src/printf.c ****  *             2014-2019, PALANDesign Hannover, Germany
   6:Core/Src/printf.c ****  *
   7:Core/Src/printf.c ****  * @note Others have made smaller contributions to this file: see the
   8:Core/Src/printf.c ****  * contributors page at https://github.com/eyalroz/printf/graphs/contributors
   9:Core/Src/printf.c ****  * or ask one of the authors. The original code for exponential specifiers was
  10:Core/Src/printf.c ****  * contributed by Martijn Jasperse <m.jasperse@gmail.com>.
  11:Core/Src/printf.c ****  *
  12:Core/Src/printf.c ****  * @brief Small stand-alone implementation of the printf family of functions
  13:Core/Src/printf.c ****  * (`(v)printf`, `(v)s(n)printf` etc., geared towards use on embedded systems with
  14:Core/Src/printf.c ****  * a very limited resources.
  15:Core/Src/printf.c ****  *
  16:Core/Src/printf.c ****  * @note the implementations are thread-safe; re-entrant; use no functions from
  17:Core/Src/printf.c ****  * the standard library; and do not dynamically allocate any memory.
  18:Core/Src/printf.c ****  *
  19:Core/Src/printf.c ****  * @license The MIT License (MIT)
  20:Core/Src/printf.c ****  *
  21:Core/Src/printf.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy
  22:Core/Src/printf.c ****  * of this software and associated documentation files (the "Software"), to deal
  23:Core/Src/printf.c ****  * in the Software without restriction, including without limitation the rights
  24:Core/Src/printf.c ****  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  25:Core/Src/printf.c ****  * copies of the Software, and to permit persons to whom the Software is
  26:Core/Src/printf.c ****  * furnished to do so, subject to the following conditions:
  27:Core/Src/printf.c ****  *
  28:Core/Src/printf.c ****  * The above copyright notice and this permission notice shall be included in
  29:Core/Src/printf.c ****  * all copies or substantial portions of the Software.
  30:Core/Src/printf.c ****  *
  31:Core/Src/printf.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 2


  32:Core/Src/printf.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  33:Core/Src/printf.c ****  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  34:Core/Src/printf.c ****  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  35:Core/Src/printf.c ****  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  36:Core/Src/printf.c ****  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  37:Core/Src/printf.c ****  * THE SOFTWARE.
  38:Core/Src/printf.c ****  */
  39:Core/Src/printf.c **** 
  40:Core/Src/printf.c **** // Define this globally (e.g. gcc -DPRINTF_INCLUDE_CONFIG_H=1 ...) to include the
  41:Core/Src/printf.c **** // printf_config.h header file
  42:Core/Src/printf.c **** #if PRINTF_INCLUDE_CONFIG_H
  43:Core/Src/printf.c **** #include "printf_config.h"
  44:Core/Src/printf.c **** #endif
  45:Core/Src/printf.c **** 
  46:Core/Src/printf.c **** #include <printf.h>
  47:Core/Src/printf.c **** 
  48:Core/Src/printf.c **** #ifdef __cplusplus
  49:Core/Src/printf.c **** #include <cstdint>
  50:Core/Src/printf.c **** #include <climits>
  51:Core/Src/printf.c **** #else
  52:Core/Src/printf.c **** #include <stdint.h>
  53:Core/Src/printf.c **** #include <limits.h>
  54:Core/Src/printf.c **** #include <stdbool.h>
  55:Core/Src/printf.c **** #endif // __cplusplus
  56:Core/Src/printf.c **** 
  57:Core/Src/printf.c **** #if PRINTF_ALIAS_STANDARD_FUNCTION_NAMES
  58:Core/Src/printf.c **** # define printf_    printf
  59:Core/Src/printf.c **** # define sprintf_   sprintf
  60:Core/Src/printf.c **** # define vsprintf_  vsprintf
  61:Core/Src/printf.c **** # define snprintf_  snprintf
  62:Core/Src/printf.c **** # define vsnprintf_ vsnprintf
  63:Core/Src/printf.c **** # define vprintf_   vprintf
  64:Core/Src/printf.c **** #endif
  65:Core/Src/printf.c **** 
  66:Core/Src/printf.c **** 
  67:Core/Src/printf.c **** // 'ntoa' conversion buffer size, this must be big enough to hold one converted
  68:Core/Src/printf.c **** // numeric number including padded zeros (dynamically created on stack)
  69:Core/Src/printf.c **** #ifndef PRINTF_INTEGER_BUFFER_SIZE
  70:Core/Src/printf.c **** #define PRINTF_INTEGER_BUFFER_SIZE    32
  71:Core/Src/printf.c **** #endif
  72:Core/Src/printf.c **** 
  73:Core/Src/printf.c **** // size of the fixed (on-stack) buffer for printing individual decimal numbers.
  74:Core/Src/printf.c **** // this must be big enough to hold one converted floating-point value including
  75:Core/Src/printf.c **** // padded zeros.
  76:Core/Src/printf.c **** #ifndef PRINTF_DECIMAL_BUFFER_SIZE
  77:Core/Src/printf.c **** #define PRINTF_DECIMAL_BUFFER_SIZE    32
  78:Core/Src/printf.c **** #endif
  79:Core/Src/printf.c **** 
  80:Core/Src/printf.c **** // Support for the decimal notation floating point conversion specifiers (%f, %F)
  81:Core/Src/printf.c **** #ifndef PRINTF_SUPPORT_DECIMAL_SPECIFIERS
  82:Core/Src/printf.c **** #define PRINTF_SUPPORT_DECIMAL_SPECIFIERS 1
  83:Core/Src/printf.c **** #endif
  84:Core/Src/printf.c **** 
  85:Core/Src/printf.c **** // Support for the exponential notation floating point conversion specifiers (%e, %g, %E, %G)
  86:Core/Src/printf.c **** #ifndef PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS
  87:Core/Src/printf.c **** #define PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS 1
  88:Core/Src/printf.c **** #endif
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 3


  89:Core/Src/printf.c **** 
  90:Core/Src/printf.c **** // Support for the length write-back specifier (%n)
  91:Core/Src/printf.c **** #ifndef PRINTF_SUPPORT_WRITEBACK_SPECIFIER
  92:Core/Src/printf.c **** #define PRINTF_SUPPORT_WRITEBACK_SPECIFIER 1
  93:Core/Src/printf.c **** #endif
  94:Core/Src/printf.c **** 
  95:Core/Src/printf.c **** // Default precision for the floating point conversion specifiers (the C standard sets this at 6)
  96:Core/Src/printf.c **** #ifndef PRINTF_DEFAULT_FLOAT_PRECISION
  97:Core/Src/printf.c **** #define PRINTF_DEFAULT_FLOAT_PRECISION  6
  98:Core/Src/printf.c **** #endif
  99:Core/Src/printf.c **** 
 100:Core/Src/printf.c **** // According to the C languages standard, printf() and related functions must be able to print any
 101:Core/Src/printf.c **** // integral number in floating-point notation, regardless of length, when using the %f specifier -
 102:Core/Src/printf.c **** // possibly hundreds of characters, potentially overflowing your buffers. In this implementation,
 103:Core/Src/printf.c **** // all values beyond this threshold are switched to exponential notation.
 104:Core/Src/printf.c **** #ifndef PRINTF_MAX_INTEGRAL_DIGITS_FOR_DECIMAL
 105:Core/Src/printf.c **** #define PRINTF_MAX_INTEGRAL_DIGITS_FOR_DECIMAL 9
 106:Core/Src/printf.c **** #endif
 107:Core/Src/printf.c **** 
 108:Core/Src/printf.c **** // Support for the long long integral types (with the ll, z and t length modifiers for specifiers
 109:Core/Src/printf.c **** // %d,%i,%o,%x,%X,%u, and with the %p specifier). Note: 'L' (long double) is not supported.
 110:Core/Src/printf.c **** #ifndef PRINTF_SUPPORT_LONG_LONG
 111:Core/Src/printf.c **** #define PRINTF_SUPPORT_LONG_LONG 1
 112:Core/Src/printf.c **** #endif
 113:Core/Src/printf.c **** 
 114:Core/Src/printf.c **** // The number of terms in a Taylor series expansion of log_10(x) to
 115:Core/Src/printf.c **** // use for approximation - including the power-zero term (i.e. the
 116:Core/Src/printf.c **** // value at the point of expansion).
 117:Core/Src/printf.c **** #ifndef PRINTF_LOG10_TAYLOR_TERMS
 118:Core/Src/printf.c **** #define PRINTF_LOG10_TAYLOR_TERMS 4
 119:Core/Src/printf.c **** #endif
 120:Core/Src/printf.c **** 
 121:Core/Src/printf.c **** #if PRINTF_LOG10_TAYLOR_TERMS <= 1
 122:Core/Src/printf.c **** #error "At least one non-constant Taylor expansion is necessary for the log10() calculation"
 123:Core/Src/printf.c **** #endif
 124:Core/Src/printf.c **** 
 125:Core/Src/printf.c **** // Be extra-safe, and don't assume format specifiers are completed correctly
 126:Core/Src/printf.c **** // before the format string end.
 127:Core/Src/printf.c **** #ifndef PRINTF_CHECK_FOR_NUL_IN_FORMAT_SPECIFIER
 128:Core/Src/printf.c **** #define PRINTF_CHECK_FOR_NUL_IN_FORMAT_SPECIFIER 1
 129:Core/Src/printf.c **** #endif
 130:Core/Src/printf.c **** 
 131:Core/Src/printf.c **** #define PRINTF_PREFER_DECIMAL     false
 132:Core/Src/printf.c **** #define PRINTF_PREFER_EXPONENTIAL true
 133:Core/Src/printf.c **** 
 134:Core/Src/printf.c **** ///////////////////////////////////////////////////////////////////////////////
 135:Core/Src/printf.c **** 
 136:Core/Src/printf.c **** // The following will convert the number-of-digits into an exponential-notation literal
 137:Core/Src/printf.c **** #define PRINTF_CONCATENATE(s1, s2) s1##s2
 138:Core/Src/printf.c **** #define PRINTF_EXPAND_THEN_CONCATENATE(s1, s2) PRINTF_CONCATENATE(s1, s2)
 139:Core/Src/printf.c **** #define PRINTF_FLOAT_NOTATION_THRESHOLD PRINTF_EXPAND_THEN_CONCATENATE(1e,PRINTF_MAX_INTEGRAL_DIGIT
 140:Core/Src/printf.c **** 
 141:Core/Src/printf.c **** // internal flag definitions
 142:Core/Src/printf.c **** #define FLAGS_ZEROPAD   (1U <<  0U)
 143:Core/Src/printf.c **** #define FLAGS_LEFT      (1U <<  1U)
 144:Core/Src/printf.c **** #define FLAGS_PLUS      (1U <<  2U)
 145:Core/Src/printf.c **** #define FLAGS_SPACE     (1U <<  3U)
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 4


 146:Core/Src/printf.c **** #define FLAGS_HASH      (1U <<  4U)
 147:Core/Src/printf.c **** #define FLAGS_UPPERCASE (1U <<  5U)
 148:Core/Src/printf.c **** #define FLAGS_CHAR      (1U <<  6U)
 149:Core/Src/printf.c **** #define FLAGS_SHORT     (1U <<  7U)
 150:Core/Src/printf.c **** #define FLAGS_INT       (1U <<  8U)
 151:Core/Src/printf.c ****   // Only used with PRINTF_SUPPORT_MSVC_STYLE_INTEGER_SPECIFIERS
 152:Core/Src/printf.c **** #define FLAGS_LONG      (1U <<  9U)
 153:Core/Src/printf.c **** #define FLAGS_LONG_LONG (1U << 10U)
 154:Core/Src/printf.c **** #define FLAGS_PRECISION (1U << 11U)
 155:Core/Src/printf.c **** #define FLAGS_ADAPT_EXP (1U << 12U)
 156:Core/Src/printf.c **** #define FLAGS_POINTER   (1U << 13U)
 157:Core/Src/printf.c ****   // Note: Similar, but not identical, effect as FLAGS_HASH
 158:Core/Src/printf.c **** #define FLAGS_SIGNED    (1U << 14U)
 159:Core/Src/printf.c ****   // Only used with PRINTF_SUPPORT_MSVC_STYLE_INTEGER_SPECIFIERS
 160:Core/Src/printf.c **** 
 161:Core/Src/printf.c **** #ifdef PRINTF_SUPPORT_MSVC_STYLE_INTEGER_SPECIFIERS
 162:Core/Src/printf.c **** 
 163:Core/Src/printf.c **** #define FLAGS_INT8 FLAGS_CHAR
 164:Core/Src/printf.c **** 
 165:Core/Src/printf.c **** 
 166:Core/Src/printf.c **** #if   (SHRT_MAX   == 32767LL)
 167:Core/Src/printf.c **** #define FLAGS_INT16       FLAGS_SHORT
 168:Core/Src/printf.c **** #elif (INT_MAX    == 32767LL)
 169:Core/Src/printf.c **** #define FLAGS_INT16       FLAGS_INT
 170:Core/Src/printf.c **** #elif (LONG_MAX   == 32767LL)
 171:Core/Src/printf.c **** #define FLAGS_INT16       FLAGS_LONG
 172:Core/Src/printf.c **** #elif (LLONG_MAX  == 32767LL)
 173:Core/Src/printf.c **** #define FLAGS_INT16       FLAGS_LONG_LONG
 174:Core/Src/printf.c **** #else
 175:Core/Src/printf.c **** #error "No basic integer type has a size of 16 bits exactly"
 176:Core/Src/printf.c **** #endif
 177:Core/Src/printf.c **** 
 178:Core/Src/printf.c **** #if   (SHRT_MAX   == 2147483647LL)
 179:Core/Src/printf.c **** #define FLAGS_INT32       FLAGS_SHORT
 180:Core/Src/printf.c **** #elif (INT_MAX    == 2147483647LL)
 181:Core/Src/printf.c **** #define FLAGS_INT32       FLAGS_INT
 182:Core/Src/printf.c **** #elif (LONG_MAX   == 2147483647LL)
 183:Core/Src/printf.c **** #define FLAGS_INT32       FLAGS_LONG
 184:Core/Src/printf.c **** #elif (LLONG_MAX  == 2147483647LL)
 185:Core/Src/printf.c **** #define FLAGS_INT32       FLAGS_LONG_LONG
 186:Core/Src/printf.c **** #else
 187:Core/Src/printf.c **** #error "No basic integer type has a size of 32 bits exactly"
 188:Core/Src/printf.c **** #endif
 189:Core/Src/printf.c **** 
 190:Core/Src/printf.c **** #if   (SHRT_MAX   == 9223372036854775807LL)
 191:Core/Src/printf.c **** #define FLAGS_INT64       FLAGS_SHORT
 192:Core/Src/printf.c **** #elif (INT_MAX    == 9223372036854775807LL)
 193:Core/Src/printf.c **** #define FLAGS_INT64       FLAGS_INT
 194:Core/Src/printf.c **** #elif (LONG_MAX   == 9223372036854775807LL)
 195:Core/Src/printf.c **** #define FLAGS_INT64       FLAGS_LONG
 196:Core/Src/printf.c **** #elif (LLONG_MAX  == 9223372036854775807LL)
 197:Core/Src/printf.c **** #define FLAGS_INT64       FLAGS_LONG_LONG
 198:Core/Src/printf.c **** #else
 199:Core/Src/printf.c **** #error "No basic integer type has a size of 64 bits exactly"
 200:Core/Src/printf.c **** #endif
 201:Core/Src/printf.c **** 
 202:Core/Src/printf.c **** #endif // PRINTF_SUPPORT_MSVC_STYLE_INTEGER_SPECIFIERS
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 5


 203:Core/Src/printf.c **** 
 204:Core/Src/printf.c **** 
 205:Core/Src/printf.c **** typedef unsigned int printf_flags_t;
 206:Core/Src/printf.c **** 
 207:Core/Src/printf.c **** #define BASE_BINARY    2
 208:Core/Src/printf.c **** #define BASE_OCTAL     8
 209:Core/Src/printf.c **** #define BASE_DECIMAL  10
 210:Core/Src/printf.c **** #define BASE_HEX      16
 211:Core/Src/printf.c **** 
 212:Core/Src/printf.c **** typedef uint8_t numeric_base_t;
 213:Core/Src/printf.c **** 
 214:Core/Src/printf.c **** #if PRINTF_SUPPORT_LONG_LONG
 215:Core/Src/printf.c **** typedef unsigned long long printf_unsigned_value_t;
 216:Core/Src/printf.c **** typedef long long          printf_signed_value_t;
 217:Core/Src/printf.c **** #else
 218:Core/Src/printf.c **** typedef unsigned long printf_unsigned_value_t;
 219:Core/Src/printf.c **** typedef long          printf_signed_value_t;
 220:Core/Src/printf.c **** #endif
 221:Core/Src/printf.c **** 
 222:Core/Src/printf.c **** // The printf()-family functions return an `int`; it is therefore
 223:Core/Src/printf.c **** // unnecessary/inappropriate to use size_t - often larger than int
 224:Core/Src/printf.c **** // in practice - for non-negative related values, such as widths,
 225:Core/Src/printf.c **** // precisions, offsets into buffers used for printing and the sizes
 226:Core/Src/printf.c **** // of these buffers. instead, we use:
 227:Core/Src/printf.c **** typedef unsigned int printf_size_t;
 228:Core/Src/printf.c **** #define PRINTF_MAX_POSSIBLE_BUFFER_SIZE INT_MAX
 229:Core/Src/printf.c ****   // If we were to nitpick, this would actually be INT_MAX + 1,
 230:Core/Src/printf.c ****   // since INT_MAX is the maximum return value, which excludes the
 231:Core/Src/printf.c ****   // trailing '\0'.
 232:Core/Src/printf.c **** 
 233:Core/Src/printf.c **** #if (PRINTF_SUPPORT_DECIMAL_SPECIFIERS || PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS)
 234:Core/Src/printf.c **** #include <float.h>
 235:Core/Src/printf.c **** #if FLT_RADIX != 2
 236:Core/Src/printf.c **** #error "Non-binary-radix floating-point types are unsupported."
 237:Core/Src/printf.c **** #endif
 238:Core/Src/printf.c **** 
 239:Core/Src/printf.c **** #if DBL_MANT_DIG == 24
 240:Core/Src/printf.c **** 
 241:Core/Src/printf.c **** #define DOUBLE_SIZE_IN_BITS 32
 242:Core/Src/printf.c **** typedef uint32_t double_uint_t;
 243:Core/Src/printf.c **** #define DOUBLE_EXPONENT_MASK 0xFFU
 244:Core/Src/printf.c **** #define DOUBLE_BASE_EXPONENT 127
 245:Core/Src/printf.c **** #define DOUBLE_MAX_SUBNORMAL_EXPONENT_OF_10 -38
 246:Core/Src/printf.c **** #define DOUBLE_MAX_SUBNORMAL_POWER_OF_10 1e-38
 247:Core/Src/printf.c **** 
 248:Core/Src/printf.c **** #elif DBL_MANT_DIG == 53
 249:Core/Src/printf.c **** 
 250:Core/Src/printf.c **** #define DOUBLE_SIZE_IN_BITS 64
 251:Core/Src/printf.c **** typedef uint64_t double_uint_t;
 252:Core/Src/printf.c **** #define DOUBLE_EXPONENT_MASK 0x7FFU
 253:Core/Src/printf.c **** #define DOUBLE_BASE_EXPONENT 1023
 254:Core/Src/printf.c **** #define DOUBLE_MAX_SUBNORMAL_EXPONENT_OF_10 -308
 255:Core/Src/printf.c **** #define DOUBLE_MAX_SUBNORMAL_POWER_OF_10 1e-308
 256:Core/Src/printf.c **** 
 257:Core/Src/printf.c **** #else
 258:Core/Src/printf.c **** #error "Unsupported double type configuration"
 259:Core/Src/printf.c **** #endif
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 6


 260:Core/Src/printf.c **** #define DOUBLE_STORED_MANTISSA_BITS (DBL_MANT_DIG - 1)
 261:Core/Src/printf.c **** 
 262:Core/Src/printf.c **** typedef union {
 263:Core/Src/printf.c ****   double_uint_t U;
 264:Core/Src/printf.c ****   double        F;
 265:Core/Src/printf.c **** } double_with_bit_access;
 266:Core/Src/printf.c **** 
 267:Core/Src/printf.c **** // This is unnecessary in C99, since compound initializers can be used,
 268:Core/Src/printf.c **** // but:
 269:Core/Src/printf.c **** // 1. Some compilers are finicky about this;
 270:Core/Src/printf.c **** // 2. Some people may want to convert this to C89;
 271:Core/Src/printf.c **** // 3. If you try to use it as C++, only C++20 supports compound literals
 272:Core/Src/printf.c **** static inline double_with_bit_access get_bit_access(double x)
 273:Core/Src/printf.c **** {
  28              		.loc 1 273 1
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 24
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 80B4     		push	{r7}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 4
  36              		.cfi_offset 7, -4
  37 0002 87B0     		sub	sp, sp, #28
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 32
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
  43 0006 F860     		str	r0, [r7, #12]
  44 0008 87ED000B 		vstr.64	d0, [r7]
 274:Core/Src/printf.c ****   double_with_bit_access dwba;
 275:Core/Src/printf.c ****   dwba.F = x;
  45              		.loc 1 275 10
  46 000c D7E90023 		ldrd	r2, [r7]
  47 0010 C7E90423 		strd	r2, [r7, #16]
 276:Core/Src/printf.c ****   return dwba;
  48              		.loc 1 276 10
  49 0014 F968     		ldr	r1, [r7, #12]
  50 0016 D7E90423 		ldrd	r2, [r7, #16]
  51 001a C1E90023 		strd	r2, [r1]
 277:Core/Src/printf.c **** }
  52              		.loc 1 277 1
  53 001e F868     		ldr	r0, [r7, #12]
  54 0020 1C37     		adds	r7, r7, #28
  55              	.LCFI3:
  56              		.cfi_def_cfa_offset 4
  57 0022 BD46     		mov	sp, r7
  58              	.LCFI4:
  59              		.cfi_def_cfa_register 13
  60              		@ sp needed
  61 0024 5DF8047B 		ldr	r7, [sp], #4
  62              	.LCFI5:
  63              		.cfi_restore 7
  64              		.cfi_def_cfa_offset 0
  65 0028 7047     		bx	lr
  66              		.cfi_endproc
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 7


  67              	.LFE0:
  69              		.section	.text.get_sign_bit,"ax",%progbits
  70              		.align	1
  71              		.syntax unified
  72              		.thumb
  73              		.thumb_func
  75              	get_sign_bit:
  76              	.LFB1:
 278:Core/Src/printf.c **** 
 279:Core/Src/printf.c **** static inline int get_sign_bit(double x)
 280:Core/Src/printf.c **** {
  77              		.loc 1 280 1
  78              		.cfi_startproc
  79              		@ args = 0, pretend = 0, frame = 16
  80              		@ frame_needed = 1, uses_anonymous_args = 0
  81 0000 80B5     		push	{r7, lr}
  82              	.LCFI6:
  83              		.cfi_def_cfa_offset 8
  84              		.cfi_offset 7, -8
  85              		.cfi_offset 14, -4
  86 0002 84B0     		sub	sp, sp, #16
  87              	.LCFI7:
  88              		.cfi_def_cfa_offset 24
  89 0004 00AF     		add	r7, sp, #0
  90              	.LCFI8:
  91              		.cfi_def_cfa_register 7
  92 0006 87ED000B 		vstr.64	d0, [r7]
 281:Core/Src/printf.c ****   // The sign is stored in the highest bit
 282:Core/Src/printf.c ****   return (int) (get_bit_access(x).U >> (DOUBLE_SIZE_IN_BITS - 1));
  93              		.loc 1 282 17
  94 000a 07F10803 		add	r3, r7, #8
  95 000e 97ED000B 		vldr.64	d0, [r7]
  96 0012 1846     		mov	r0, r3
  97 0014 FFF7FEFF 		bl	get_bit_access
  98              		.loc 1 282 34 discriminator 1
  99 0018 D7E90201 		ldrd	r0, [r7, #8]
 100              		.loc 1 282 37 discriminator 1
 101 001c 4FF00002 		mov	r2, #0
 102 0020 4FF00003 		mov	r3, #0
 103 0024 CA0F     		lsrs	r2, r1, #31
 104 0026 0023     		movs	r3, #0
 105              		.loc 1 282 10 discriminator 1
 106 0028 1346     		mov	r3, r2
 283:Core/Src/printf.c **** }
 107              		.loc 1 283 1
 108 002a 1846     		mov	r0, r3
 109 002c 1037     		adds	r7, r7, #16
 110              	.LCFI9:
 111              		.cfi_def_cfa_offset 8
 112 002e BD46     		mov	sp, r7
 113              	.LCFI10:
 114              		.cfi_def_cfa_register 13
 115              		@ sp needed
 116 0030 80BD     		pop	{r7, pc}
 117              		.cfi_endproc
 118              	.LFE1:
 120              		.section	.text.get_exp2,"ax",%progbits
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 8


 121              		.align	1
 122              		.syntax unified
 123              		.thumb
 124              		.thumb_func
 126              	get_exp2:
 127              	.LFB2:
 284:Core/Src/printf.c **** 
 285:Core/Src/printf.c **** static inline int get_exp2(double_with_bit_access x)
 286:Core/Src/printf.c **** {
 128              		.loc 1 286 1
 129              		.cfi_startproc
 130              		@ args = 0, pretend = 0, frame = 8
 131              		@ frame_needed = 1, uses_anonymous_args = 0
 132              		@ link register save eliminated.
 133 0000 80B4     		push	{r7}
 134              	.LCFI11:
 135              		.cfi_def_cfa_offset 4
 136              		.cfi_offset 7, -4
 137 0002 83B0     		sub	sp, sp, #12
 138              	.LCFI12:
 139              		.cfi_def_cfa_offset 16
 140 0004 00AF     		add	r7, sp, #0
 141              	.LCFI13:
 142              		.cfi_def_cfa_register 7
 143 0006 C7E90001 		strd	r0, [r7]
 287:Core/Src/printf.c ****   // The exponent in an IEEE-754 floating-point number occupies a contiguous
 288:Core/Src/printf.c ****   // sequence of bits (e.g. 52..62 for 64-bit doubles), but with a non-trivial representation: An
 289:Core/Src/printf.c ****   // unsigned offset from some negative value (with the extremal offset values reserved for
 290:Core/Src/printf.c ****   // special use).
 291:Core/Src/printf.c ****   return (int)((x.U >> DOUBLE_STORED_MANTISSA_BITS ) & DOUBLE_EXPONENT_MASK) - DOUBLE_BASE_EXPONENT
 144              		.loc 1 291 18
 145 000a D7E90001 		ldrd	r0, [r7]
 146              		.loc 1 291 21
 147 000e 4FF00002 		mov	r2, #0
 148 0012 4FF00003 		mov	r3, #0
 149 0016 0A0D     		lsrs	r2, r1, #20
 150 0018 0023     		movs	r3, #0
 151              		.loc 1 291 54
 152 001a 1346     		mov	r3, r2
 153              		.loc 1 291 10
 154 001c C3F30A03 		ubfx	r3, r3, #0, #11
 155              		.loc 1 291 78
 156 0020 A3F2FF33 		subw	r3, r3, #1023
 292:Core/Src/printf.c **** }
 157              		.loc 1 292 1
 158 0024 1846     		mov	r0, r3
 159 0026 0C37     		adds	r7, r7, #12
 160              	.LCFI14:
 161              		.cfi_def_cfa_offset 4
 162 0028 BD46     		mov	sp, r7
 163              	.LCFI15:
 164              		.cfi_def_cfa_register 13
 165              		@ sp needed
 166 002a 5DF8047B 		ldr	r7, [sp], #4
 167              	.LCFI16:
 168              		.cfi_restore 7
 169              		.cfi_def_cfa_offset 0
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 9


 170 002e 7047     		bx	lr
 171              		.cfi_endproc
 172              	.LFE2:
 174              		.section	.text.putchar_via_gadget,"ax",%progbits
 175              		.align	1
 176              		.syntax unified
 177              		.thumb
 178              		.thumb_func
 180              	putchar_via_gadget:
 181              	.LFB3:
 293:Core/Src/printf.c **** #define PRINTF_ABS(_x) ( (_x) > 0 ? (_x) : -(_x) )
 294:Core/Src/printf.c **** 
 295:Core/Src/printf.c **** #endif // (PRINTF_SUPPORT_DECIMAL_SPECIFIERS || PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS)
 296:Core/Src/printf.c **** 
 297:Core/Src/printf.c **** // Note in particular the behavior here on LONG_MIN or LLONG_MIN; it is valid
 298:Core/Src/printf.c **** // and well-defined, but if you're not careful you can easily trigger undefined
 299:Core/Src/printf.c **** // behavior with -LONG_MIN or -LLONG_MIN
 300:Core/Src/printf.c **** #define ABS_FOR_PRINTING(_x) ((printf_unsigned_value_t) ( (_x) > 0 ? (_x) : -((printf_signed_value_
 301:Core/Src/printf.c **** 
 302:Core/Src/printf.c **** // wrapper (used as buffer) for output function type
 303:Core/Src/printf.c **** //
 304:Core/Src/printf.c **** // One of the following must hold:
 305:Core/Src/printf.c **** // 1. max_chars is 0
 306:Core/Src/printf.c **** // 2. buffer is non-null
 307:Core/Src/printf.c **** // 3. function is non-null
 308:Core/Src/printf.c **** //
 309:Core/Src/printf.c **** // ... otherwise bad things will happen.
 310:Core/Src/printf.c **** typedef struct {
 311:Core/Src/printf.c ****   void (*function)(char c, void* extra_arg);
 312:Core/Src/printf.c ****   void* extra_function_arg;
 313:Core/Src/printf.c ****   char* buffer;
 314:Core/Src/printf.c ****   printf_size_t pos;
 315:Core/Src/printf.c ****   printf_size_t max_chars;
 316:Core/Src/printf.c **** } output_gadget_t;
 317:Core/Src/printf.c **** 
 318:Core/Src/printf.c **** // Note: This function currently assumes it is not passed a '\0' c,
 319:Core/Src/printf.c **** // or alternatively, that '\0' can be passed to the function in the output
 320:Core/Src/printf.c **** // gadget. The former assumption holds within the printf library. It also
 321:Core/Src/printf.c **** // assumes that the output gadget has been properly initialized.
 322:Core/Src/printf.c **** static inline void putchar_via_gadget(output_gadget_t* gadget, char c)
 323:Core/Src/printf.c **** {
 182              		.loc 1 323 1
 183              		.cfi_startproc
 184              		@ args = 0, pretend = 0, frame = 16
 185              		@ frame_needed = 1, uses_anonymous_args = 0
 186 0000 80B5     		push	{r7, lr}
 187              	.LCFI17:
 188              		.cfi_def_cfa_offset 8
 189              		.cfi_offset 7, -8
 190              		.cfi_offset 14, -4
 191 0002 84B0     		sub	sp, sp, #16
 192              	.LCFI18:
 193              		.cfi_def_cfa_offset 24
 194 0004 00AF     		add	r7, sp, #0
 195              	.LCFI19:
 196              		.cfi_def_cfa_register 7
 197 0006 7860     		str	r0, [r7, #4]
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 10


 198 0008 0B46     		mov	r3, r1
 199 000a FB70     		strb	r3, [r7, #3]
 324:Core/Src/printf.c ****   printf_size_t write_pos = gadget->pos++;
 200              		.loc 1 324 35
 201 000c 7B68     		ldr	r3, [r7, #4]
 202 000e DB68     		ldr	r3, [r3, #12]
 203              		.loc 1 324 40
 204 0010 591C     		adds	r1, r3, #1
 205 0012 7A68     		ldr	r2, [r7, #4]
 206 0014 D160     		str	r1, [r2, #12]
 207              		.loc 1 324 17
 208 0016 FB60     		str	r3, [r7, #12]
 325:Core/Src/printf.c ****     // We're _always_ increasing pos, so as to count how may characters
 326:Core/Src/printf.c ****     // _would_ have been written if not for the max_chars limitation
 327:Core/Src/printf.c ****   if (write_pos >= gadget->max_chars) {
 209              		.loc 1 327 26
 210 0018 7B68     		ldr	r3, [r7, #4]
 211 001a 1B69     		ldr	r3, [r3, #16]
 212              		.loc 1 327 6
 213 001c FA68     		ldr	r2, [r7, #12]
 214 001e 9A42     		cmp	r2, r3
 215 0020 12D2     		bcs	.L11
 328:Core/Src/printf.c ****     return;
 329:Core/Src/printf.c ****   }
 330:Core/Src/printf.c ****   if (gadget->function != NULL) {
 216              		.loc 1 330 13
 217 0022 7B68     		ldr	r3, [r7, #4]
 218 0024 1B68     		ldr	r3, [r3]
 219              		.loc 1 330 6
 220 0026 002B     		cmp	r3, #0
 221 0028 07D0     		beq	.L10
 331:Core/Src/printf.c ****     // No check for c == '\0' .
 332:Core/Src/printf.c ****     gadget->function(c, gadget->extra_function_arg);
 222              		.loc 1 332 11
 223 002a 7B68     		ldr	r3, [r7, #4]
 224 002c 1B68     		ldr	r3, [r3]
 225              		.loc 1 332 5
 226 002e 7A68     		ldr	r2, [r7, #4]
 227 0030 5168     		ldr	r1, [r2, #4]
 228 0032 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 229 0034 1046     		mov	r0, r2
 230 0036 9847     		blx	r3
 231              	.LVL0:
 232 0038 07E0     		b	.L7
 233              	.L10:
 333:Core/Src/printf.c ****   }
 334:Core/Src/printf.c ****   else {
 335:Core/Src/printf.c ****     // it must be the case that gadget->buffer != NULL , due to the constraint
 336:Core/Src/printf.c ****     // on output_gadget_t ; and note we're relying on write_pos being non-negative.
 337:Core/Src/printf.c ****     gadget->buffer[write_pos] = c;
 234              		.loc 1 337 11
 235 003a 7B68     		ldr	r3, [r7, #4]
 236 003c 9A68     		ldr	r2, [r3, #8]
 237              		.loc 1 337 19
 238 003e FB68     		ldr	r3, [r7, #12]
 239 0040 1344     		add	r3, r3, r2
 240              		.loc 1 337 31
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 11


 241 0042 FA78     		ldrb	r2, [r7, #3]
 242 0044 1A70     		strb	r2, [r3]
 243 0046 00E0     		b	.L7
 244              	.L11:
 328:Core/Src/printf.c ****   }
 245              		.loc 1 328 5
 246 0048 00BF     		nop
 247              	.L7:
 338:Core/Src/printf.c ****   }
 339:Core/Src/printf.c **** }
 248              		.loc 1 339 1
 249 004a 1037     		adds	r7, r7, #16
 250              	.LCFI20:
 251              		.cfi_def_cfa_offset 8
 252 004c BD46     		mov	sp, r7
 253              	.LCFI21:
 254              		.cfi_def_cfa_register 13
 255              		@ sp needed
 256 004e 80BD     		pop	{r7, pc}
 257              		.cfi_endproc
 258              	.LFE3:
 260              		.section	.text.append_termination_with_gadget,"ax",%progbits
 261              		.align	1
 262              		.syntax unified
 263              		.thumb
 264              		.thumb_func
 266              	append_termination_with_gadget:
 267              	.LFB4:
 340:Core/Src/printf.c **** 
 341:Core/Src/printf.c **** // Possibly-write the string-terminating '\0' character
 342:Core/Src/printf.c **** static inline void append_termination_with_gadget(output_gadget_t* gadget)
 343:Core/Src/printf.c **** {
 268              		.loc 1 343 1
 269              		.cfi_startproc
 270              		@ args = 0, pretend = 0, frame = 16
 271              		@ frame_needed = 1, uses_anonymous_args = 0
 272              		@ link register save eliminated.
 273 0000 80B4     		push	{r7}
 274              	.LCFI22:
 275              		.cfi_def_cfa_offset 4
 276              		.cfi_offset 7, -4
 277 0002 85B0     		sub	sp, sp, #20
 278              	.LCFI23:
 279              		.cfi_def_cfa_offset 24
 280 0004 00AF     		add	r7, sp, #0
 281              	.LCFI24:
 282              		.cfi_def_cfa_register 7
 283 0006 7860     		str	r0, [r7, #4]
 344:Core/Src/printf.c ****   if (gadget->function != NULL || gadget->max_chars == 0) {
 284              		.loc 1 344 13
 285 0008 7B68     		ldr	r3, [r7, #4]
 286 000a 1B68     		ldr	r3, [r3]
 287              		.loc 1 344 6
 288 000c 002B     		cmp	r3, #0
 289 000e 1BD1     		bne	.L19
 290              		.loc 1 344 41 discriminator 1
 291 0010 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 12


 292 0012 1B69     		ldr	r3, [r3, #16]
 293              		.loc 1 344 32 discriminator 1
 294 0014 002B     		cmp	r3, #0
 295 0016 17D0     		beq	.L19
 345:Core/Src/printf.c ****     return;
 346:Core/Src/printf.c ****   }
 347:Core/Src/printf.c ****   if (gadget->buffer == NULL) {
 296              		.loc 1 347 13
 297 0018 7B68     		ldr	r3, [r7, #4]
 298 001a 9B68     		ldr	r3, [r3, #8]
 299              		.loc 1 347 6
 300 001c 002B     		cmp	r3, #0
 301 001e 15D0     		beq	.L20
 348:Core/Src/printf.c ****     return;
 349:Core/Src/printf.c ****   }
 350:Core/Src/printf.c ****   printf_size_t null_char_pos = gadget->pos < gadget->max_chars ? gadget->pos : gadget->max_chars -
 302              		.loc 1 350 39
 303 0020 7B68     		ldr	r3, [r7, #4]
 304 0022 DA68     		ldr	r2, [r3, #12]
 305              		.loc 1 350 53
 306 0024 7B68     		ldr	r3, [r7, #4]
 307 0026 1B69     		ldr	r3, [r3, #16]
 308              		.loc 1 350 79
 309 0028 9A42     		cmp	r2, r3
 310 002a 02D2     		bcs	.L17
 311              		.loc 1 350 79 is_stmt 0 discriminator 1
 312 002c 7B68     		ldr	r3, [r7, #4]
 313 002e DB68     		ldr	r3, [r3, #12]
 314 0030 02E0     		b	.L18
 315              	.L17:
 316              		.loc 1 350 87 is_stmt 1 discriminator 2
 317 0032 7B68     		ldr	r3, [r7, #4]
 318 0034 1B69     		ldr	r3, [r3, #16]
 319              		.loc 1 350 79 discriminator 2
 320 0036 013B     		subs	r3, r3, #1
 321              	.L18:
 322              		.loc 1 350 17 discriminator 4
 323 0038 FB60     		str	r3, [r7, #12]
 351:Core/Src/printf.c ****   gadget->buffer[null_char_pos] = '\0';
 324              		.loc 1 351 9
 325 003a 7B68     		ldr	r3, [r7, #4]
 326 003c 9A68     		ldr	r2, [r3, #8]
 327              		.loc 1 351 17
 328 003e FB68     		ldr	r3, [r7, #12]
 329 0040 1344     		add	r3, r3, r2
 330              		.loc 1 351 33
 331 0042 0022     		movs	r2, #0
 332 0044 1A70     		strb	r2, [r3]
 333 0046 02E0     		b	.L12
 334              	.L19:
 345:Core/Src/printf.c ****     return;
 335              		.loc 1 345 5
 336 0048 00BF     		nop
 337 004a 00E0     		b	.L12
 338              	.L20:
 348:Core/Src/printf.c ****     return;
 339              		.loc 1 348 5
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 13


 340 004c 00BF     		nop
 341              	.L12:
 352:Core/Src/printf.c **** }
 342              		.loc 1 352 1
 343 004e 1437     		adds	r7, r7, #20
 344              	.LCFI25:
 345              		.cfi_def_cfa_offset 4
 346 0050 BD46     		mov	sp, r7
 347              	.LCFI26:
 348              		.cfi_def_cfa_register 13
 349              		@ sp needed
 350 0052 5DF8047B 		ldr	r7, [sp], #4
 351              	.LCFI27:
 352              		.cfi_restore 7
 353              		.cfi_def_cfa_offset 0
 354 0056 7047     		bx	lr
 355              		.cfi_endproc
 356              	.LFE4:
 358              		.section	.text.putchar_wrapper,"ax",%progbits
 359              		.align	1
 360              		.syntax unified
 361              		.thumb
 362              		.thumb_func
 364              	putchar_wrapper:
 365              	.LFB5:
 353:Core/Src/printf.c **** 
 354:Core/Src/printf.c **** // We can't use putchar_ as is, since our output gadget
 355:Core/Src/printf.c **** // only takes pointers to functions with an extra argument
 356:Core/Src/printf.c **** static inline void putchar_wrapper(char c, void* unused)
 357:Core/Src/printf.c **** {
 366              		.loc 1 357 1
 367              		.cfi_startproc
 368              		@ args = 0, pretend = 0, frame = 8
 369              		@ frame_needed = 1, uses_anonymous_args = 0
 370 0000 80B5     		push	{r7, lr}
 371              	.LCFI28:
 372              		.cfi_def_cfa_offset 8
 373              		.cfi_offset 7, -8
 374              		.cfi_offset 14, -4
 375 0002 82B0     		sub	sp, sp, #8
 376              	.LCFI29:
 377              		.cfi_def_cfa_offset 16
 378 0004 00AF     		add	r7, sp, #0
 379              	.LCFI30:
 380              		.cfi_def_cfa_register 7
 381 0006 0346     		mov	r3, r0
 382 0008 3960     		str	r1, [r7]
 383 000a FB71     		strb	r3, [r7, #7]
 358:Core/Src/printf.c ****   (void) unused;
 359:Core/Src/printf.c ****   putchar_(c);
 384              		.loc 1 359 3
 385 000c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 386 000e 1846     		mov	r0, r3
 387 0010 FFF7FEFF 		bl	putchar_
 360:Core/Src/printf.c **** }
 388              		.loc 1 360 1
 389 0014 00BF     		nop
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 14


 390 0016 0837     		adds	r7, r7, #8
 391              	.LCFI31:
 392              		.cfi_def_cfa_offset 8
 393 0018 BD46     		mov	sp, r7
 394              	.LCFI32:
 395              		.cfi_def_cfa_register 13
 396              		@ sp needed
 397 001a 80BD     		pop	{r7, pc}
 398              		.cfi_endproc
 399              	.LFE5:
 401              		.section	.text.discarding_gadget,"ax",%progbits
 402              		.align	1
 403              		.syntax unified
 404              		.thumb
 405              		.thumb_func
 407              	discarding_gadget:
 408              	.LFB6:
 361:Core/Src/printf.c **** 
 362:Core/Src/printf.c **** static inline output_gadget_t discarding_gadget(void)
 363:Core/Src/printf.c **** {
 409              		.loc 1 363 1
 410              		.cfi_startproc
 411              		@ args = 0, pretend = 0, frame = 32
 412              		@ frame_needed = 1, uses_anonymous_args = 0
 413              		@ link register save eliminated.
 414 0000 B0B4     		push	{r4, r5, r7}
 415              	.LCFI33:
 416              		.cfi_def_cfa_offset 12
 417              		.cfi_offset 4, -12
 418              		.cfi_offset 5, -8
 419              		.cfi_offset 7, -4
 420 0002 89B0     		sub	sp, sp, #36
 421              	.LCFI34:
 422              		.cfi_def_cfa_offset 48
 423 0004 00AF     		add	r7, sp, #0
 424              	.LCFI35:
 425              		.cfi_def_cfa_register 7
 426 0006 7860     		str	r0, [r7, #4]
 364:Core/Src/printf.c ****   output_gadget_t gadget;
 365:Core/Src/printf.c ****   gadget.function = NULL;
 427              		.loc 1 365 19
 428 0008 0023     		movs	r3, #0
 429 000a FB60     		str	r3, [r7, #12]
 366:Core/Src/printf.c ****   gadget.extra_function_arg = NULL;
 430              		.loc 1 366 29
 431 000c 0023     		movs	r3, #0
 432 000e 3B61     		str	r3, [r7, #16]
 367:Core/Src/printf.c ****   gadget.buffer = NULL;
 433              		.loc 1 367 17
 434 0010 0023     		movs	r3, #0
 435 0012 7B61     		str	r3, [r7, #20]
 368:Core/Src/printf.c ****   gadget.pos = 0;
 436              		.loc 1 368 14
 437 0014 0023     		movs	r3, #0
 438 0016 BB61     		str	r3, [r7, #24]
 369:Core/Src/printf.c ****   gadget.max_chars = 0;
 439              		.loc 1 369 20
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 15


 440 0018 0023     		movs	r3, #0
 441 001a FB61     		str	r3, [r7, #28]
 370:Core/Src/printf.c ****   return gadget;
 442              		.loc 1 370 10
 443 001c 7B68     		ldr	r3, [r7, #4]
 444 001e 1D46     		mov	r5, r3
 445 0020 07F10C04 		add	r4, r7, #12
 446 0024 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 447 0026 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 448 0028 2368     		ldr	r3, [r4]
 449 002a 2B60     		str	r3, [r5]
 371:Core/Src/printf.c **** }
 450              		.loc 1 371 1
 451 002c 7868     		ldr	r0, [r7, #4]
 452 002e 2437     		adds	r7, r7, #36
 453              	.LCFI36:
 454              		.cfi_def_cfa_offset 12
 455 0030 BD46     		mov	sp, r7
 456              	.LCFI37:
 457              		.cfi_def_cfa_register 13
 458              		@ sp needed
 459 0032 B0BC     		pop	{r4, r5, r7}
 460              	.LCFI38:
 461              		.cfi_restore 7
 462              		.cfi_restore 5
 463              		.cfi_restore 4
 464              		.cfi_def_cfa_offset 0
 465 0034 7047     		bx	lr
 466              		.cfi_endproc
 467              	.LFE6:
 469              		.section	.text.buffer_gadget,"ax",%progbits
 470              		.align	1
 471              		.syntax unified
 472              		.thumb
 473              		.thumb_func
 475              	buffer_gadget:
 476              	.LFB7:
 372:Core/Src/printf.c **** 
 373:Core/Src/printf.c **** static inline output_gadget_t buffer_gadget(char* buffer, size_t buffer_size)
 374:Core/Src/printf.c **** {
 477              		.loc 1 374 1
 478              		.cfi_startproc
 479              		@ args = 0, pretend = 0, frame = 40
 480              		@ frame_needed = 1, uses_anonymous_args = 0
 481 0000 B0B5     		push	{r4, r5, r7, lr}
 482              	.LCFI39:
 483              		.cfi_def_cfa_offset 16
 484              		.cfi_offset 4, -16
 485              		.cfi_offset 5, -12
 486              		.cfi_offset 7, -8
 487              		.cfi_offset 14, -4
 488 0002 8AB0     		sub	sp, sp, #40
 489              	.LCFI40:
 490              		.cfi_def_cfa_offset 56
 491 0004 00AF     		add	r7, sp, #0
 492              	.LCFI41:
 493              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 16


 494 0006 F860     		str	r0, [r7, #12]
 495 0008 B960     		str	r1, [r7, #8]
 496 000a 7A60     		str	r2, [r7, #4]
 375:Core/Src/printf.c ****   printf_size_t usable_buffer_size = (buffer_size > PRINTF_MAX_POSSIBLE_BUFFER_SIZE) ?
 497              		.loc 1 375 51
 498 000c 7B68     		ldr	r3, [r7, #4]
 376:Core/Src/printf.c ****     PRINTF_MAX_POSSIBLE_BUFFER_SIZE : (printf_size_t) buffer_size;
 499              		.loc 1 376 37
 500 000e 002B     		cmp	r3, #0
 501 0010 01DB     		blt	.L25
 502              		.loc 1 376 37 is_stmt 0 discriminator 1
 503 0012 7B68     		ldr	r3, [r7, #4]
 504 0014 01E0     		b	.L26
 505              	.L25:
 506              		.loc 1 376 37 discriminator 2
 507 0016 6FF00043 		mvn	r3, #-2147483648
 508              	.L26:
 375:Core/Src/printf.c ****   printf_size_t usable_buffer_size = (buffer_size > PRINTF_MAX_POSSIBLE_BUFFER_SIZE) ?
 509              		.loc 1 375 17 is_stmt 1
 510 001a 7B62     		str	r3, [r7, #36]
 377:Core/Src/printf.c ****   output_gadget_t result = discarding_gadget();
 511              		.loc 1 377 28
 512 001c 07F11003 		add	r3, r7, #16
 513 0020 1846     		mov	r0, r3
 514 0022 FFF7FEFF 		bl	discarding_gadget
 378:Core/Src/printf.c ****   if (buffer != NULL) {
 515              		.loc 1 378 6
 516 0026 BB68     		ldr	r3, [r7, #8]
 517 0028 002B     		cmp	r3, #0
 518 002a 03D0     		beq	.L27
 379:Core/Src/printf.c ****     result.buffer = buffer;
 519              		.loc 1 379 19
 520 002c BB68     		ldr	r3, [r7, #8]
 521 002e BB61     		str	r3, [r7, #24]
 380:Core/Src/printf.c ****     result.max_chars = usable_buffer_size;
 522              		.loc 1 380 22
 523 0030 7B6A     		ldr	r3, [r7, #36]
 524 0032 3B62     		str	r3, [r7, #32]
 525              	.L27:
 381:Core/Src/printf.c ****   }
 382:Core/Src/printf.c ****   return result;
 526              		.loc 1 382 10
 527 0034 FB68     		ldr	r3, [r7, #12]
 528 0036 1D46     		mov	r5, r3
 529 0038 07F11004 		add	r4, r7, #16
 530 003c 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 531 003e 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 532 0040 2368     		ldr	r3, [r4]
 533 0042 2B60     		str	r3, [r5]
 383:Core/Src/printf.c **** }
 534              		.loc 1 383 1
 535 0044 F868     		ldr	r0, [r7, #12]
 536 0046 2837     		adds	r7, r7, #40
 537              	.LCFI42:
 538              		.cfi_def_cfa_offset 16
 539 0048 BD46     		mov	sp, r7
 540              	.LCFI43:
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 17


 541              		.cfi_def_cfa_register 13
 542              		@ sp needed
 543 004a B0BD     		pop	{r4, r5, r7, pc}
 544              		.cfi_endproc
 545              	.LFE7:
 547              		.section	.text.function_gadget,"ax",%progbits
 548              		.align	1
 549              		.syntax unified
 550              		.thumb
 551              		.thumb_func
 553              	function_gadget:
 554              	.LFB8:
 384:Core/Src/printf.c **** 
 385:Core/Src/printf.c **** static inline output_gadget_t function_gadget(void (*function)(char, void*), void* extra_arg)
 386:Core/Src/printf.c **** {
 555              		.loc 1 386 1
 556              		.cfi_startproc
 557              		@ args = 0, pretend = 0, frame = 40
 558              		@ frame_needed = 1, uses_anonymous_args = 0
 559 0000 B0B5     		push	{r4, r5, r7, lr}
 560              	.LCFI44:
 561              		.cfi_def_cfa_offset 16
 562              		.cfi_offset 4, -16
 563              		.cfi_offset 5, -12
 564              		.cfi_offset 7, -8
 565              		.cfi_offset 14, -4
 566 0002 8AB0     		sub	sp, sp, #40
 567              	.LCFI45:
 568              		.cfi_def_cfa_offset 56
 569 0004 00AF     		add	r7, sp, #0
 570              	.LCFI46:
 571              		.cfi_def_cfa_register 7
 572 0006 F860     		str	r0, [r7, #12]
 573 0008 B960     		str	r1, [r7, #8]
 574 000a 7A60     		str	r2, [r7, #4]
 387:Core/Src/printf.c ****   output_gadget_t result = discarding_gadget();
 575              		.loc 1 387 28
 576 000c 07F11403 		add	r3, r7, #20
 577 0010 1846     		mov	r0, r3
 578 0012 FFF7FEFF 		bl	discarding_gadget
 388:Core/Src/printf.c ****   result.function = function;
 579              		.loc 1 388 19
 580 0016 BB68     		ldr	r3, [r7, #8]
 581 0018 7B61     		str	r3, [r7, #20]
 389:Core/Src/printf.c ****   result.extra_function_arg = extra_arg;
 582              		.loc 1 389 29
 583 001a 7B68     		ldr	r3, [r7, #4]
 584 001c BB61     		str	r3, [r7, #24]
 390:Core/Src/printf.c ****   result.max_chars = PRINTF_MAX_POSSIBLE_BUFFER_SIZE;
 585              		.loc 1 390 20
 586 001e 6FF00043 		mvn	r3, #-2147483648
 587 0022 7B62     		str	r3, [r7, #36]
 391:Core/Src/printf.c ****   return result;
 588              		.loc 1 391 10
 589 0024 FB68     		ldr	r3, [r7, #12]
 590 0026 1D46     		mov	r5, r3
 591 0028 07F11404 		add	r4, r7, #20
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 18


 592 002c 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 593 002e 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 594 0030 2368     		ldr	r3, [r4]
 595 0032 2B60     		str	r3, [r5]
 392:Core/Src/printf.c **** }
 596              		.loc 1 392 1
 597 0034 F868     		ldr	r0, [r7, #12]
 598 0036 2837     		adds	r7, r7, #40
 599              	.LCFI47:
 600              		.cfi_def_cfa_offset 16
 601 0038 BD46     		mov	sp, r7
 602              	.LCFI48:
 603              		.cfi_def_cfa_register 13
 604              		@ sp needed
 605 003a B0BD     		pop	{r4, r5, r7, pc}
 606              		.cfi_endproc
 607              	.LFE8:
 609              		.section	.text.extern_putchar_gadget,"ax",%progbits
 610              		.align	1
 611              		.syntax unified
 612              		.thumb
 613              		.thumb_func
 615              	extern_putchar_gadget:
 616              	.LFB9:
 393:Core/Src/printf.c **** 
 394:Core/Src/printf.c **** static inline output_gadget_t extern_putchar_gadget(void)
 395:Core/Src/printf.c **** {
 617              		.loc 1 395 1
 618              		.cfi_startproc
 619              		@ args = 0, pretend = 0, frame = 8
 620              		@ frame_needed = 1, uses_anonymous_args = 0
 621 0000 80B5     		push	{r7, lr}
 622              	.LCFI49:
 623              		.cfi_def_cfa_offset 8
 624              		.cfi_offset 7, -8
 625              		.cfi_offset 14, -4
 626 0002 82B0     		sub	sp, sp, #8
 627              	.LCFI50:
 628              		.cfi_def_cfa_offset 16
 629 0004 00AF     		add	r7, sp, #0
 630              	.LCFI51:
 631              		.cfi_def_cfa_register 7
 632 0006 7860     		str	r0, [r7, #4]
 396:Core/Src/printf.c ****   return function_gadget(putchar_wrapper, NULL);
 633              		.loc 1 396 10
 634 0008 7B68     		ldr	r3, [r7, #4]
 635 000a 0022     		movs	r2, #0
 636 000c 0349     		ldr	r1, .L33
 637 000e 1846     		mov	r0, r3
 638 0010 FFF7FEFF 		bl	function_gadget
 397:Core/Src/printf.c **** }
 639              		.loc 1 397 1
 640 0014 7868     		ldr	r0, [r7, #4]
 641 0016 0837     		adds	r7, r7, #8
 642              	.LCFI52:
 643              		.cfi_def_cfa_offset 8
 644 0018 BD46     		mov	sp, r7
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 19


 645              	.LCFI53:
 646              		.cfi_def_cfa_register 13
 647              		@ sp needed
 648 001a 80BD     		pop	{r7, pc}
 649              	.L34:
 650              		.align	2
 651              	.L33:
 652 001c 00000000 		.word	putchar_wrapper
 653              		.cfi_endproc
 654              	.LFE9:
 656              		.section	.text.strnlen_s_,"ax",%progbits
 657              		.align	1
 658              		.syntax unified
 659              		.thumb
 660              		.thumb_func
 662              	strnlen_s_:
 663              	.LFB10:
 398:Core/Src/printf.c **** 
 399:Core/Src/printf.c **** // internal secure strlen
 400:Core/Src/printf.c **** // @return The length of the string (excluding the terminating 0) limited by 'maxsize'
 401:Core/Src/printf.c **** // @note strlen uses size_t, but wes only use this function with printf_size_t
 402:Core/Src/printf.c **** // variables - hence the signature.
 403:Core/Src/printf.c **** static inline printf_size_t strnlen_s_(const char* str, printf_size_t maxsize)
 404:Core/Src/printf.c **** {
 664              		.loc 1 404 1
 665              		.cfi_startproc
 666              		@ args = 0, pretend = 0, frame = 16
 667              		@ frame_needed = 1, uses_anonymous_args = 0
 668              		@ link register save eliminated.
 669 0000 80B4     		push	{r7}
 670              	.LCFI54:
 671              		.cfi_def_cfa_offset 4
 672              		.cfi_offset 7, -4
 673 0002 85B0     		sub	sp, sp, #20
 674              	.LCFI55:
 675              		.cfi_def_cfa_offset 24
 676 0004 00AF     		add	r7, sp, #0
 677              	.LCFI56:
 678              		.cfi_def_cfa_register 7
 679 0006 7860     		str	r0, [r7, #4]
 680 0008 3960     		str	r1, [r7]
 405:Core/Src/printf.c ****   const char* s;
 406:Core/Src/printf.c ****   for (s = str; *s && maxsize--; ++s);
 681              		.loc 1 406 10
 682 000a 7B68     		ldr	r3, [r7, #4]
 683 000c FB60     		str	r3, [r7, #12]
 684              		.loc 1 406 3
 685 000e 02E0     		b	.L36
 686              	.L38:
 687              		.loc 1 406 34 discriminator 4
 688 0010 FB68     		ldr	r3, [r7, #12]
 689 0012 0133     		adds	r3, r3, #1
 690 0014 FB60     		str	r3, [r7, #12]
 691              	.L36:
 692              		.loc 1 406 17 discriminator 1
 693 0016 FB68     		ldr	r3, [r7, #12]
 694 0018 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 20


 695              		.loc 1 406 20 discriminator 1
 696 001a 002B     		cmp	r3, #0
 697 001c 04D0     		beq	.L37
 698              		.loc 1 406 30 discriminator 3
 699 001e 3B68     		ldr	r3, [r7]
 700 0020 5A1E     		subs	r2, r3, #1
 701 0022 3A60     		str	r2, [r7]
 702              		.loc 1 406 20 discriminator 3
 703 0024 002B     		cmp	r3, #0
 704 0026 F3D1     		bne	.L38
 705              	.L37:
 407:Core/Src/printf.c ****   return (printf_size_t)(s - str);
 706              		.loc 1 407 28
 707 0028 FA68     		ldr	r2, [r7, #12]
 708 002a 7B68     		ldr	r3, [r7, #4]
 709 002c D31A     		subs	r3, r2, r3
 408:Core/Src/printf.c **** }
 710              		.loc 1 408 1
 711 002e 1846     		mov	r0, r3
 712 0030 1437     		adds	r7, r7, #20
 713              	.LCFI57:
 714              		.cfi_def_cfa_offset 4
 715 0032 BD46     		mov	sp, r7
 716              	.LCFI58:
 717              		.cfi_def_cfa_register 13
 718              		@ sp needed
 719 0034 5DF8047B 		ldr	r7, [sp], #4
 720              	.LCFI59:
 721              		.cfi_restore 7
 722              		.cfi_def_cfa_offset 0
 723 0038 7047     		bx	lr
 724              		.cfi_endproc
 725              	.LFE10:
 727              		.section	.text.is_digit_,"ax",%progbits
 728              		.align	1
 729              		.syntax unified
 730              		.thumb
 731              		.thumb_func
 733              	is_digit_:
 734              	.LFB11:
 409:Core/Src/printf.c **** 
 410:Core/Src/printf.c **** 
 411:Core/Src/printf.c **** // internal test if char is a digit (0-9)
 412:Core/Src/printf.c **** // @return true if char is a digit
 413:Core/Src/printf.c **** static inline bool is_digit_(char ch)
 414:Core/Src/printf.c **** {
 735              		.loc 1 414 1
 736              		.cfi_startproc
 737              		@ args = 0, pretend = 0, frame = 8
 738              		@ frame_needed = 1, uses_anonymous_args = 0
 739              		@ link register save eliminated.
 740 0000 80B4     		push	{r7}
 741              	.LCFI60:
 742              		.cfi_def_cfa_offset 4
 743              		.cfi_offset 7, -4
 744 0002 83B0     		sub	sp, sp, #12
 745              	.LCFI61:
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 21


 746              		.cfi_def_cfa_offset 16
 747 0004 00AF     		add	r7, sp, #0
 748              	.LCFI62:
 749              		.cfi_def_cfa_register 7
 750 0006 0346     		mov	r3, r0
 751 0008 FB71     		strb	r3, [r7, #7]
 415:Core/Src/printf.c ****   return (ch >= '0') && (ch <= '9');
 752              		.loc 1 415 22
 753 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 754 000c 2F2B     		cmp	r3, #47
 755 000e 04D9     		bls	.L41
 756              		.loc 1 415 22 is_stmt 0 discriminator 1
 757 0010 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 758 0012 392B     		cmp	r3, #57
 759 0014 01D8     		bhi	.L41
 760              		.loc 1 415 22 discriminator 3
 761 0016 0123     		movs	r3, #1
 762              		.loc 1 415 22
 763 0018 00E0     		b	.L42
 764              	.L41:
 765              		.loc 1 415 22 discriminator 4
 766 001a 0023     		movs	r3, #0
 767              	.L42:
 768              		.loc 1 415 22 discriminator 6
 769 001c 03F00103 		and	r3, r3, #1
 770 0020 DBB2     		uxtb	r3, r3
 416:Core/Src/printf.c **** }
 771              		.loc 1 416 1 is_stmt 1
 772 0022 1846     		mov	r0, r3
 773 0024 0C37     		adds	r7, r7, #12
 774              	.LCFI63:
 775              		.cfi_def_cfa_offset 4
 776 0026 BD46     		mov	sp, r7
 777              	.LCFI64:
 778              		.cfi_def_cfa_register 13
 779              		@ sp needed
 780 0028 5DF8047B 		ldr	r7, [sp], #4
 781              	.LCFI65:
 782              		.cfi_restore 7
 783              		.cfi_def_cfa_offset 0
 784 002c 7047     		bx	lr
 785              		.cfi_endproc
 786              	.LFE11:
 788              		.section	.text.atou_,"ax",%progbits
 789              		.align	1
 790              		.syntax unified
 791              		.thumb
 792              		.thumb_func
 794              	atou_:
 795              	.LFB12:
 417:Core/Src/printf.c **** 
 418:Core/Src/printf.c **** 
 419:Core/Src/printf.c **** // internal ASCII string to printf_size_t conversion
 420:Core/Src/printf.c **** static printf_size_t atou_(const char** str)
 421:Core/Src/printf.c **** {
 796              		.loc 1 421 1
 797              		.cfi_startproc
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 22


 798              		@ args = 0, pretend = 0, frame = 16
 799              		@ frame_needed = 1, uses_anonymous_args = 0
 800 0000 80B5     		push	{r7, lr}
 801              	.LCFI66:
 802              		.cfi_def_cfa_offset 8
 803              		.cfi_offset 7, -8
 804              		.cfi_offset 14, -4
 805 0002 84B0     		sub	sp, sp, #16
 806              	.LCFI67:
 807              		.cfi_def_cfa_offset 24
 808 0004 00AF     		add	r7, sp, #0
 809              	.LCFI68:
 810              		.cfi_def_cfa_register 7
 811 0006 7860     		str	r0, [r7, #4]
 422:Core/Src/printf.c ****   printf_size_t i = 0U;
 812              		.loc 1 422 17
 813 0008 0023     		movs	r3, #0
 814 000a FB60     		str	r3, [r7, #12]
 423:Core/Src/printf.c ****   while (is_digit_(**str)) {
 815              		.loc 1 423 9
 816 000c 0EE0     		b	.L45
 817              	.L46:
 424:Core/Src/printf.c ****     i = i * 10U + (printf_size_t)(*((*str)++) - '0');
 818              		.loc 1 424 11
 819 000e FA68     		ldr	r2, [r7, #12]
 820 0010 1346     		mov	r3, r2
 821 0012 9B00     		lsls	r3, r3, #2
 822 0014 1344     		add	r3, r3, r2
 823 0016 5B00     		lsls	r3, r3, #1
 824 0018 1846     		mov	r0, r3
 825              		.loc 1 424 38
 826 001a 7B68     		ldr	r3, [r7, #4]
 827 001c 1B68     		ldr	r3, [r3]
 828              		.loc 1 424 43
 829 001e 591C     		adds	r1, r3, #1
 830 0020 7A68     		ldr	r2, [r7, #4]
 831 0022 1160     		str	r1, [r2]
 832              		.loc 1 424 35
 833 0024 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 834              		.loc 1 424 17
 835 0026 0344     		add	r3, r3, r0
 836              		.loc 1 424 7
 837 0028 303B     		subs	r3, r3, #48
 838 002a FB60     		str	r3, [r7, #12]
 839              	.L45:
 423:Core/Src/printf.c ****   while (is_digit_(**str)) {
 840              		.loc 1 423 21
 841 002c 7B68     		ldr	r3, [r7, #4]
 842 002e 1B68     		ldr	r3, [r3]
 423:Core/Src/printf.c ****   while (is_digit_(**str)) {
 843              		.loc 1 423 10
 844 0030 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 845 0032 1846     		mov	r0, r3
 846 0034 FFF7FEFF 		bl	is_digit_
 847 0038 0346     		mov	r3, r0
 423:Core/Src/printf.c ****   while (is_digit_(**str)) {
 848              		.loc 1 423 10 is_stmt 0 discriminator 1
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 23


 849 003a 002B     		cmp	r3, #0
 850 003c E7D1     		bne	.L46
 425:Core/Src/printf.c ****   }
 426:Core/Src/printf.c ****   return i;
 851              		.loc 1 426 10 is_stmt 1
 852 003e FB68     		ldr	r3, [r7, #12]
 427:Core/Src/printf.c **** }
 853              		.loc 1 427 1
 854 0040 1846     		mov	r0, r3
 855 0042 1037     		adds	r7, r7, #16
 856              	.LCFI69:
 857              		.cfi_def_cfa_offset 8
 858 0044 BD46     		mov	sp, r7
 859              	.LCFI70:
 860              		.cfi_def_cfa_register 13
 861              		@ sp needed
 862 0046 80BD     		pop	{r7, pc}
 863              		.cfi_endproc
 864              	.LFE12:
 866              		.section	.text.out_rev_,"ax",%progbits
 867              		.align	1
 868              		.syntax unified
 869              		.thumb
 870              		.thumb_func
 872              	out_rev_:
 873              	.LFB13:
 428:Core/Src/printf.c **** 
 429:Core/Src/printf.c **** 
 430:Core/Src/printf.c **** // output the specified string in reverse, taking care of any zero-padding
 431:Core/Src/printf.c **** static void out_rev_(output_gadget_t* output, const char* buf, printf_size_t len, printf_size_t wid
 432:Core/Src/printf.c **** {
 874              		.loc 1 432 1
 875              		.cfi_startproc
 876              		@ args = 4, pretend = 0, frame = 24
 877              		@ frame_needed = 1, uses_anonymous_args = 0
 878 0000 80B5     		push	{r7, lr}
 879              	.LCFI71:
 880              		.cfi_def_cfa_offset 8
 881              		.cfi_offset 7, -8
 882              		.cfi_offset 14, -4
 883 0002 86B0     		sub	sp, sp, #24
 884              	.LCFI72:
 885              		.cfi_def_cfa_offset 32
 886 0004 00AF     		add	r7, sp, #0
 887              	.LCFI73:
 888              		.cfi_def_cfa_register 7
 889 0006 F860     		str	r0, [r7, #12]
 890 0008 B960     		str	r1, [r7, #8]
 891 000a 7A60     		str	r2, [r7, #4]
 892 000c 3B60     		str	r3, [r7]
 433:Core/Src/printf.c ****   const printf_size_t start_pos = output->pos;
 893              		.loc 1 433 23
 894 000e FB68     		ldr	r3, [r7, #12]
 895 0010 DB68     		ldr	r3, [r3, #12]
 896 0012 3B61     		str	r3, [r7, #16]
 434:Core/Src/printf.c **** 
 435:Core/Src/printf.c ****   // pad spaces up to given width
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 24


 436:Core/Src/printf.c ****   if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 897              		.loc 1 436 15
 898 0014 3B6A     		ldr	r3, [r7, #32]
 899 0016 03F00203 		and	r3, r3, #2
 900              		.loc 1 436 6
 901 001a 002B     		cmp	r3, #0
 902 001c 1ED1     		bne	.L52
 903              		.loc 1 436 40 discriminator 1
 904 001e 3B6A     		ldr	r3, [r7, #32]
 905 0020 03F00103 		and	r3, r3, #1
 906              		.loc 1 436 29 discriminator 1
 907 0024 002B     		cmp	r3, #0
 908 0026 19D1     		bne	.L52
 909              	.LBB2:
 437:Core/Src/printf.c ****     for (printf_size_t i = len; i < width; i++) {
 910              		.loc 1 437 24
 911 0028 7B68     		ldr	r3, [r7, #4]
 912 002a 7B61     		str	r3, [r7, #20]
 913              		.loc 1 437 5
 914 002c 06E0     		b	.L50
 915              	.L51:
 438:Core/Src/printf.c ****       putchar_via_gadget(output, ' ');
 916              		.loc 1 438 7
 917 002e 2021     		movs	r1, #32
 918 0030 F868     		ldr	r0, [r7, #12]
 919 0032 FFF7FEFF 		bl	putchar_via_gadget
 437:Core/Src/printf.c ****     for (printf_size_t i = len; i < width; i++) {
 920              		.loc 1 437 45 discriminator 3
 921 0036 7B69     		ldr	r3, [r7, #20]
 922 0038 0133     		adds	r3, r3, #1
 923 003a 7B61     		str	r3, [r7, #20]
 924              	.L50:
 437:Core/Src/printf.c ****     for (printf_size_t i = len; i < width; i++) {
 925              		.loc 1 437 35 discriminator 1
 926 003c 7A69     		ldr	r2, [r7, #20]
 927 003e 3B68     		ldr	r3, [r7]
 928 0040 9A42     		cmp	r2, r3
 929 0042 F4D3     		bcc	.L51
 930              	.LBE2:
 439:Core/Src/printf.c ****     }
 440:Core/Src/printf.c ****   }
 441:Core/Src/printf.c **** 
 442:Core/Src/printf.c ****   // reverse string
 443:Core/Src/printf.c ****   while (len) {
 931              		.loc 1 443 9
 932 0044 0AE0     		b	.L52
 933              	.L53:
 444:Core/Src/printf.c ****     putchar_via_gadget(output, buf[--len]);
 934              		.loc 1 444 5
 935 0046 7B68     		ldr	r3, [r7, #4]
 936 0048 013B     		subs	r3, r3, #1
 937 004a 7B60     		str	r3, [r7, #4]
 938              		.loc 1 444 35
 939 004c BA68     		ldr	r2, [r7, #8]
 940 004e 7B68     		ldr	r3, [r7, #4]
 941 0050 1344     		add	r3, r3, r2
 942              		.loc 1 444 5
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 25


 943 0052 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 944 0054 1946     		mov	r1, r3
 945 0056 F868     		ldr	r0, [r7, #12]
 946 0058 FFF7FEFF 		bl	putchar_via_gadget
 947              	.L52:
 443:Core/Src/printf.c ****     putchar_via_gadget(output, buf[--len]);
 948              		.loc 1 443 10
 949 005c 7B68     		ldr	r3, [r7, #4]
 950 005e 002B     		cmp	r3, #0
 951 0060 F1D1     		bne	.L53
 445:Core/Src/printf.c ****   }
 446:Core/Src/printf.c **** 
 447:Core/Src/printf.c ****   // append pad spaces up to given width
 448:Core/Src/printf.c ****   if (flags & FLAGS_LEFT) {
 952              		.loc 1 448 13
 953 0062 3B6A     		ldr	r3, [r7, #32]
 954 0064 03F00203 		and	r3, r3, #2
 955              		.loc 1 448 6
 956 0068 002B     		cmp	r3, #0
 957 006a 0BD0     		beq	.L57
 449:Core/Src/printf.c ****     while (output->pos - start_pos < width) {
 958              		.loc 1 449 11
 959 006c 03E0     		b	.L55
 960              	.L56:
 450:Core/Src/printf.c ****       putchar_via_gadget(output, ' ');
 961              		.loc 1 450 7
 962 006e 2021     		movs	r1, #32
 963 0070 F868     		ldr	r0, [r7, #12]
 964 0072 FFF7FEFF 		bl	putchar_via_gadget
 965              	.L55:
 449:Core/Src/printf.c ****     while (output->pos - start_pos < width) {
 966              		.loc 1 449 18
 967 0076 FB68     		ldr	r3, [r7, #12]
 968 0078 DA68     		ldr	r2, [r3, #12]
 449:Core/Src/printf.c ****     while (output->pos - start_pos < width) {
 969              		.loc 1 449 24
 970 007a 3B69     		ldr	r3, [r7, #16]
 971 007c D31A     		subs	r3, r2, r3
 449:Core/Src/printf.c ****     while (output->pos - start_pos < width) {
 972              		.loc 1 449 36
 973 007e 3A68     		ldr	r2, [r7]
 974 0080 9A42     		cmp	r2, r3
 975 0082 F4D8     		bhi	.L56
 976              	.L57:
 451:Core/Src/printf.c ****     }
 452:Core/Src/printf.c ****   }
 453:Core/Src/printf.c **** }
 977              		.loc 1 453 1
 978 0084 00BF     		nop
 979 0086 1837     		adds	r7, r7, #24
 980              	.LCFI74:
 981              		.cfi_def_cfa_offset 8
 982 0088 BD46     		mov	sp, r7
 983              	.LCFI75:
 984              		.cfi_def_cfa_register 13
 985              		@ sp needed
 986 008a 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 26


 987              		.cfi_endproc
 988              	.LFE13:
 990              		.section	.text.print_integer_finalization,"ax",%progbits
 991              		.align	1
 992              		.syntax unified
 993              		.thumb
 994              		.thumb_func
 996              	print_integer_finalization:
 997              	.LFB14:
 454:Core/Src/printf.c **** 
 455:Core/Src/printf.c **** 
 456:Core/Src/printf.c **** // Invoked by print_integer after the actual number has been printed, performing necessary
 457:Core/Src/printf.c **** // work on the number's prefix (as the number is initially printed in reverse order)
 458:Core/Src/printf.c **** static void print_integer_finalization(output_gadget_t* output, char* buf, printf_size_t len, bool 
 459:Core/Src/printf.c **** {
 998              		.loc 1 459 1
 999              		.cfi_startproc
 1000              		@ args = 16, pretend = 0, frame = 24
 1001              		@ frame_needed = 1, uses_anonymous_args = 0
 1002 0000 80B5     		push	{r7, lr}
 1003              	.LCFI76:
 1004              		.cfi_def_cfa_offset 8
 1005              		.cfi_offset 7, -8
 1006              		.cfi_offset 14, -4
 1007 0002 88B0     		sub	sp, sp, #32
 1008              	.LCFI77:
 1009              		.cfi_def_cfa_offset 40
 1010 0004 02AF     		add	r7, sp, #8
 1011              	.LCFI78:
 1012              		.cfi_def_cfa 7, 32
 1013 0006 F860     		str	r0, [r7, #12]
 1014 0008 B960     		str	r1, [r7, #8]
 1015 000a 7A60     		str	r2, [r7, #4]
 1016 000c FB70     		strb	r3, [r7, #3]
 460:Core/Src/printf.c ****   printf_size_t unpadded_len = len;
 1017              		.loc 1 460 17
 1018 000e 7B68     		ldr	r3, [r7, #4]
 1019 0010 7B61     		str	r3, [r7, #20]
 461:Core/Src/printf.c **** 
 462:Core/Src/printf.c ****   // pad with leading zeros
 463:Core/Src/printf.c ****   {
 464:Core/Src/printf.c ****     if (!(flags & FLAGS_LEFT)) {
 1020              		.loc 1 464 17
 1021 0012 FB6A     		ldr	r3, [r7, #44]
 1022 0014 03F00203 		and	r3, r3, #2
 1023              		.loc 1 464 8
 1024 0018 002B     		cmp	r3, #0
 1025 001a 2ED1     		bne	.L64
 465:Core/Src/printf.c ****       if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 1026              		.loc 1 465 10
 1027 001c BB6A     		ldr	r3, [r7, #40]
 1028 001e 002B     		cmp	r3, #0
 1029 0020 17D0     		beq	.L62
 1030              		.loc 1 465 27 discriminator 1
 1031 0022 FB6A     		ldr	r3, [r7, #44]
 1032 0024 03F00103 		and	r3, r3, #1
 1033              		.loc 1 465 17 discriminator 1
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 27


 1034 0028 002B     		cmp	r3, #0
 1035 002a 12D0     		beq	.L62
 1036              		.loc 1 465 44 discriminator 2
 1037 002c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1038 002e 002B     		cmp	r3, #0
 1039 0030 04D1     		bne	.L61
 1040              		.loc 1 465 67 discriminator 3
 1041 0032 FB6A     		ldr	r3, [r7, #44]
 1042 0034 03F00C03 		and	r3, r3, #12
 1043              		.loc 1 465 57 discriminator 3
 1044 0038 002B     		cmp	r3, #0
 1045 003a 0AD0     		beq	.L62
 1046              	.L61:
 466:Core/Src/printf.c ****         width--;
 1047              		.loc 1 466 14
 1048 003c BB6A     		ldr	r3, [r7, #40]
 1049 003e 013B     		subs	r3, r3, #1
 1050 0040 BB62     		str	r3, [r7, #40]
 467:Core/Src/printf.c ****       }
 468:Core/Src/printf.c ****       while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 1051              		.loc 1 468 13
 1052 0042 06E0     		b	.L62
 1053              	.L63:
 469:Core/Src/printf.c ****         buf[len++] = '0';
 1054              		.loc 1 469 16
 1055 0044 7B68     		ldr	r3, [r7, #4]
 1056 0046 5A1C     		adds	r2, r3, #1
 1057 0048 7A60     		str	r2, [r7, #4]
 1058              		.loc 1 469 12
 1059 004a BA68     		ldr	r2, [r7, #8]
 1060 004c 1344     		add	r3, r3, r2
 1061              		.loc 1 469 20
 1062 004e 3022     		movs	r2, #48
 1063 0050 1A70     		strb	r2, [r3]
 1064              	.L62:
 468:Core/Src/printf.c ****         buf[len++] = '0';
 1065              		.loc 1 468 21
 1066 0052 FB6A     		ldr	r3, [r7, #44]
 1067 0054 03F00103 		and	r3, r3, #1
 468:Core/Src/printf.c ****         buf[len++] = '0';
 1068              		.loc 1 468 55
 1069 0058 002B     		cmp	r3, #0
 1070 005a 0ED0     		beq	.L64
 468:Core/Src/printf.c ****         buf[len++] = '0';
 1071              		.loc 1 468 38 discriminator 1
 1072 005c 7A68     		ldr	r2, [r7, #4]
 1073 005e BB6A     		ldr	r3, [r7, #40]
 1074 0060 9A42     		cmp	r2, r3
 1075 0062 0AD2     		bcs	.L64
 468:Core/Src/printf.c ****         buf[len++] = '0';
 1076              		.loc 1 468 55 discriminator 2
 1077 0064 7B68     		ldr	r3, [r7, #4]
 1078 0066 1F2B     		cmp	r3, #31
 1079 0068 ECD9     		bls	.L63
 470:Core/Src/printf.c ****       }
 471:Core/Src/printf.c ****     }
 472:Core/Src/printf.c **** 
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 28


 473:Core/Src/printf.c ****     while ((len < precision) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 1080              		.loc 1 473 11
 1081 006a 06E0     		b	.L64
 1082              	.L66:
 474:Core/Src/printf.c ****       buf[len++] = '0';
 1083              		.loc 1 474 14
 1084 006c 7B68     		ldr	r3, [r7, #4]
 1085 006e 5A1C     		adds	r2, r3, #1
 1086 0070 7A60     		str	r2, [r7, #4]
 1087              		.loc 1 474 10
 1088 0072 BA68     		ldr	r2, [r7, #8]
 1089 0074 1344     		add	r3, r3, r2
 1090              		.loc 1 474 18
 1091 0076 3022     		movs	r2, #48
 1092 0078 1A70     		strb	r2, [r3]
 1093              	.L64:
 473:Core/Src/printf.c ****       buf[len++] = '0';
 1094              		.loc 1 473 30
 1095 007a 7A68     		ldr	r2, [r7, #4]
 1096 007c 7B6A     		ldr	r3, [r7, #36]
 1097 007e 9A42     		cmp	r2, r3
 1098 0080 02D2     		bcs	.L65
 473:Core/Src/printf.c ****       buf[len++] = '0';
 1099              		.loc 1 473 30 is_stmt 0 discriminator 1
 1100 0082 7B68     		ldr	r3, [r7, #4]
 1101 0084 1F2B     		cmp	r3, #31
 1102 0086 F1D9     		bls	.L66
 1103              	.L65:
 475:Core/Src/printf.c ****     }
 476:Core/Src/printf.c **** 
 477:Core/Src/printf.c ****     if (base == BASE_OCTAL && (len > unpadded_len)) {
 1104              		.loc 1 477 8 is_stmt 1
 1105 0088 97F82030 		ldrb	r3, [r7, #32]	@ zero_extendqisi2
 1106 008c 082B     		cmp	r3, #8
 1107 008e 07D1     		bne	.L67
 1108              		.loc 1 477 28 discriminator 1
 1109 0090 7A68     		ldr	r2, [r7, #4]
 1110 0092 7B69     		ldr	r3, [r7, #20]
 1111 0094 9A42     		cmp	r2, r3
 1112 0096 03D9     		bls	.L67
 478:Core/Src/printf.c ****       // Since we've written some zeros, we've satisfied the alternative format leading space requi
 479:Core/Src/printf.c ****       flags &= ~FLAGS_HASH;
 1113              		.loc 1 479 13
 1114 0098 FB6A     		ldr	r3, [r7, #44]
 1115 009a 23F01003 		bic	r3, r3, #16
 1116 009e FB62     		str	r3, [r7, #44]
 1117              	.L67:
 480:Core/Src/printf.c ****     }
 481:Core/Src/printf.c ****   }
 482:Core/Src/printf.c **** 
 483:Core/Src/printf.c ****   // handle hash
 484:Core/Src/printf.c ****   if (flags & (FLAGS_HASH | FLAGS_POINTER)) {
 1118              		.loc 1 484 13
 1119 00a0 FA6A     		ldr	r2, [r7, #44]
 1120 00a2 42F21003 		movw	r3, #8208
 1121 00a6 1340     		ands	r3, r3, r2
 1122              		.loc 1 484 6
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 29


 1123 00a8 002B     		cmp	r3, #0
 1124 00aa 68D0     		beq	.L68
 485:Core/Src/printf.c ****     if (!(flags & FLAGS_PRECISION) && len && ((len == precision) || (len == width))) {
 1125              		.loc 1 485 17
 1126 00ac FB6A     		ldr	r3, [r7, #44]
 1127 00ae 03F40063 		and	r3, r3, #2048
 1128              		.loc 1 485 8
 1129 00b2 002B     		cmp	r3, #0
 1130 00b4 23D1     		bne	.L69
 1131              		.loc 1 485 36 discriminator 1
 1132 00b6 7B68     		ldr	r3, [r7, #4]
 1133 00b8 002B     		cmp	r3, #0
 1134 00ba 20D0     		beq	.L69
 1135              		.loc 1 485 43 discriminator 2
 1136 00bc 7A68     		ldr	r2, [r7, #4]
 1137 00be 7B6A     		ldr	r3, [r7, #36]
 1138 00c0 9A42     		cmp	r2, r3
 1139 00c2 03D0     		beq	.L70
 1140              		.loc 1 485 66 discriminator 3
 1141 00c4 7A68     		ldr	r2, [r7, #4]
 1142 00c6 BB6A     		ldr	r3, [r7, #40]
 1143 00c8 9A42     		cmp	r2, r3
 1144 00ca 18D1     		bne	.L69
 1145              	.L70:
 486:Core/Src/printf.c ****       // Let's take back some padding digits to fit in what will eventually
 487:Core/Src/printf.c ****       // be the format-specific prefix
 488:Core/Src/printf.c ****       if (unpadded_len < len) {
 1146              		.loc 1 488 10
 1147 00cc 7A69     		ldr	r2, [r7, #20]
 1148 00ce 7B68     		ldr	r3, [r7, #4]
 1149 00d0 9A42     		cmp	r2, r3
 1150 00d2 02D2     		bcs	.L71
 489:Core/Src/printf.c ****         len--; // This should suffice for BASE_OCTAL
 1151              		.loc 1 489 12
 1152 00d4 7B68     		ldr	r3, [r7, #4]
 1153 00d6 013B     		subs	r3, r3, #1
 1154 00d8 7B60     		str	r3, [r7, #4]
 1155              	.L71:
 490:Core/Src/printf.c ****       }
 491:Core/Src/printf.c ****       if (len && (base == BASE_HEX || base == BASE_BINARY) && (unpadded_len < len)) {
 1156              		.loc 1 491 10
 1157 00da 7B68     		ldr	r3, [r7, #4]
 1158 00dc 002B     		cmp	r3, #0
 1159 00de 0ED0     		beq	.L69
 1160              		.loc 1 491 15 discriminator 1
 1161 00e0 97F82030 		ldrb	r3, [r7, #32]	@ zero_extendqisi2
 1162 00e4 102B     		cmp	r3, #16
 1163 00e6 03D0     		beq	.L72
 1164              		.loc 1 491 36 discriminator 3
 1165 00e8 97F82030 		ldrb	r3, [r7, #32]	@ zero_extendqisi2
 1166 00ec 022B     		cmp	r3, #2
 1167 00ee 06D1     		bne	.L69
 1168              	.L72:
 1169              		.loc 1 491 60 discriminator 4
 1170 00f0 7A69     		ldr	r2, [r7, #20]
 1171 00f2 7B68     		ldr	r3, [r7, #4]
 1172 00f4 9A42     		cmp	r2, r3
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 30


 1173 00f6 02D2     		bcs	.L69
 492:Core/Src/printf.c ****         len--; // ... and an extra one for 0x or 0b
 1174              		.loc 1 492 12
 1175 00f8 7B68     		ldr	r3, [r7, #4]
 1176 00fa 013B     		subs	r3, r3, #1
 1177 00fc 7B60     		str	r3, [r7, #4]
 1178              	.L69:
 493:Core/Src/printf.c ****       }
 494:Core/Src/printf.c ****     }
 495:Core/Src/printf.c ****     if ((base == BASE_HEX) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 1179              		.loc 1 495 8
 1180 00fe 97F82030 		ldrb	r3, [r7, #32]	@ zero_extendqisi2
 1181 0102 102B     		cmp	r3, #16
 1182 0104 0FD1     		bne	.L73
 1183              		.loc 1 495 39 discriminator 1
 1184 0106 FB6A     		ldr	r3, [r7, #44]
 1185 0108 03F02003 		and	r3, r3, #32
 1186              		.loc 1 495 28 discriminator 1
 1187 010c 002B     		cmp	r3, #0
 1188 010e 0AD1     		bne	.L73
 1189              		.loc 1 495 58 discriminator 2
 1190 0110 7B68     		ldr	r3, [r7, #4]
 1191 0112 1F2B     		cmp	r3, #31
 1192 0114 07D8     		bhi	.L73
 496:Core/Src/printf.c ****       buf[len++] = 'x';
 1193              		.loc 1 496 14
 1194 0116 7B68     		ldr	r3, [r7, #4]
 1195 0118 5A1C     		adds	r2, r3, #1
 1196 011a 7A60     		str	r2, [r7, #4]
 1197              		.loc 1 496 10
 1198 011c BA68     		ldr	r2, [r7, #8]
 1199 011e 1344     		add	r3, r3, r2
 1200              		.loc 1 496 18
 1201 0120 7822     		movs	r2, #120
 1202 0122 1A70     		strb	r2, [r3]
 1203 0124 21E0     		b	.L74
 1204              	.L73:
 497:Core/Src/printf.c ****     }
 498:Core/Src/printf.c ****     else if ((base == BASE_HEX) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE))
 1205              		.loc 1 498 13
 1206 0126 97F82030 		ldrb	r3, [r7, #32]	@ zero_extendqisi2
 1207 012a 102B     		cmp	r3, #16
 1208 012c 0FD1     		bne	.L75
 1209              		.loc 1 498 43 discriminator 1
 1210 012e FB6A     		ldr	r3, [r7, #44]
 1211 0130 03F02003 		and	r3, r3, #32
 1212              		.loc 1 498 33 discriminator 1
 1213 0134 002B     		cmp	r3, #0
 1214 0136 0AD0     		beq	.L75
 1215              		.loc 1 498 62 discriminator 2
 1216 0138 7B68     		ldr	r3, [r7, #4]
 1217 013a 1F2B     		cmp	r3, #31
 1218 013c 07D8     		bhi	.L75
 499:Core/Src/printf.c ****       buf[len++] = 'X';
 1219              		.loc 1 499 14
 1220 013e 7B68     		ldr	r3, [r7, #4]
 1221 0140 5A1C     		adds	r2, r3, #1
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 31


 1222 0142 7A60     		str	r2, [r7, #4]
 1223              		.loc 1 499 10
 1224 0144 BA68     		ldr	r2, [r7, #8]
 1225 0146 1344     		add	r3, r3, r2
 1226              		.loc 1 499 18
 1227 0148 5822     		movs	r2, #88
 1228 014a 1A70     		strb	r2, [r3]
 1229 014c 0DE0     		b	.L74
 1230              	.L75:
 500:Core/Src/printf.c ****     }
 501:Core/Src/printf.c ****     else if ((base == BASE_BINARY) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 1231              		.loc 1 501 13
 1232 014e 97F82030 		ldrb	r3, [r7, #32]	@ zero_extendqisi2
 1233 0152 022B     		cmp	r3, #2
 1234 0154 09D1     		bne	.L74
 1235              		.loc 1 501 36 discriminator 1
 1236 0156 7B68     		ldr	r3, [r7, #4]
 1237 0158 1F2B     		cmp	r3, #31
 1238 015a 06D8     		bhi	.L74
 502:Core/Src/printf.c ****       buf[len++] = 'b';
 1239              		.loc 1 502 14
 1240 015c 7B68     		ldr	r3, [r7, #4]
 1241 015e 5A1C     		adds	r2, r3, #1
 1242 0160 7A60     		str	r2, [r7, #4]
 1243              		.loc 1 502 10
 1244 0162 BA68     		ldr	r2, [r7, #8]
 1245 0164 1344     		add	r3, r3, r2
 1246              		.loc 1 502 18
 1247 0166 6222     		movs	r2, #98
 1248 0168 1A70     		strb	r2, [r3]
 1249              	.L74:
 503:Core/Src/printf.c ****     }
 504:Core/Src/printf.c ****     if (len < PRINTF_INTEGER_BUFFER_SIZE) {
 1250              		.loc 1 504 8
 1251 016a 7B68     		ldr	r3, [r7, #4]
 1252 016c 1F2B     		cmp	r3, #31
 1253 016e 06D8     		bhi	.L68
 505:Core/Src/printf.c ****       buf[len++] = '0';
 1254              		.loc 1 505 14
 1255 0170 7B68     		ldr	r3, [r7, #4]
 1256 0172 5A1C     		adds	r2, r3, #1
 1257 0174 7A60     		str	r2, [r7, #4]
 1258              		.loc 1 505 10
 1259 0176 BA68     		ldr	r2, [r7, #8]
 1260 0178 1344     		add	r3, r3, r2
 1261              		.loc 1 505 18
 1262 017a 3022     		movs	r2, #48
 1263 017c 1A70     		strb	r2, [r3]
 1264              	.L68:
 506:Core/Src/printf.c ****     }
 507:Core/Src/printf.c ****   }
 508:Core/Src/printf.c **** 
 509:Core/Src/printf.c ****   if (len < PRINTF_INTEGER_BUFFER_SIZE) {
 1265              		.loc 1 509 6
 1266 017e 7B68     		ldr	r3, [r7, #4]
 1267 0180 1F2B     		cmp	r3, #31
 1268 0182 23D8     		bhi	.L76
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 32


 510:Core/Src/printf.c ****     if (negative) {
 1269              		.loc 1 510 8
 1270 0184 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1271 0186 002B     		cmp	r3, #0
 1272 0188 07D0     		beq	.L77
 511:Core/Src/printf.c ****       buf[len++] = '-';
 1273              		.loc 1 511 14
 1274 018a 7B68     		ldr	r3, [r7, #4]
 1275 018c 5A1C     		adds	r2, r3, #1
 1276 018e 7A60     		str	r2, [r7, #4]
 1277              		.loc 1 511 10
 1278 0190 BA68     		ldr	r2, [r7, #8]
 1279 0192 1344     		add	r3, r3, r2
 1280              		.loc 1 511 18
 1281 0194 2D22     		movs	r2, #45
 1282 0196 1A70     		strb	r2, [r3]
 1283 0198 18E0     		b	.L76
 1284              	.L77:
 512:Core/Src/printf.c ****     }
 513:Core/Src/printf.c ****     else if (flags & FLAGS_PLUS) {
 1285              		.loc 1 513 20
 1286 019a FB6A     		ldr	r3, [r7, #44]
 1287 019c 03F00403 		and	r3, r3, #4
 1288              		.loc 1 513 13
 1289 01a0 002B     		cmp	r3, #0
 1290 01a2 07D0     		beq	.L78
 514:Core/Src/printf.c ****       buf[len++] = '+';  // ignore the space if the '+' exists
 1291              		.loc 1 514 14
 1292 01a4 7B68     		ldr	r3, [r7, #4]
 1293 01a6 5A1C     		adds	r2, r3, #1
 1294 01a8 7A60     		str	r2, [r7, #4]
 1295              		.loc 1 514 10
 1296 01aa BA68     		ldr	r2, [r7, #8]
 1297 01ac 1344     		add	r3, r3, r2
 1298              		.loc 1 514 18
 1299 01ae 2B22     		movs	r2, #43
 1300 01b0 1A70     		strb	r2, [r3]
 1301 01b2 0BE0     		b	.L76
 1302              	.L78:
 515:Core/Src/printf.c ****     }
 516:Core/Src/printf.c ****     else if (flags & FLAGS_SPACE) {
 1303              		.loc 1 516 20
 1304 01b4 FB6A     		ldr	r3, [r7, #44]
 1305 01b6 03F00803 		and	r3, r3, #8
 1306              		.loc 1 516 13
 1307 01ba 002B     		cmp	r3, #0
 1308 01bc 06D0     		beq	.L76
 517:Core/Src/printf.c ****       buf[len++] = ' ';
 1309              		.loc 1 517 14
 1310 01be 7B68     		ldr	r3, [r7, #4]
 1311 01c0 5A1C     		adds	r2, r3, #1
 1312 01c2 7A60     		str	r2, [r7, #4]
 1313              		.loc 1 517 10
 1314 01c4 BA68     		ldr	r2, [r7, #8]
 1315 01c6 1344     		add	r3, r3, r2
 1316              		.loc 1 517 18
 1317 01c8 2022     		movs	r2, #32
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 33


 1318 01ca 1A70     		strb	r2, [r3]
 1319              	.L76:
 518:Core/Src/printf.c ****     }
 519:Core/Src/printf.c ****   }
 520:Core/Src/printf.c **** 
 521:Core/Src/printf.c ****   out_rev_(output, buf, len, width, flags);
 1320              		.loc 1 521 3
 1321 01cc FB6A     		ldr	r3, [r7, #44]
 1322 01ce 0093     		str	r3, [sp]
 1323 01d0 BB6A     		ldr	r3, [r7, #40]
 1324 01d2 7A68     		ldr	r2, [r7, #4]
 1325 01d4 B968     		ldr	r1, [r7, #8]
 1326 01d6 F868     		ldr	r0, [r7, #12]
 1327 01d8 FFF7FEFF 		bl	out_rev_
 522:Core/Src/printf.c **** }
 1328              		.loc 1 522 1
 1329 01dc 00BF     		nop
 1330 01de 1837     		adds	r7, r7, #24
 1331              	.LCFI79:
 1332              		.cfi_def_cfa_offset 8
 1333 01e0 BD46     		mov	sp, r7
 1334              	.LCFI80:
 1335              		.cfi_def_cfa_register 13
 1336              		@ sp needed
 1337 01e2 80BD     		pop	{r7, pc}
 1338              		.cfi_endproc
 1339              	.LFE14:
 1341              		.global	__aeabi_uldivmod
 1342              		.section	.text.print_integer,"ax",%progbits
 1343              		.align	1
 1344              		.syntax unified
 1345              		.thumb
 1346              		.thumb_func
 1348              	print_integer:
 1349              	.LFB15:
 523:Core/Src/printf.c **** 
 524:Core/Src/printf.c **** // An internal itoa-like function
 525:Core/Src/printf.c **** static void print_integer(output_gadget_t* output, printf_unsigned_value_t value, bool negative, nu
 526:Core/Src/printf.c **** {
 1350              		.loc 1 526 1
 1351              		.cfi_startproc
 1352              		@ args = 20, pretend = 0, frame = 56
 1353              		@ frame_needed = 1, uses_anonymous_args = 0
 1354 0000 2DE9B043 		push	{r4, r5, r7, r8, r9, lr}
 1355              	.LCFI81:
 1356              		.cfi_def_cfa_offset 24
 1357              		.cfi_offset 4, -24
 1358              		.cfi_offset 5, -20
 1359              		.cfi_offset 7, -16
 1360              		.cfi_offset 8, -12
 1361              		.cfi_offset 9, -8
 1362              		.cfi_offset 14, -4
 1363 0004 92B0     		sub	sp, sp, #72
 1364              	.LCFI82:
 1365              		.cfi_def_cfa_offset 96
 1366 0006 04AF     		add	r7, sp, #16
 1367              	.LCFI83:
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 34


 1368              		.cfi_def_cfa 7, 80
 1369 0008 F860     		str	r0, [r7, #12]
 1370 000a C7E90023 		strd	r2, [r7]
 527:Core/Src/printf.c ****   char buf[PRINTF_INTEGER_BUFFER_SIZE];
 528:Core/Src/printf.c ****   printf_size_t len = 0U;
 1371              		.loc 1 528 17
 1372 000e 0023     		movs	r3, #0
 1373 0010 7B63     		str	r3, [r7, #52]
 529:Core/Src/printf.c **** 
 530:Core/Src/printf.c ****   if (!value) {
 1374              		.loc 1 530 6
 1375 0012 D7E90023 		ldrd	r2, [r7]
 1376 0016 1343     		orrs	r3, r3, r2
 1377 0018 1AD1     		bne	.L80
 531:Core/Src/printf.c ****     if ( !(flags & FLAGS_PRECISION) ) {
 1378              		.loc 1 531 18
 1379 001a 3B6E     		ldr	r3, [r7, #96]
 1380 001c 03F40063 		and	r3, r3, #2048
 1381              		.loc 1 531 8
 1382 0020 002B     		cmp	r3, #0
 1383 0022 0CD1     		bne	.L81
 532:Core/Src/printf.c ****       buf[len++] = '0';
 1384              		.loc 1 532 14
 1385 0024 7B6B     		ldr	r3, [r7, #52]
 1386 0026 5A1C     		adds	r2, r3, #1
 1387 0028 7A63     		str	r2, [r7, #52]
 1388              		.loc 1 532 18
 1389 002a 3833     		adds	r3, r3, #56
 1390 002c 3B44     		add	r3, r3, r7
 1391 002e 3022     		movs	r2, #48
 1392 0030 03F8282C 		strb	r2, [r3, #-40]
 533:Core/Src/printf.c ****       flags &= ~FLAGS_HASH;
 1393              		.loc 1 533 13
 1394 0034 3B6E     		ldr	r3, [r7, #96]
 1395 0036 23F01003 		bic	r3, r3, #16
 1396 003a 3B66     		str	r3, [r7, #96]
 1397 003c 4AE0     		b	.L82
 1398              	.L81:
 534:Core/Src/printf.c ****       // We drop this flag this since either the alternative and regular modes of the specifier
 535:Core/Src/printf.c ****       // don't differ on 0 values, or (in the case of octal) we've already provided the special
 536:Core/Src/printf.c ****       // handling for this mode.
 537:Core/Src/printf.c ****     }
 538:Core/Src/printf.c ****     else if (base == BASE_HEX) {
 1399              		.loc 1 538 13
 1400 003e 97F85430 		ldrb	r3, [r7, #84]	@ zero_extendqisi2
 1401 0042 102B     		cmp	r3, #16
 1402 0044 46D1     		bne	.L82
 539:Core/Src/printf.c ****       flags &= ~FLAGS_HASH;
 1403              		.loc 1 539 13
 1404 0046 3B6E     		ldr	r3, [r7, #96]
 1405 0048 23F01003 		bic	r3, r3, #16
 1406 004c 3B66     		str	r3, [r7, #96]
 1407 004e 41E0     		b	.L82
 1408              	.L80:
 1409              	.LBB3:
 540:Core/Src/printf.c ****       // We drop this flag this since either the alternative and regular modes of the specifier
 541:Core/Src/printf.c ****       // don't differ on 0 values
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 35


 542:Core/Src/printf.c ****     }
 543:Core/Src/printf.c ****   }
 544:Core/Src/printf.c ****   else {
 545:Core/Src/printf.c ****     do {
 546:Core/Src/printf.c ****       const char digit = (char)(value % base);
 1410              		.loc 1 546 39
 1411 0050 97F85430 		ldrb	r3, [r7, #84]	@ zero_extendqisi2
 1412 0054 0022     		movs	r2, #0
 1413 0056 1C46     		mov	r4, r3
 1414 0058 1546     		mov	r5, r2
 1415 005a D7E90001 		ldrd	r0, [r7]
 1416 005e 2246     		mov	r2, r4
 1417 0060 2B46     		mov	r3, r5
 1418 0062 FFF7FEFF 		bl	__aeabi_uldivmod
 1419              		.loc 1 546 18
 1420 0066 1346     		mov	r3, r2
 1421 0068 87F83330 		strb	r3, [r7, #51]
 547:Core/Src/printf.c ****       buf[len++] = (char)(digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit 
 1422              		.loc 1 547 20
 1423 006c 97F83330 		ldrb	r3, [r7, #51]	@ zero_extendqisi2
 1424 0070 092B     		cmp	r3, #9
 1425 0072 04D8     		bhi	.L83
 1426              		.loc 1 547 20 is_stmt 0 discriminator 1
 1427 0074 97F83330 		ldrb	r3, [r7, #51]
 1428 0078 3033     		adds	r3, r3, #48
 1429 007a DAB2     		uxtb	r2, r3
 1430 007c 0DE0     		b	.L84
 1431              	.L83:
 1432              		.loc 1 547 61 is_stmt 1 discriminator 2
 1433 007e 3B6E     		ldr	r3, [r7, #96]
 1434 0080 03F02003 		and	r3, r3, #32
 1435              		.loc 1 547 92 discriminator 2
 1436 0084 002B     		cmp	r3, #0
 1437 0086 01D0     		beq	.L85
 1438              		.loc 1 547 92 is_stmt 0 discriminator 4
 1439 0088 4122     		movs	r2, #65
 1440 008a 00E0     		b	.L86
 1441              	.L85:
 1442              		.loc 1 547 92 discriminator 5
 1443 008c 6122     		movs	r2, #97
 1444              	.L86:
 1445              		.loc 1 547 92 discriminator 7
 1446 008e 97F83330 		ldrb	r3, [r7, #51]
 1447 0092 1344     		add	r3, r3, r2
 1448 0094 DBB2     		uxtb	r3, r3
 1449              		.loc 1 547 20 is_stmt 1 discriminator 7
 1450 0096 0A3B     		subs	r3, r3, #10
 1451 0098 DAB2     		uxtb	r2, r3
 1452              	.L84:
 1453              		.loc 1 547 14 discriminator 8
 1454 009a 7B6B     		ldr	r3, [r7, #52]
 1455 009c 591C     		adds	r1, r3, #1
 1456 009e 7963     		str	r1, [r7, #52]
 1457              		.loc 1 547 18 discriminator 8
 1458 00a0 3833     		adds	r3, r3, #56
 1459 00a2 3B44     		add	r3, r3, r7
 1460 00a4 03F8282C 		strb	r2, [r3, #-40]
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 36


 548:Core/Src/printf.c ****       value /= base;
 1461              		.loc 1 548 13
 1462 00a8 97F85430 		ldrb	r3, [r7, #84]	@ zero_extendqisi2
 1463 00ac 0022     		movs	r2, #0
 1464 00ae 9846     		mov	r8, r3
 1465 00b0 9146     		mov	r9, r2
 1466 00b2 4246     		mov	r2, r8
 1467 00b4 4B46     		mov	r3, r9
 1468 00b6 D7E90001 		ldrd	r0, [r7]
 1469 00ba FFF7FEFF 		bl	__aeabi_uldivmod
 1470 00be 0246     		mov	r2, r0
 1471 00c0 0B46     		mov	r3, r1
 1472 00c2 C7E90023 		strd	r2, [r7]
 1473              	.LBE3:
 549:Core/Src/printf.c ****     } while (value && (len < PRINTF_INTEGER_BUFFER_SIZE));
 1474              		.loc 1 549 20
 1475 00c6 D7E90023 		ldrd	r2, [r7]
 1476 00ca 1343     		orrs	r3, r3, r2
 1477 00cc 02D0     		beq	.L82
 1478              		.loc 1 549 20 is_stmt 0 discriminator 1
 1479 00ce 7B6B     		ldr	r3, [r7, #52]
 1480 00d0 1F2B     		cmp	r3, #31
 1481 00d2 BDD9     		bls	.L80
 1482              	.L82:
 550:Core/Src/printf.c ****   }
 551:Core/Src/printf.c **** 
 552:Core/Src/printf.c ****   print_integer_finalization(output, buf, len, negative, base, precision, width, flags);
 1483              		.loc 1 552 3 is_stmt 1
 1484 00d4 97F85020 		ldrb	r2, [r7, #80]	@ zero_extendqisi2
 1485 00d8 07F11001 		add	r1, r7, #16
 1486 00dc 3B6E     		ldr	r3, [r7, #96]
 1487 00de 0393     		str	r3, [sp, #12]
 1488 00e0 FB6D     		ldr	r3, [r7, #92]
 1489 00e2 0293     		str	r3, [sp, #8]
 1490 00e4 BB6D     		ldr	r3, [r7, #88]
 1491 00e6 0193     		str	r3, [sp, #4]
 1492 00e8 97F85430 		ldrb	r3, [r7, #84]	@ zero_extendqisi2
 1493 00ec 0093     		str	r3, [sp]
 1494 00ee 1346     		mov	r3, r2
 1495 00f0 7A6B     		ldr	r2, [r7, #52]
 1496 00f2 F868     		ldr	r0, [r7, #12]
 1497 00f4 FFF7FEFF 		bl	print_integer_finalization
 553:Core/Src/printf.c **** }
 1498              		.loc 1 553 1
 1499 00f8 00BF     		nop
 1500 00fa 3837     		adds	r7, r7, #56
 1501              	.LCFI84:
 1502              		.cfi_def_cfa_offset 24
 1503 00fc BD46     		mov	sp, r7
 1504              	.LCFI85:
 1505              		.cfi_def_cfa_register 13
 1506              		@ sp needed
 1507 00fe BDE8B083 		pop	{r4, r5, r7, r8, r9, pc}
 1508              		.cfi_endproc
 1509              	.LFE15:
 1511              		.section	.rodata.powers_of_10,"a"
 1512              		.align	3
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 37


 1515              	powers_of_10:
 1516 0000 00000000 		.word	0
 1517 0004 0000F03F 		.word	1072693248
 1518 0008 00000000 		.word	0
 1519 000c 00002440 		.word	1076101120
 1520 0010 00000000 		.word	0
 1521 0014 00005940 		.word	1079574528
 1522 0018 00000000 		.word	0
 1523 001c 00408F40 		.word	1083129856
 1524 0020 00000000 		.word	0
 1525 0024 0088C340 		.word	1086556160
 1526 0028 00000000 		.word	0
 1527 002c 006AF840 		.word	1090021888
 1528 0030 00000000 		.word	0
 1529 0034 80842E41 		.word	1093567616
 1530 0038 00000000 		.word	0
 1531 003c D0126341 		.word	1097011920
 1532 0040 00000000 		.word	0
 1533 0044 84D79741 		.word	1100470148
 1534 0048 00000000 		.word	0
 1535 004c 65CDCD41 		.word	1104006501
 1536 0050 00000020 		.word	536870912
 1537 0054 5FA00242 		.word	1107468383
 1538 0058 000000E8 		.word	-402653184
 1539 005c 76483742 		.word	1110919286
 1540 0060 000000A2 		.word	-1577058304
 1541 0064 941A6D42 		.word	1114446484
 1542 0068 000040E5 		.word	-448790528
 1543 006c 9C30A242 		.word	1117925532
 1544 0070 0000901E 		.word	512753664
 1545 0074 C4BCD642 		.word	1121369284
 1546 0078 00003426 		.word	640942080
 1547 007c F56B0C43 		.word	1124887541
 1548 0080 0080E037 		.word	937459712
 1549 0084 79C34143 		.word	1128383353
 1550 0088 00A0D885 		.word	-2049400832
 1551 008c 57347643 		.word	1131820119
 1552              		.global	__aeabi_d2lz
 1553              		.global	__aeabi_l2d
 1554              		.global	__aeabi_dsub
 1555              		.global	__aeabi_dmul
 1556              		.global	__aeabi_dcmpgt
 1557              		.global	__aeabi_dcmpge
 1558              		.global	__aeabi_dcmpeq
 1559              		.global	__aeabi_dcmplt
 1560              		.section	.text.get_components,"ax",%progbits
 1561              		.align	1
 1562              		.syntax unified
 1563              		.thumb
 1564              		.thumb_func
 1566              	get_components:
 1567              	.LFB16:
 554:Core/Src/printf.c **** 
 555:Core/Src/printf.c **** #if (PRINTF_SUPPORT_DECIMAL_SPECIFIERS || PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS)
 556:Core/Src/printf.c **** 
 557:Core/Src/printf.c **** // Stores a fixed-precision representation of a double relative
 558:Core/Src/printf.c **** // to a fixed precision (which cannot be determined by examining this structure)
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 38


 559:Core/Src/printf.c **** struct double_components {
 560:Core/Src/printf.c ****   int_fast64_t integral;
 561:Core/Src/printf.c ****   int_fast64_t fractional;
 562:Core/Src/printf.c ****     // ... truncation of the actual fractional part of the double value, scaled
 563:Core/Src/printf.c ****     // by the precision value
 564:Core/Src/printf.c ****   bool is_negative;
 565:Core/Src/printf.c **** };
 566:Core/Src/printf.c **** 
 567:Core/Src/printf.c **** #define NUM_DECIMAL_DIGITS_IN_INT64_T 18
 568:Core/Src/printf.c **** #define PRINTF_MAX_PRECOMPUTED_POWER_OF_10  NUM_DECIMAL_DIGITS_IN_INT64_T
 569:Core/Src/printf.c **** static const double powers_of_10[NUM_DECIMAL_DIGITS_IN_INT64_T] = {
 570:Core/Src/printf.c ****   1e00, 1e01, 1e02, 1e03, 1e04, 1e05, 1e06, 1e07, 1e08,
 571:Core/Src/printf.c ****   1e09, 1e10, 1e11, 1e12, 1e13, 1e14, 1e15, 1e16, 1e17
 572:Core/Src/printf.c **** };
 573:Core/Src/printf.c **** 
 574:Core/Src/printf.c **** #define PRINTF_MAX_SUPPORTED_PRECISION NUM_DECIMAL_DIGITS_IN_INT64_T - 1
 575:Core/Src/printf.c **** 
 576:Core/Src/printf.c **** 
 577:Core/Src/printf.c **** // Break up a double number - which is known to be a finite non-negative number -
 578:Core/Src/printf.c **** // into its base-10 parts: integral - before the decimal point, and fractional - after it.
 579:Core/Src/printf.c **** // Taken the precision into account, but does not change it even internally.
 580:Core/Src/printf.c **** static struct double_components get_components(double number, printf_size_t precision)
 581:Core/Src/printf.c **** {
 1568              		.loc 1 581 1
 1569              		.cfi_startproc
 1570              		@ args = 0, pretend = 0, frame = 88
 1571              		@ frame_needed = 1, uses_anonymous_args = 0
 1572 0000 2DE9B04F 		push	{r4, r5, r7, r8, r9, r10, fp, lr}
 1573              	.LCFI86:
 1574              		.cfi_def_cfa_offset 32
 1575              		.cfi_offset 4, -32
 1576              		.cfi_offset 5, -28
 1577              		.cfi_offset 7, -24
 1578              		.cfi_offset 8, -20
 1579              		.cfi_offset 9, -16
 1580              		.cfi_offset 10, -12
 1581              		.cfi_offset 11, -8
 1582              		.cfi_offset 14, -4
 1583 0004 96B0     		sub	sp, sp, #88
 1584              	.LCFI87:
 1585              		.cfi_def_cfa_offset 120
 1586 0006 00AF     		add	r7, sp, #0
 1587              	.LCFI88:
 1588              		.cfi_def_cfa_register 7
 1589 0008 F862     		str	r0, [r7, #44]
 1590 000a 87ED080B 		vstr.64	d0, [r7, #32]
 1591 000e B962     		str	r1, [r7, #40]
 582:Core/Src/printf.c ****   struct double_components number_;
 583:Core/Src/printf.c ****   number_.is_negative = get_sign_bit(number);
 1592              		.loc 1 583 25
 1593 0010 97ED080B 		vldr.64	d0, [r7, #32]
 1594 0014 FFF7FEFF 		bl	get_sign_bit
 1595 0018 0346     		mov	r3, r0
 1596              		.loc 1 583 25 is_stmt 0 discriminator 1
 1597 001a 002B     		cmp	r3, #0
 1598 001c 14BF     		ite	ne
 1599 001e 0123     		movne	r3, #1
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 39


 1600 0020 0023     		moveq	r3, #0
 1601 0022 DBB2     		uxtb	r3, r3
 1602              		.loc 1 583 23 is_stmt 1 discriminator 1
 1603 0024 87F84030 		strb	r3, [r7, #64]
 584:Core/Src/printf.c ****   double abs_number = (number_.is_negative) ? -number : number;
 1604              		.loc 1 584 31
 1605 0028 97F84030 		ldrb	r3, [r7, #64]	@ zero_extendqisi2
 1606              		.loc 1 584 55
 1607 002c 002B     		cmp	r3, #0
 1608 002e 04D0     		beq	.L88
 1609              		.loc 1 584 55 is_stmt 0 discriminator 1
 1610 0030 3C6A     		ldr	r4, [r7, #32]
 1611 0032 7B6A     		ldr	r3, [r7, #36]
 1612 0034 83F00045 		eor	r5, r3, #-2147483648
 1613 0038 01E0     		b	.L89
 1614              	.L88:
 1615              		.loc 1 584 55 discriminator 2
 1616 003a D7E90845 		ldrd	r4, [r7, #32]
 1617              	.L89:
 1618              		.loc 1 584 10 is_stmt 1 discriminator 4
 1619 003e C7E91445 		strd	r4, [r7, #80]
 585:Core/Src/printf.c ****   number_.integral = (int_fast64_t)abs_number;
 1620              		.loc 1 585 22
 1621 0042 D7E91401 		ldrd	r0, [r7, #80]
 1622 0046 FFF7FEFF 		bl	__aeabi_d2lz
 1623 004a 0246     		mov	r2, r0
 1624 004c 0B46     		mov	r3, r1
 1625              		.loc 1 585 20
 1626 004e C7E90C23 		strd	r2, [r7, #48]
 586:Core/Src/printf.c ****   double remainder = (abs_number - (double) number_.integral) * powers_of_10[precision];
 1627              		.loc 1 586 52
 1628 0052 D7E90C23 		ldrd	r2, [r7, #48]
 1629              		.loc 1 586 36
 1630 0056 1046     		mov	r0, r2
 1631 0058 1946     		mov	r1, r3
 1632 005a FFF7FEFF 		bl	__aeabi_l2d
 1633 005e 0246     		mov	r2, r0
 1634 0060 0B46     		mov	r3, r1
 1635              		.loc 1 586 34
 1636 0062 D7E91401 		ldrd	r0, [r7, #80]
 1637 0066 FFF7FEFF 		bl	__aeabi_dsub
 1638 006a 0246     		mov	r2, r0
 1639 006c 0B46     		mov	r3, r1
 1640 006e 1046     		mov	r0, r2
 1641 0070 1946     		mov	r1, r3
 1642              		.loc 1 586 77
 1643 0072 694A     		ldr	r2, .L105
 1644 0074 BB6A     		ldr	r3, [r7, #40]
 1645 0076 DB00     		lsls	r3, r3, #3
 1646 0078 1344     		add	r3, r3, r2
 1647 007a D3E90023 		ldrd	r2, [r3]
 1648              		.loc 1 586 10
 1649 007e FFF7FEFF 		bl	__aeabi_dmul
 1650 0082 0246     		mov	r2, r0
 1651 0084 0B46     		mov	r3, r1
 1652 0086 C7E91223 		strd	r2, [r7, #72]
 587:Core/Src/printf.c ****   number_.fractional = (int_fast64_t)remainder;
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 40


 1653              		.loc 1 587 24
 1654 008a D7E91201 		ldrd	r0, [r7, #72]
 1655 008e FFF7FEFF 		bl	__aeabi_d2lz
 1656 0092 0246     		mov	r2, r0
 1657 0094 0B46     		mov	r3, r1
 1658              		.loc 1 587 22
 1659 0096 C7E90E23 		strd	r2, [r7, #56]
 588:Core/Src/printf.c **** 
 589:Core/Src/printf.c ****   remainder -= (double) number_.fractional;
 1660              		.loc 1 589 32
 1661 009a D7E90E23 		ldrd	r2, [r7, #56]
 1662              		.loc 1 589 16
 1663 009e 1046     		mov	r0, r2
 1664 00a0 1946     		mov	r1, r3
 1665 00a2 FFF7FEFF 		bl	__aeabi_l2d
 1666 00a6 0246     		mov	r2, r0
 1667 00a8 0B46     		mov	r3, r1
 1668              		.loc 1 589 13
 1669 00aa D7E91201 		ldrd	r0, [r7, #72]
 1670 00ae FFF7FEFF 		bl	__aeabi_dsub
 1671 00b2 0246     		mov	r2, r0
 1672 00b4 0B46     		mov	r3, r1
 1673 00b6 C7E91223 		strd	r2, [r7, #72]
 590:Core/Src/printf.c **** 
 591:Core/Src/printf.c ****   if (remainder > 0.5) {
 1674              		.loc 1 591 6
 1675 00ba 4FF00002 		mov	r2, #0
 1676 00be 574B     		ldr	r3, .L105+4
 1677 00c0 D7E91201 		ldrd	r0, [r7, #72]
 1678 00c4 FFF7FEFF 		bl	__aeabi_dcmpgt
 1679 00c8 0346     		mov	r3, r0
 1680 00ca 002B     		cmp	r3, #0
 1681 00cc 2DD0     		beq	.L104
 592:Core/Src/printf.c ****     ++number_.fractional;
 1682              		.loc 1 592 14
 1683 00ce D7E90E23 		ldrd	r2, [r7, #56]
 1684              		.loc 1 592 5
 1685 00d2 511C     		adds	r1, r2, #1
 1686 00d4 B961     		str	r1, [r7, #24]
 1687 00d6 43F10003 		adc	r3, r3, #0
 1688 00da FB61     		str	r3, [r7, #28]
 1689 00dc D7E90634 		ldrd	r3, [r7, #24]
 1690 00e0 C7E90E34 		strd	r3, [r7, #56]
 593:Core/Src/printf.c ****     // handle rollover, e.g. case 0.99 with precision 1 is 1.0
 594:Core/Src/printf.c ****     if ((double) number_.fractional >= powers_of_10[precision]) {
 1691              		.loc 1 594 25
 1692 00e4 D7E90E23 		ldrd	r2, [r7, #56]
 1693              		.loc 1 594 9
 1694 00e8 1046     		mov	r0, r2
 1695 00ea 1946     		mov	r1, r3
 1696 00ec FFF7FEFF 		bl	__aeabi_l2d
 1697              		.loc 1 594 52
 1698 00f0 494A     		ldr	r2, .L105
 1699 00f2 BB6A     		ldr	r3, [r7, #40]
 1700 00f4 DB00     		lsls	r3, r3, #3
 1701 00f6 1344     		add	r3, r3, r2
 1702 00f8 D3E90023 		ldrd	r2, [r3]
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 41


 1703              		.loc 1 594 8
 1704 00fc FFF7FEFF 		bl	__aeabi_dcmpge
 1705 0100 0346     		mov	r3, r0
 1706 0102 002B     		cmp	r3, #0
 1707 0104 33D0     		beq	.L92
 595:Core/Src/printf.c ****       number_.fractional = 0;
 1708              		.loc 1 595 26
 1709 0106 4FF00002 		mov	r2, #0
 1710 010a 4FF00003 		mov	r3, #0
 1711 010e C7E90E23 		strd	r2, [r7, #56]
 596:Core/Src/printf.c ****       ++number_.integral;
 1712              		.loc 1 596 16
 1713 0112 D7E90C23 		ldrd	r2, [r7, #48]
 1714              		.loc 1 596 7
 1715 0116 511C     		adds	r1, r2, #1
 1716 0118 3961     		str	r1, [r7, #16]
 1717 011a 43F10003 		adc	r3, r3, #0
 1718 011e 7B61     		str	r3, [r7, #20]
 1719 0120 D7E90434 		ldrd	r3, [r7, #16]
 1720 0124 C7E90C34 		strd	r3, [r7, #48]
 1721 0128 21E0     		b	.L92
 1722              	.L104:
 597:Core/Src/printf.c ****     }
 598:Core/Src/printf.c ****   }
 599:Core/Src/printf.c ****   else if ((remainder == 0.5) && ((number_.fractional == 0U) || (number_.fractional & 1U))) {
 1723              		.loc 1 599 11
 1724 012a 4FF00002 		mov	r2, #0
 1725 012e 3B4B     		ldr	r3, .L105+4
 1726 0130 D7E91201 		ldrd	r0, [r7, #72]
 1727 0134 FFF7FEFF 		bl	__aeabi_dcmpeq
 1728 0138 0346     		mov	r3, r0
 1729 013a 002B     		cmp	r3, #0
 1730 013c 17D0     		beq	.L92
 1731              		.loc 1 599 43 discriminator 1
 1732 013e D7E90E23 		ldrd	r2, [r7, #56]
 1733              		.loc 1 599 31 discriminator 1
 1734 0142 1343     		orrs	r3, r3, r2
 1735 0144 08D0     		beq	.L95
 1736              		.loc 1 599 73 discriminator 2
 1737 0146 D7E90E23 		ldrd	r2, [r7, #56]
 1738              		.loc 1 599 85 discriminator 2
 1739 014a 02F0010A 		and	r10, r2, #1
 1740 014e 4FF0000B 		mov	fp, #0
 1741              		.loc 1 599 62 discriminator 2
 1742 0152 5AEA0B03 		orrs	r3, r10, fp
 1743 0156 0AD0     		beq	.L92
 1744              	.L95:
 600:Core/Src/printf.c ****     // if halfway, round up if odd OR if last digit is 0
 601:Core/Src/printf.c ****     ++number_.fractional;
 1745              		.loc 1 601 14
 1746 0158 D7E90E23 		ldrd	r2, [r7, #56]
 1747              		.loc 1 601 5
 1748 015c 511C     		adds	r1, r2, #1
 1749 015e B960     		str	r1, [r7, #8]
 1750 0160 43F10003 		adc	r3, r3, #0
 1751 0164 FB60     		str	r3, [r7, #12]
 1752 0166 D7E90234 		ldrd	r3, [r7, #8]
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 42


 1753 016a C7E90E34 		strd	r3, [r7, #56]
 1754              	.L92:
 602:Core/Src/printf.c ****   }
 603:Core/Src/printf.c **** 
 604:Core/Src/printf.c ****   if (precision == 0U) {
 1755              		.loc 1 604 6
 1756 016e BB6A     		ldr	r3, [r7, #40]
 1757 0170 002B     		cmp	r3, #0
 1758 0172 41D1     		bne	.L96
 605:Core/Src/printf.c ****     remainder = abs_number - (double) number_.integral;
 1759              		.loc 1 605 46
 1760 0174 D7E90C23 		ldrd	r2, [r7, #48]
 1761              		.loc 1 605 30
 1762 0178 1046     		mov	r0, r2
 1763 017a 1946     		mov	r1, r3
 1764 017c FFF7FEFF 		bl	__aeabi_l2d
 1765 0180 0246     		mov	r2, r0
 1766 0182 0B46     		mov	r3, r1
 1767              		.loc 1 605 15
 1768 0184 D7E91401 		ldrd	r0, [r7, #80]
 1769 0188 FFF7FEFF 		bl	__aeabi_dsub
 1770 018c 0246     		mov	r2, r0
 1771 018e 0B46     		mov	r3, r1
 1772 0190 C7E91223 		strd	r2, [r7, #72]
 606:Core/Src/printf.c ****     if ((!(remainder < 0.5) || (remainder > 0.5)) && (number_.integral & 1)) {
 1773              		.loc 1 606 22
 1774 0194 0123     		movs	r3, #1
 1775 0196 1C46     		mov	r4, r3
 1776 0198 4FF00002 		mov	r2, #0
 1777 019c 1F4B     		ldr	r3, .L105+4
 1778 019e D7E91201 		ldrd	r0, [r7, #72]
 1779 01a2 FFF7FEFF 		bl	__aeabi_dcmplt
 1780 01a6 0346     		mov	r3, r0
 1781 01a8 002B     		cmp	r3, #0
 1782 01aa 01D1     		bne	.L97
 1783 01ac 0023     		movs	r3, #0
 1784 01ae 1C46     		mov	r4, r3
 1785              	.L97:
 1786 01b0 E3B2     		uxtb	r3, r4
 1787              		.loc 1 606 10
 1788 01b2 83F00103 		eor	r3, r3, #1
 1789 01b6 DBB2     		uxtb	r3, r3
 1790              		.loc 1 606 8
 1791 01b8 002B     		cmp	r3, #0
 1792 01ba 09D1     		bne	.L98
 1793              		.loc 1 606 29 discriminator 2
 1794 01bc 4FF00002 		mov	r2, #0
 1795 01c0 164B     		ldr	r3, .L105+4
 1796 01c2 D7E91201 		ldrd	r0, [r7, #72]
 1797 01c6 FFF7FEFF 		bl	__aeabi_dcmpgt
 1798 01ca 0346     		mov	r3, r0
 1799 01cc 002B     		cmp	r3, #0
 1800 01ce 13D0     		beq	.L96
 1801              	.L98:
 1802              		.loc 1 606 62 discriminator 3
 1803 01d0 D7E90C23 		ldrd	r2, [r7, #48]
 1804              		.loc 1 606 72 discriminator 3
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 43


 1805 01d4 02F00108 		and	r8, r2, #1
 1806 01d8 4FF00009 		mov	r9, #0
 1807              		.loc 1 606 51 discriminator 3
 1808 01dc 58EA0903 		orrs	r3, r8, r9
 1809 01e0 0AD0     		beq	.L96
 607:Core/Src/printf.c ****       // exactly 0.5 and ODD, then round up
 608:Core/Src/printf.c ****       // 1.5 -> 2, but 2.5 -> 2
 609:Core/Src/printf.c ****       ++number_.integral;
 1810              		.loc 1 609 16
 1811 01e2 D7E90C23 		ldrd	r2, [r7, #48]
 1812              		.loc 1 609 7
 1813 01e6 511C     		adds	r1, r2, #1
 1814 01e8 3960     		str	r1, [r7]
 1815 01ea 43F10003 		adc	r3, r3, #0
 1816 01ee 7B60     		str	r3, [r7, #4]
 1817 01f0 D7E90034 		ldrd	r3, [r7]
 1818 01f4 C7E90C34 		strd	r3, [r7, #48]
 1819              	.L96:
 610:Core/Src/printf.c ****     }
 611:Core/Src/printf.c ****   }
 612:Core/Src/printf.c ****   return number_;
 1820              		.loc 1 612 10
 1821 01f8 FB6A     		ldr	r3, [r7, #44]
 1822 01fa 1D46     		mov	r5, r3
 1823 01fc 07F13004 		add	r4, r7, #48
 1824 0200 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 1825 0202 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 1826 0204 94E80300 		ldm	r4, {r0, r1}
 1827 0208 85E80300 		stm	r5, {r0, r1}
 613:Core/Src/printf.c **** }
 1828              		.loc 1 613 1
 1829 020c F86A     		ldr	r0, [r7, #44]
 1830 020e 5837     		adds	r7, r7, #88
 1831              	.LCFI89:
 1832              		.cfi_def_cfa_offset 32
 1833 0210 BD46     		mov	sp, r7
 1834              	.LCFI90:
 1835              		.cfi_def_cfa_register 13
 1836              		@ sp needed
 1837 0212 BDE8B08F 		pop	{r4, r5, r7, r8, r9, r10, fp, pc}
 1838              	.L106:
 1839 0216 00BF     		.align	2
 1840              	.L105:
 1841 0218 00000000 		.word	powers_of_10
 1842 021c 0000E03F 		.word	1071644672
 1843              		.cfi_endproc
 1844              	.LFE16:
 1846              		.global	__aeabi_ddiv
 1847              		.section	.text.apply_scaling,"ax",%progbits
 1848              		.align	1
 1849              		.syntax unified
 1850              		.thumb
 1851              		.thumb_func
 1853              	apply_scaling:
 1854              	.LFB17:
 614:Core/Src/printf.c **** 
 615:Core/Src/printf.c **** #if PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 44


 616:Core/Src/printf.c **** struct scaling_factor {
 617:Core/Src/printf.c ****   double raw_factor;
 618:Core/Src/printf.c ****   bool multiply; // if true, need to multiply by raw_factor; otherwise need to divide by it
 619:Core/Src/printf.c **** };
 620:Core/Src/printf.c **** 
 621:Core/Src/printf.c **** static double apply_scaling(double num, struct scaling_factor normalization)
 622:Core/Src/printf.c **** {
 1855              		.loc 1 622 1
 1856              		.cfi_startproc
 1857              		@ args = 0, pretend = 0, frame = 24
 1858              		@ frame_needed = 1, uses_anonymous_args = 0
 1859 0000 90B5     		push	{r4, r7, lr}
 1860              	.LCFI91:
 1861              		.cfi_def_cfa_offset 12
 1862              		.cfi_offset 4, -12
 1863              		.cfi_offset 7, -8
 1864              		.cfi_offset 14, -4
 1865 0002 87B0     		sub	sp, sp, #28
 1866              	.LCFI92:
 1867              		.cfi_def_cfa_offset 40
 1868 0004 00AF     		add	r7, sp, #0
 1869              	.LCFI93:
 1870              		.cfi_def_cfa_register 7
 1871 0006 87ED040B 		vstr.64	d0, [r7, #16]
 1872 000a 3C46     		mov	r4, r7
 1873 000c 84E80F00 		stm	r4, {r0, r1, r2, r3}
 623:Core/Src/printf.c ****   return normalization.multiply ? num * normalization.raw_factor : num / normalization.raw_factor;
 1874              		.loc 1 623 23
 1875 0010 3B7A     		ldrb	r3, [r7, #8]	@ zero_extendqisi2
 1876              		.loc 1 623 66
 1877 0012 002B     		cmp	r3, #0
 1878 0014 08D0     		beq	.L108
 1879              		.loc 1 623 54 discriminator 1
 1880 0016 D7E90001 		ldrd	r0, [r7]
 1881              		.loc 1 623 66 discriminator 1
 1882 001a D7E90423 		ldrd	r2, [r7, #16]
 1883 001e FFF7FEFF 		bl	__aeabi_dmul
 1884 0022 0246     		mov	r2, r0
 1885 0024 0B46     		mov	r3, r1
 1886              		.loc 1 623 66 is_stmt 0
 1887 0026 07E0     		b	.L110
 1888              	.L108:
 1889              		.loc 1 623 87 is_stmt 1 discriminator 2
 1890 0028 D7E90023 		ldrd	r2, [r7]
 1891              		.loc 1 623 66 discriminator 2
 1892 002c D7E90401 		ldrd	r0, [r7, #16]
 1893 0030 FFF7FEFF 		bl	__aeabi_ddiv
 1894 0034 0246     		mov	r2, r0
 1895 0036 0B46     		mov	r3, r1
 1896              	.L110:
 1897              		.loc 1 623 66 is_stmt 0 discriminator 5
 1898 0038 43EC172B 		vmov	d7, r2, r3
 624:Core/Src/printf.c **** }
 1899              		.loc 1 624 1 is_stmt 1
 1900 003c B0EE470A 		vmov.f32	s0, s14
 1901 0040 F0EE670A 		vmov.f32	s1, s15
 1902 0044 1C37     		adds	r7, r7, #28
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 45


 1903              	.LCFI94:
 1904              		.cfi_def_cfa_offset 12
 1905 0046 BD46     		mov	sp, r7
 1906              	.LCFI95:
 1907              		.cfi_def_cfa_register 13
 1908              		@ sp needed
 1909 0048 90BD     		pop	{r4, r7, pc}
 1910              		.cfi_endproc
 1911              	.LFE17:
 1913              		.section	.text.unapply_scaling,"ax",%progbits
 1914              		.align	1
 1915              		.syntax unified
 1916              		.thumb
 1917              		.thumb_func
 1919              	unapply_scaling:
 1920              	.LFB18:
 625:Core/Src/printf.c **** 
 626:Core/Src/printf.c **** static double unapply_scaling(double normalized, struct scaling_factor normalization)
 627:Core/Src/printf.c **** {
 1921              		.loc 1 627 1
 1922              		.cfi_startproc
 1923              		@ args = 0, pretend = 0, frame = 24
 1924              		@ frame_needed = 1, uses_anonymous_args = 0
 1925 0000 90B5     		push	{r4, r7, lr}
 1926              	.LCFI96:
 1927              		.cfi_def_cfa_offset 12
 1928              		.cfi_offset 4, -12
 1929              		.cfi_offset 7, -8
 1930              		.cfi_offset 14, -4
 1931 0002 87B0     		sub	sp, sp, #28
 1932              	.LCFI97:
 1933              		.cfi_def_cfa_offset 40
 1934 0004 00AF     		add	r7, sp, #0
 1935              	.LCFI98:
 1936              		.cfi_def_cfa_register 7
 1937 0006 87ED040B 		vstr.64	d0, [r7, #16]
 1938 000a 3C46     		mov	r4, r7
 1939 000c 84E80F00 		stm	r4, {r0, r1, r2, r3}
 628:Core/Src/printf.c **** #ifdef __GNUC__
 629:Core/Src/printf.c **** // accounting for a static analysis bug in GCC 6.x and earlier
 630:Core/Src/printf.c **** #pragma GCC diagnostic push
 631:Core/Src/printf.c **** #pragma GCC diagnostic ignored "-Wmaybe-uninitialized"
 632:Core/Src/printf.c **** #endif
 633:Core/Src/printf.c ****   return normalization.multiply ? normalized / normalization.raw_factor : normalized * normalizatio
 1940              		.loc 1 633 23
 1941 0010 3B7A     		ldrb	r3, [r7, #8]	@ zero_extendqisi2
 1942              		.loc 1 633 73
 1943 0012 002B     		cmp	r3, #0
 1944 0014 08D0     		beq	.L112
 1945              		.loc 1 633 61 discriminator 1
 1946 0016 D7E90023 		ldrd	r2, [r7]
 1947              		.loc 1 633 73 discriminator 1
 1948 001a D7E90401 		ldrd	r0, [r7, #16]
 1949 001e FFF7FEFF 		bl	__aeabi_ddiv
 1950 0022 0246     		mov	r2, r0
 1951 0024 0B46     		mov	r3, r1
 1952              		.loc 1 633 73 is_stmt 0
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 46


 1953 0026 07E0     		b	.L114
 1954              	.L112:
 1955              		.loc 1 633 101 is_stmt 1 discriminator 2
 1956 0028 D7E90001 		ldrd	r0, [r7]
 1957              		.loc 1 633 73 discriminator 2
 1958 002c D7E90423 		ldrd	r2, [r7, #16]
 1959 0030 FFF7FEFF 		bl	__aeabi_dmul
 1960 0034 0246     		mov	r2, r0
 1961 0036 0B46     		mov	r3, r1
 1962              	.L114:
 1963              		.loc 1 633 73 is_stmt 0 discriminator 5
 1964 0038 43EC172B 		vmov	d7, r2, r3
 634:Core/Src/printf.c **** #ifdef __GNUC__
 635:Core/Src/printf.c **** #pragma GCC diagnostic pop
 636:Core/Src/printf.c **** #endif
 637:Core/Src/printf.c **** }
 1965              		.loc 1 637 1 is_stmt 1
 1966 003c B0EE470A 		vmov.f32	s0, s14
 1967 0040 F0EE670A 		vmov.f32	s1, s15
 1968 0044 1C37     		adds	r7, r7, #28
 1969              	.LCFI99:
 1970              		.cfi_def_cfa_offset 12
 1971 0046 BD46     		mov	sp, r7
 1972              	.LCFI100:
 1973              		.cfi_def_cfa_register 13
 1974              		@ sp needed
 1975 0048 90BD     		pop	{r4, r7, pc}
 1976              		.cfi_endproc
 1977              	.LFE18:
 1979              		.section	.text.update_normalization,"ax",%progbits
 1980              		.align	1
 1981              		.syntax unified
 1982              		.thumb
 1983              		.thumb_func
 1985              	update_normalization:
 1986              	.LFB19:
 638:Core/Src/printf.c **** 
 639:Core/Src/printf.c **** static struct scaling_factor update_normalization(struct scaling_factor sf, double extra_multiplica
 640:Core/Src/printf.c **** {
 1987              		.loc 1 640 1
 1988              		.cfi_startproc
 1989              		@ args = 16, pretend = 8, frame = 56
 1990              		@ frame_needed = 1, uses_anonymous_args = 0
 1991 0000 82B0     		sub	sp, sp, #8
 1992              	.LCFI101:
 1993              		.cfi_def_cfa_offset 8
 1994 0002 90B5     		push	{r4, r7, lr}
 1995              	.LCFI102:
 1996              		.cfi_def_cfa_offset 20
 1997              		.cfi_offset 4, -20
 1998              		.cfi_offset 7, -16
 1999              		.cfi_offset 14, -12
 2000 0004 8FB0     		sub	sp, sp, #60
 2001              	.LCFI103:
 2002              		.cfi_def_cfa_offset 80
 2003 0006 00AF     		add	r7, sp, #0
 2004              	.LCFI104:
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 47


 2005              		.cfi_def_cfa_register 7
 2006 0008 F860     		str	r0, [r7, #12]
 2007 000a 07F14801 		add	r1, r7, #72
 2008 000e 81E80C00 		stm	r1, {r2, r3}
 2009 0012 87ED000B 		vstr.64	d0, [r7]
 641:Core/Src/printf.c ****   struct scaling_factor result;
 642:Core/Src/printf.c ****   if (sf.multiply) {
 2010              		.loc 1 642 9
 2011 0016 97F85030 		ldrb	r3, [r7, #80]	@ zero_extendqisi2
 2012              		.loc 1 642 6
 2013 001a 002B     		cmp	r3, #0
 2014 001c 0CD0     		beq	.L116
 643:Core/Src/printf.c ****     result.multiply = true;
 2015              		.loc 1 643 21
 2016 001e 0123     		movs	r3, #1
 2017 0020 3B76     		strb	r3, [r7, #24]
 644:Core/Src/printf.c ****     result.raw_factor = sf.raw_factor * extra_multiplicative_factor;
 2018              		.loc 1 644 27
 2019 0022 D7E91201 		ldrd	r0, [r7, #72]
 2020              		.loc 1 644 39
 2021 0026 D7E90023 		ldrd	r2, [r7]
 2022 002a FFF7FEFF 		bl	__aeabi_dmul
 2023 002e 0246     		mov	r2, r0
 2024 0030 0B46     		mov	r3, r1
 2025              		.loc 1 644 23
 2026 0032 C7E90423 		strd	r2, [r7, #16]
 2027 0036 3FE0     		b	.L117
 2028              	.L116:
 2029              	.LBB4:
 645:Core/Src/printf.c ****   }
 646:Core/Src/printf.c ****   else {
 647:Core/Src/printf.c ****     int factor_exp2 = get_exp2(get_bit_access(sf.raw_factor));
 2030              		.loc 1 647 23
 2031 0038 97ED127B 		vldr.64	d7, [r7, #72]
 2032 003c 07F12003 		add	r3, r7, #32
 2033 0040 B0EE470A 		vmov.f32	s0, s14
 2034 0044 F0EE670A 		vmov.f32	s1, s15
 2035 0048 1846     		mov	r0, r3
 2036 004a FFF7FEFF 		bl	get_bit_access
 2037              		.loc 1 647 23 is_stmt 0 discriminator 1
 2038 004e D7E90801 		ldrd	r0, [r7, #32]
 2039 0052 FFF7FEFF 		bl	get_exp2
 2040 0056 7863     		str	r0, [r7, #52]
 648:Core/Src/printf.c ****     int extra_factor_exp2 = get_exp2(get_bit_access(extra_multiplicative_factor));
 2041              		.loc 1 648 29 is_stmt 1
 2042 0058 07F12803 		add	r3, r7, #40
 2043 005c 97ED000B 		vldr.64	d0, [r7]
 2044 0060 1846     		mov	r0, r3
 2045 0062 FFF7FEFF 		bl	get_bit_access
 2046              		.loc 1 648 29 is_stmt 0 discriminator 1
 2047 0066 D7E90A01 		ldrd	r0, [r7, #40]
 2048 006a FFF7FEFF 		bl	get_exp2
 2049 006e 3863     		str	r0, [r7, #48]
 649:Core/Src/printf.c **** 
 650:Core/Src/printf.c ****     // Divide the larger-exponent raw raw_factor by the smaller
 651:Core/Src/printf.c ****     if (PRINTF_ABS(factor_exp2) > PRINTF_ABS(extra_factor_exp2)) {
 2050              		.loc 1 651 9 is_stmt 1
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 48


 2051 0070 7B6B     		ldr	r3, [r7, #52]
 2052 0072 83EAE372 		eor	r2, r3, r3, asr #31
 2053 0076 A2EBE372 		sub	r2, r2, r3, asr #31
 2054              		.loc 1 651 35
 2055 007a 3B6B     		ldr	r3, [r7, #48]
 2056 007c 002B     		cmp	r3, #0
 2057 007e B8BF     		it	lt
 2058 0080 5B42     		rsblt	r3, r3, #0
 2059              		.loc 1 651 8
 2060 0082 9A42     		cmp	r2, r3
 2061 0084 0CDD     		ble	.L118
 652:Core/Src/printf.c ****       result.multiply = false;
 2062              		.loc 1 652 23
 2063 0086 0023     		movs	r3, #0
 2064 0088 3B76     		strb	r3, [r7, #24]
 653:Core/Src/printf.c ****       result.raw_factor = sf.raw_factor / extra_multiplicative_factor;
 2065              		.loc 1 653 29
 2066 008a D7E91201 		ldrd	r0, [r7, #72]
 2067              		.loc 1 653 41
 2068 008e D7E90023 		ldrd	r2, [r7]
 2069 0092 FFF7FEFF 		bl	__aeabi_ddiv
 2070 0096 0246     		mov	r2, r0
 2071 0098 0B46     		mov	r3, r1
 2072              		.loc 1 653 25
 2073 009a C7E90423 		strd	r2, [r7, #16]
 2074 009e 0BE0     		b	.L117
 2075              	.L118:
 654:Core/Src/printf.c ****     }
 655:Core/Src/printf.c ****     else {
 656:Core/Src/printf.c ****       result.multiply = true;
 2076              		.loc 1 656 23
 2077 00a0 0123     		movs	r3, #1
 2078 00a2 3B76     		strb	r3, [r7, #24]
 657:Core/Src/printf.c ****       result.raw_factor = extra_multiplicative_factor / sf.raw_factor;
 2079              		.loc 1 657 59
 2080 00a4 D7E91223 		ldrd	r2, [r7, #72]
 2081              		.loc 1 657 55
 2082 00a8 D7E90001 		ldrd	r0, [r7]
 2083 00ac FFF7FEFF 		bl	__aeabi_ddiv
 2084 00b0 0246     		mov	r2, r0
 2085 00b2 0B46     		mov	r3, r1
 2086              		.loc 1 657 25
 2087 00b4 C7E90423 		strd	r2, [r7, #16]
 2088              	.L117:
 2089              	.LBE4:
 658:Core/Src/printf.c ****     }
 659:Core/Src/printf.c ****   }
 660:Core/Src/printf.c ****   return result;
 2090              		.loc 1 660 10
 2091 00b8 FB68     		ldr	r3, [r7, #12]
 2092 00ba 1C46     		mov	r4, r3
 2093 00bc 07F11003 		add	r3, r7, #16
 2094 00c0 0FCB     		ldm	r3, {r0, r1, r2, r3}
 2095 00c2 84E80F00 		stm	r4, {r0, r1, r2, r3}
 661:Core/Src/printf.c **** }
 2096              		.loc 1 661 1
 2097 00c6 F868     		ldr	r0, [r7, #12]
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 49


 2098 00c8 3C37     		adds	r7, r7, #60
 2099              	.LCFI105:
 2100              		.cfi_def_cfa_offset 20
 2101 00ca BD46     		mov	sp, r7
 2102              	.LCFI106:
 2103              		.cfi_def_cfa_register 13
 2104              		@ sp needed
 2105 00cc BDE89040 		pop	{r4, r7, lr}
 2106              	.LCFI107:
 2107              		.cfi_restore 14
 2108              		.cfi_restore 7
 2109              		.cfi_restore 4
 2110              		.cfi_def_cfa_offset 8
 2111 00d0 02B0     		add	sp, sp, #8
 2112              	.LCFI108:
 2113              		.cfi_def_cfa_offset 0
 2114 00d2 7047     		bx	lr
 2115              		.cfi_endproc
 2116              	.LFE19:
 2118              		.global	__aeabi_dcmple
 2119              		.section	.text.get_normalized_components,"ax",%progbits
 2120              		.align	1
 2121              		.syntax unified
 2122              		.thumb
 2123              		.thumb_func
 2125              	get_normalized_components:
 2126              	.LFB20:
 662:Core/Src/printf.c **** 
 663:Core/Src/printf.c **** static struct double_components get_normalized_components(bool negative, printf_size_t precision, d
 664:Core/Src/printf.c **** {
 2127              		.loc 1 664 1
 2128              		.cfi_startproc
 2129              		@ args = 20, pretend = 0, frame = 128
 2130              		@ frame_needed = 1, uses_anonymous_args = 0
 2131 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2132              	.LCFI109:
 2133              		.cfi_def_cfa_offset 36
 2134              		.cfi_offset 4, -36
 2135              		.cfi_offset 5, -32
 2136              		.cfi_offset 6, -28
 2137              		.cfi_offset 7, -24
 2138              		.cfi_offset 8, -20
 2139              		.cfi_offset 9, -16
 2140              		.cfi_offset 10, -12
 2141              		.cfi_offset 11, -8
 2142              		.cfi_offset 14, -4
 2143 0004 A3B0     		sub	sp, sp, #140
 2144              	.LCFI110:
 2145              		.cfi_def_cfa_offset 176
 2146 0006 02AF     		add	r7, sp, #8
 2147              	.LCFI111:
 2148              		.cfi_def_cfa 7, 168
 2149 0008 7862     		str	r0, [r7, #36]
 2150 000a 0B46     		mov	r3, r1
 2151 000c FA61     		str	r2, [r7, #28]
 2152 000e 87ED040B 		vstr.64	d0, [r7, #16]
 2153 0012 87F82330 		strb	r3, [r7, #35]
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 50


 665:Core/Src/printf.c ****   struct double_components components;
 666:Core/Src/printf.c ****   components.is_negative = negative;
 2154              		.loc 1 666 26
 2155 0016 97F82330 		ldrb	r3, [r7, #35]
 2156 001a 87F84830 		strb	r3, [r7, #72]
 667:Core/Src/printf.c ****   double scaled = apply_scaling(non_normalized, normalization);
 2157              		.loc 1 667 19
 2158 001e 07F1A803 		add	r3, r7, #168
 2159 0022 0FCB     		ldm	r3, {r0, r1, r2, r3}
 2160 0024 97ED040B 		vldr.64	d0, [r7, #16]
 2161 0028 FFF7FEFF 		bl	apply_scaling
 2162 002c 87ED1E0B 		vstr.64	d0, [r7, #120]
 668:Core/Src/printf.c **** 
 669:Core/Src/printf.c ****   bool close_to_representation_extremum = ( (-floored_exp10 + (int) precision) >= DBL_MAX_10_EXP - 
 2163              		.loc 1 669 63
 2164 0030 FA69     		ldr	r2, [r7, #28]
 2165              		.loc 1 669 61
 2166 0032 D7F8B830 		ldr	r3, [r7, #184]
 2167 0036 D31A     		subs	r3, r2, r3
 2168              		.loc 1 669 8
 2169 0038 B3F5997F 		cmp	r3, #306
 2170 003c CCBF     		ite	gt
 2171 003e 0123     		movgt	r3, #1
 2172 0040 0023     		movle	r3, #0
 2173 0042 87F87730 		strb	r3, [r7, #119]
 670:Core/Src/printf.c ****   if (close_to_representation_extremum) {
 2174              		.loc 1 670 6
 2175 0046 97F87730 		ldrb	r3, [r7, #119]	@ zero_extendqisi2
 2176 004a 002B     		cmp	r3, #0
 2177 004c 12D0     		beq	.L121
 671:Core/Src/printf.c ****     // We can't have a normalization factor which also accounts for the precision, i.e. moves
 672:Core/Src/printf.c ****     // some decimal digits into the mantissa, since it's unrepresentable, or nearly unrepresentable
 673:Core/Src/printf.c ****     // So, we'll give up early on getting extra precision...
 674:Core/Src/printf.c ****     return get_components(negative ? -scaled : scaled, precision);
 2178              		.loc 1 674 12
 2179 004e 97F82330 		ldrb	r3, [r7, #35]	@ zero_extendqisi2
 2180 0052 002B     		cmp	r3, #0
 2181 0054 04D0     		beq	.L122
 2182              		.loc 1 674 12 is_stmt 0 discriminator 1
 2183 0056 BC6F     		ldr	r4, [r7, #120]
 2184 0058 FB6F     		ldr	r3, [r7, #124]
 2185 005a 83F00045 		eor	r5, r3, #-2147483648
 2186 005e 01E0     		b	.L123
 2187              	.L122:
 2188              		.loc 1 674 12 discriminator 2
 2189 0060 D7E91E45 		ldrd	r4, [r7, #120]
 2190              	.L123:
 2191              		.loc 1 674 12 discriminator 4
 2192 0064 7B6A     		ldr	r3, [r7, #36]
 2193 0066 F969     		ldr	r1, [r7, #28]
 2194 0068 45EC104B 		vmov	d0, r4, r5
 2195 006c 1846     		mov	r0, r3
 2196 006e FFF7FEFF 		bl	get_components
 2197              		.loc 1 674 12
 2198 0072 B7E0     		b	.L130
 2199              	.L121:
 675:Core/Src/printf.c ****   }
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 51


 676:Core/Src/printf.c ****   components.integral = (int_fast64_t) scaled;
 2200              		.loc 1 676 25 is_stmt 1
 2201 0074 D7E91E01 		ldrd	r0, [r7, #120]
 2202 0078 FFF7FEFF 		bl	__aeabi_d2lz
 2203 007c 0246     		mov	r2, r0
 2204 007e 0B46     		mov	r3, r1
 2205              		.loc 1 676 23
 2206 0080 C7E90E23 		strd	r2, [r7, #56]
 677:Core/Src/printf.c ****   double remainder = non_normalized - unapply_scaling((double) components.integral, normalization);
 2207              		.loc 1 677 74
 2208 0084 D7E90E23 		ldrd	r2, [r7, #56]
 2209              		.loc 1 677 39
 2210 0088 1046     		mov	r0, r2
 2211 008a 1946     		mov	r1, r3
 2212 008c FFF7FEFF 		bl	__aeabi_l2d
 2213 0090 0446     		mov	r4, r0
 2214 0092 0D46     		mov	r5, r1
 2215 0094 07F1A803 		add	r3, r7, #168
 2216 0098 0FCB     		ldm	r3, {r0, r1, r2, r3}
 2217 009a 45EC104B 		vmov	d0, r4, r5
 2218 009e FFF7FEFF 		bl	unapply_scaling
 2219 00a2 53EC102B 		vmov	r2, r3, d0
 2220              		.loc 1 677 10 discriminator 1
 2221 00a6 D7E90401 		ldrd	r0, [r7, #16]
 2222 00aa FFF7FEFF 		bl	__aeabi_dsub
 2223 00ae 0246     		mov	r2, r0
 2224 00b0 0B46     		mov	r3, r1
 2225 00b2 C7E91A23 		strd	r2, [r7, #104]
 678:Core/Src/printf.c ****   double prec_power_of_10 = powers_of_10[precision];
 2226              		.loc 1 678 10
 2227 00b6 4E4A     		ldr	r2, .L133
 2228 00b8 FB69     		ldr	r3, [r7, #28]
 2229 00ba DB00     		lsls	r3, r3, #3
 2230 00bc 1344     		add	r3, r3, r2
 2231 00be D3E90023 		ldrd	r2, [r3]
 2232 00c2 C7E91823 		strd	r2, [r7, #96]
 679:Core/Src/printf.c ****   struct scaling_factor account_for_precision = update_normalization(normalization, prec_power_of_1
 2233              		.loc 1 679 49
 2234 00c6 07F12804 		add	r4, r7, #40
 2235 00ca 6A46     		mov	r2, sp
 2236 00cc 07F1B003 		add	r3, r7, #176
 2237 00d0 93E80300 		ldm	r3, {r0, r1}
 2238 00d4 82E80300 		stm	r2, {r0, r1}
 2239 00d8 07F1A803 		add	r3, r7, #168
 2240 00dc 0CCB     		ldm	r3, {r2, r3}
 2241 00de 97ED180B 		vldr.64	d0, [r7, #96]
 2242 00e2 2046     		mov	r0, r4
 2243 00e4 FFF7FEFF 		bl	update_normalization
 680:Core/Src/printf.c ****   double scaled_remainder = apply_scaling(remainder, account_for_precision);
 2244              		.loc 1 680 29
 2245 00e8 07F12803 		add	r3, r7, #40
 2246 00ec 0FCB     		ldm	r3, {r0, r1, r2, r3}
 2247 00ee 97ED1A0B 		vldr.64	d0, [r7, #104]
 2248 00f2 FFF7FEFF 		bl	apply_scaling
 2249 00f6 87ED160B 		vstr.64	d0, [r7, #88]
 681:Core/Src/printf.c ****   double rounding_threshold = 0.5;
 2250              		.loc 1 681 10
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 52


 2251 00fa 4FF00002 		mov	r2, #0
 2252 00fe 3D4B     		ldr	r3, .L133+4
 2253 0100 C7E91423 		strd	r2, [r7, #80]
 682:Core/Src/printf.c **** 
 683:Core/Src/printf.c ****   components.fractional = (int_fast64_t) scaled_remainder; // when precision == 0, the assigned val
 2254              		.loc 1 683 27
 2255 0104 D7E91601 		ldrd	r0, [r7, #88]
 2256 0108 FFF7FEFF 		bl	__aeabi_d2lz
 2257 010c 0246     		mov	r2, r0
 2258 010e 0B46     		mov	r3, r1
 2259              		.loc 1 683 25
 2260 0110 C7E91023 		strd	r2, [r7, #64]
 684:Core/Src/printf.c ****   scaled_remainder -= (double) components.fractional; //when precision == 0, this will not change s
 2261              		.loc 1 684 42
 2262 0114 D7E91023 		ldrd	r2, [r7, #64]
 2263              		.loc 1 684 23
 2264 0118 1046     		mov	r0, r2
 2265 011a 1946     		mov	r1, r3
 2266 011c FFF7FEFF 		bl	__aeabi_l2d
 2267 0120 0246     		mov	r2, r0
 2268 0122 0B46     		mov	r3, r1
 2269              		.loc 1 684 20
 2270 0124 D7E91601 		ldrd	r0, [r7, #88]
 2271 0128 FFF7FEFF 		bl	__aeabi_dsub
 2272 012c 0246     		mov	r2, r0
 2273 012e 0B46     		mov	r3, r1
 2274 0130 C7E91623 		strd	r2, [r7, #88]
 685:Core/Src/printf.c **** 
 686:Core/Src/printf.c ****   components.fractional += (scaled_remainder >= rounding_threshold);
 2275              		.loc 1 686 13
 2276 0134 D7E91045 		ldrd	r4, [r7, #64]
 2277              		.loc 1 686 46
 2278 0138 0123     		movs	r3, #1
 2279 013a 1E46     		mov	r6, r3
 2280 013c D7E91423 		ldrd	r2, [r7, #80]
 2281 0140 D7E91601 		ldrd	r0, [r7, #88]
 2282 0144 FFF7FEFF 		bl	__aeabi_dcmpge
 2283 0148 0346     		mov	r3, r0
 2284 014a 002B     		cmp	r3, #0
 2285 014c 01D1     		bne	.L125
 2286 014e 0023     		movs	r3, #0
 2287 0150 1E46     		mov	r6, r3
 2288              	.L125:
 2289 0152 F3B2     		uxtb	r3, r6
 2290 0154 DBB2     		uxtb	r3, r3
 2291 0156 0022     		movs	r2, #0
 2292 0158 9846     		mov	r8, r3
 2293 015a 9146     		mov	r9, r2
 2294              		.loc 1 686 25
 2295 015c 14EB0803 		adds	r3, r4, r8
 2296 0160 BB60     		str	r3, [r7, #8]
 2297 0162 45EB0903 		adc	r3, r5, r9
 2298 0166 FB60     		str	r3, [r7, #12]
 2299 0168 D7E90234 		ldrd	r3, [r7, #8]
 2300 016c C7E91034 		strd	r3, [r7, #64]
 687:Core/Src/printf.c ****   if (scaled_remainder == rounding_threshold) {
 2301              		.loc 1 687 6
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 53


 2302 0170 D7E91423 		ldrd	r2, [r7, #80]
 2303 0174 D7E91601 		ldrd	r0, [r7, #88]
 2304 0178 FFF7FEFF 		bl	__aeabi_dcmpeq
 2305 017c 0346     		mov	r3, r0
 2306 017e 002B     		cmp	r3, #0
 2307 0180 09D0     		beq	.L126
 688:Core/Src/printf.c ****     // banker's rounding: Round towards the even number (making the mean error 0)
 689:Core/Src/printf.c ****     components.fractional &= ~((int_fast64_t) 0x1);
 2308              		.loc 1 689 15
 2309 0182 D7E91023 		ldrd	r2, [r7, #64]
 2310              		.loc 1 689 27
 2311 0186 22F00101 		bic	r1, r2, #1
 2312 018a 3960     		str	r1, [r7]
 2313 018c 7B60     		str	r3, [r7, #4]
 2314 018e D7E90034 		ldrd	r3, [r7]
 2315 0192 C7E91034 		strd	r3, [r7, #64]
 2316              	.L126:
 690:Core/Src/printf.c ****   }
 691:Core/Src/printf.c ****   // handle rollover, e.g. the case of 0.99 with precision 1 becoming (0,100),
 692:Core/Src/printf.c ****   // and must then be corrected into (1, 0).
 693:Core/Src/printf.c ****   // Note: for precision = 0, this will "translate" the rounding effect from
 694:Core/Src/printf.c ****   // the fractional part to the integral part where it should actually be
 695:Core/Src/printf.c ****   // felt (as prec_power_of_10 is 1)
 696:Core/Src/printf.c ****   if ((double) components.fractional >= prec_power_of_10) {
 2317              		.loc 1 696 26
 2318 0196 D7E91023 		ldrd	r2, [r7, #64]
 2319              		.loc 1 696 7
 2320 019a 1046     		mov	r0, r2
 2321 019c 1946     		mov	r1, r3
 2322 019e FFF7FEFF 		bl	__aeabi_l2d
 2323 01a2 0246     		mov	r2, r0
 2324 01a4 0B46     		mov	r3, r1
 2325              		.loc 1 696 6
 2326 01a6 D7E91801 		ldrd	r0, [r7, #96]
 2327 01aa FFF7FEFF 		bl	__aeabi_dcmple
 2328 01ae 0346     		mov	r3, r0
 2329 01b0 002B     		cmp	r3, #0
 2330 01b2 0DD0     		beq	.L128
 697:Core/Src/printf.c ****     components.fractional = 0;
 2331              		.loc 1 697 27
 2332 01b4 4FF00002 		mov	r2, #0
 2333 01b8 4FF00003 		mov	r3, #0
 2334 01bc C7E91023 		strd	r2, [r7, #64]
 698:Core/Src/printf.c ****     ++components.integral;
 2335              		.loc 1 698 17
 2336 01c0 D7E90E23 		ldrd	r2, [r7, #56]
 2337              		.loc 1 698 5
 2338 01c4 12F1010A 		adds	r10, r2, #1
 2339 01c8 43F1000B 		adc	fp, r3, #0
 2340 01cc C7E90EAB 		strd	r10, [r7, #56]
 2341              	.L128:
 699:Core/Src/printf.c ****   }
 700:Core/Src/printf.c ****   return components;
 2342              		.loc 1 700 10
 2343 01d0 7B6A     		ldr	r3, [r7, #36]
 2344 01d2 1D46     		mov	r5, r3
 2345 01d4 07F13804 		add	r4, r7, #56
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 54


 2346 01d8 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 2347 01da 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 2348 01dc 94E80300 		ldm	r4, {r0, r1}
 2349 01e0 85E80300 		stm	r5, {r0, r1}
 2350              	.L130:
 701:Core/Src/printf.c **** }
 2351              		.loc 1 701 1
 2352 01e4 786A     		ldr	r0, [r7, #36]
 2353 01e6 8437     		adds	r7, r7, #132
 2354              	.LCFI112:
 2355              		.cfi_def_cfa_offset 36
 2356 01e8 BD46     		mov	sp, r7
 2357              	.LCFI113:
 2358              		.cfi_def_cfa_register 13
 2359              		@ sp needed
 2360 01ea BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2361              	.L134:
 2362 01ee 00BF     		.align	2
 2363              	.L133:
 2364 01f0 00000000 		.word	powers_of_10
 2365 01f4 0000E03F 		.word	1071644672
 2366              		.cfi_endproc
 2367              	.LFE20:
 2369              		.global	__aeabi_ldivmod
 2370              		.section	.text.print_broken_up_decimal,"ax",%progbits
 2371              		.align	1
 2372              		.syntax unified
 2373              		.thumb
 2374              		.thumb_func
 2376              	print_broken_up_decimal:
 2377              	.LFB21:
 702:Core/Src/printf.c **** #endif // PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS
 703:Core/Src/printf.c **** 
 704:Core/Src/printf.c **** static void print_broken_up_decimal(
 705:Core/Src/printf.c ****   struct double_components number_, output_gadget_t* output, printf_size_t precision,
 706:Core/Src/printf.c ****   printf_size_t width, printf_flags_t flags, char *buf, printf_size_t len)
 707:Core/Src/printf.c **** {
 2378              		.loc 1 707 1
 2379              		.cfi_startproc
 2380              		@ args = 48, pretend = 16, frame = 16
 2381              		@ frame_needed = 1, uses_anonymous_args = 0
 2382 0000 84B0     		sub	sp, sp, #16
 2383              	.LCFI114:
 2384              		.cfi_def_cfa_offset 16
 2385 0002 80B5     		push	{r7, lr}
 2386              	.LCFI115:
 2387              		.cfi_def_cfa_offset 24
 2388              		.cfi_offset 7, -24
 2389              		.cfi_offset 14, -20
 2390 0004 86B0     		sub	sp, sp, #24
 2391              	.LCFI116:
 2392              		.cfi_def_cfa_offset 48
 2393 0006 02AF     		add	r7, sp, #8
 2394              	.LCFI117:
 2395              		.cfi_def_cfa 7, 40
 2396 0008 07F1180C 		add	ip, r7, #24
 2397 000c 8CE80F00 		stm	ip, {r0, r1, r2, r3}
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 55


 708:Core/Src/printf.c ****   if (precision != 0U) {
 2398              		.loc 1 708 6
 2399 0010 7B6B     		ldr	r3, [r7, #52]
 2400 0012 002B     		cmp	r3, #0
 2401 0014 00F08780 		beq	.L136
 2402              	.LBB5:
 709:Core/Src/printf.c ****     // do fractional part, as an unsigned number
 710:Core/Src/printf.c **** 
 711:Core/Src/printf.c ****     printf_size_t count = precision;
 2403              		.loc 1 711 19
 2404 0018 7B6B     		ldr	r3, [r7, #52]
 2405 001a FB60     		str	r3, [r7, #12]
 712:Core/Src/printf.c **** 
 713:Core/Src/printf.c ****     // %g/%G mandates we skip the trailing 0 digits...
 714:Core/Src/printf.c ****     if ((flags & FLAGS_ADAPT_EXP) && !(flags & FLAGS_HASH) && (number_.fractional > 0)) {
 2406              		.loc 1 714 16
 2407 001c FB6B     		ldr	r3, [r7, #60]
 2408 001e 03F48053 		and	r3, r3, #4096
 2409              		.loc 1 714 8
 2410 0022 002B     		cmp	r3, #0
 2411 0024 29D0     		beq	.L137
 2412              		.loc 1 714 46 discriminator 1
 2413 0026 FB6B     		ldr	r3, [r7, #60]
 2414 0028 03F01003 		and	r3, r3, #16
 2415              		.loc 1 714 35 discriminator 1
 2416 002c 002B     		cmp	r3, #0
 2417 002e 24D1     		bne	.L137
 2418              		.loc 1 714 71 discriminator 2
 2419 0030 D7E90823 		ldrd	r2, [r7, #32]
 2420              		.loc 1 714 60 discriminator 2
 2421 0034 012A     		cmp	r2, #1
 2422 0036 73F10003 		sbcs	r3, r3, #0
 2423 003a 1EDB     		blt	.L137
 2424              	.L139:
 2425              	.LBB6:
 715:Core/Src/printf.c ****       while(true) {
 716:Core/Src/printf.c ****         int_fast64_t digit = number_.fractional % 10U;
 2426              		.loc 1 716 37
 2427 003c D7E90801 		ldrd	r0, [r7, #32]
 2428              		.loc 1 716 22
 2429 0040 4FF00A02 		mov	r2, #10
 2430 0044 4FF00003 		mov	r3, #0
 2431 0048 FFF7FEFF 		bl	__aeabi_ldivmod
 2432 004c C7E90023 		strd	r2, [r7]
 717:Core/Src/printf.c ****         if (digit != 0) {
 2433              		.loc 1 717 12
 2434 0050 D7E90023 		ldrd	r2, [r7]
 2435 0054 1343     		orrs	r3, r3, r2
 2436 0056 0FD1     		bne	.L159
 718:Core/Src/printf.c ****           break;
 719:Core/Src/printf.c ****         }
 720:Core/Src/printf.c ****         --count;
 2437              		.loc 1 720 9
 2438 0058 FB68     		ldr	r3, [r7, #12]
 2439 005a 013B     		subs	r3, r3, #1
 2440 005c FB60     		str	r3, [r7, #12]
 721:Core/Src/printf.c ****         number_.fractional /= 10U;
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 56


 2441              		.loc 1 721 16
 2442 005e D7E90801 		ldrd	r0, [r7, #32]
 2443              		.loc 1 721 28
 2444 0062 4FF00A02 		mov	r2, #10
 2445 0066 4FF00003 		mov	r3, #0
 2446 006a FFF7FEFF 		bl	__aeabi_ldivmod
 2447 006e 0246     		mov	r2, r0
 2448 0070 0B46     		mov	r3, r1
 2449 0072 C7E90823 		strd	r2, [r7, #32]
 2450              	.LBE6:
 715:Core/Src/printf.c ****         int_fast64_t digit = number_.fractional % 10U;
 2451              		.loc 1 715 19
 2452 0076 E1E7     		b	.L139
 2453              	.L159:
 2454              	.LBB7:
 718:Core/Src/printf.c ****           break;
 2455              		.loc 1 718 11
 2456 0078 00BF     		nop
 2457              	.L137:
 2458              	.LBE7:
 722:Core/Src/printf.c **** 
 723:Core/Src/printf.c ****       }
 724:Core/Src/printf.c ****       // ... and even the decimal point if there are no
 725:Core/Src/printf.c ****       // non-zero fractional part digits (see below)
 726:Core/Src/printf.c ****     }
 727:Core/Src/printf.c **** 
 728:Core/Src/printf.c ****     if (number_.fractional > 0 || !(flags & FLAGS_ADAPT_EXP) || (flags & FLAGS_HASH) ) {
 2459              		.loc 1 728 16
 2460 007a D7E90823 		ldrd	r2, [r7, #32]
 2461              		.loc 1 728 8
 2462 007e 012A     		cmp	r2, #1
 2463 0080 73F10003 		sbcs	r3, r3, #0
 2464 0084 2EDA     		bge	.L142
 2465              		.loc 1 728 43 discriminator 1
 2466 0086 FB6B     		ldr	r3, [r7, #60]
 2467 0088 03F48053 		and	r3, r3, #4096
 2468              		.loc 1 728 32 discriminator 1
 2469 008c 002B     		cmp	r3, #0
 2470 008e 29D0     		beq	.L142
 2471              		.loc 1 728 72 discriminator 2
 2472 0090 FB6B     		ldr	r3, [r7, #60]
 2473 0092 03F01003 		and	r3, r3, #16
 2474              		.loc 1 728 62 discriminator 2
 2475 0096 002B     		cmp	r3, #0
 2476 0098 76D0     		beq	.L148
 729:Core/Src/printf.c ****       while (len < PRINTF_DECIMAL_BUFFER_SIZE) {
 2477              		.loc 1 729 13
 2478 009a 23E0     		b	.L142
 2479              	.L144:
 730:Core/Src/printf.c ****         --count;
 2480              		.loc 1 730 9
 2481 009c FB68     		ldr	r3, [r7, #12]
 2482 009e 013B     		subs	r3, r3, #1
 2483 00a0 FB60     		str	r3, [r7, #12]
 731:Core/Src/printf.c ****         buf[len++] = (char)('0' + number_.fractional % 10U);
 2484              		.loc 1 731 42
 2485 00a2 D7E90801 		ldrd	r0, [r7, #32]
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 57


 2486              		.loc 1 731 54
 2487 00a6 4FF00A02 		mov	r2, #10
 2488 00aa 4FF00003 		mov	r3, #0
 2489 00ae FFF7FEFF 		bl	__aeabi_ldivmod
 2490              		.loc 1 731 22
 2491 00b2 D2B2     		uxtb	r2, r2
 2492              		.loc 1 731 16
 2493 00b4 7B6C     		ldr	r3, [r7, #68]
 2494 00b6 591C     		adds	r1, r3, #1
 2495 00b8 7964     		str	r1, [r7, #68]
 2496              		.loc 1 731 12
 2497 00ba 396C     		ldr	r1, [r7, #64]
 2498 00bc 0B44     		add	r3, r3, r1
 2499              		.loc 1 731 22
 2500 00be 3032     		adds	r2, r2, #48
 2501 00c0 D2B2     		uxtb	r2, r2
 2502              		.loc 1 731 20
 2503 00c2 1A70     		strb	r2, [r3]
 732:Core/Src/printf.c ****         if (!(number_.fractional /= 10U)) {
 2504              		.loc 1 732 22
 2505 00c4 D7E90801 		ldrd	r0, [r7, #32]
 2506              		.loc 1 732 34
 2507 00c8 4FF00A02 		mov	r2, #10
 2508 00cc 4FF00003 		mov	r3, #0
 2509 00d0 FFF7FEFF 		bl	__aeabi_ldivmod
 2510 00d4 0246     		mov	r2, r0
 2511 00d6 0B46     		mov	r3, r1
 2512 00d8 C7E90823 		strd	r2, [r7, #32]
 2513              		.loc 1 732 22
 2514 00dc D7E90823 		ldrd	r2, [r7, #32]
 2515              		.loc 1 732 12
 2516 00e0 1343     		orrs	r3, r3, r2
 2517 00e2 03D0     		beq	.L160
 2518              	.L142:
 729:Core/Src/printf.c ****         --count;
 2519              		.loc 1 729 18
 2520 00e4 7B6C     		ldr	r3, [r7, #68]
 2521 00e6 1F2B     		cmp	r3, #31
 2522 00e8 D8D9     		bls	.L144
 2523 00ea 0BE0     		b	.L145
 2524              	.L160:
 733:Core/Src/printf.c ****           break;
 2525              		.loc 1 733 11
 2526 00ec 00BF     		nop
 734:Core/Src/printf.c ****         }
 735:Core/Src/printf.c ****       }
 736:Core/Src/printf.c ****       // add extra 0s
 737:Core/Src/printf.c ****       while ((len < PRINTF_DECIMAL_BUFFER_SIZE) && (count > 0U)) {
 2527              		.loc 1 737 13
 2528 00ee 09E0     		b	.L145
 2529              	.L147:
 738:Core/Src/printf.c ****         buf[len++] = '0';
 2530              		.loc 1 738 16
 2531 00f0 7B6C     		ldr	r3, [r7, #68]
 2532 00f2 5A1C     		adds	r2, r3, #1
 2533 00f4 7A64     		str	r2, [r7, #68]
 2534              		.loc 1 738 12
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 58


 2535 00f6 3A6C     		ldr	r2, [r7, #64]
 2536 00f8 1344     		add	r3, r3, r2
 2537              		.loc 1 738 20
 2538 00fa 3022     		movs	r2, #48
 2539 00fc 1A70     		strb	r2, [r3]
 739:Core/Src/printf.c ****         --count;
 2540              		.loc 1 739 9
 2541 00fe FB68     		ldr	r3, [r7, #12]
 2542 0100 013B     		subs	r3, r3, #1
 2543 0102 FB60     		str	r3, [r7, #12]
 2544              	.L145:
 737:Core/Src/printf.c ****         buf[len++] = '0';
 2545              		.loc 1 737 49
 2546 0104 7B6C     		ldr	r3, [r7, #68]
 2547 0106 1F2B     		cmp	r3, #31
 2548 0108 02D8     		bhi	.L146
 737:Core/Src/printf.c ****         buf[len++] = '0';
 2549              		.loc 1 737 49 is_stmt 0 discriminator 1
 2550 010a FB68     		ldr	r3, [r7, #12]
 2551 010c 002B     		cmp	r3, #0
 2552 010e EFD1     		bne	.L147
 2553              	.L146:
 740:Core/Src/printf.c ****       }
 741:Core/Src/printf.c ****       if (len < PRINTF_DECIMAL_BUFFER_SIZE) {
 2554              		.loc 1 741 10 is_stmt 1
 2555 0110 7B6C     		ldr	r3, [r7, #68]
 2556 0112 1F2B     		cmp	r3, #31
 2557 0114 38D8     		bhi	.L148
 742:Core/Src/printf.c ****         buf[len++] = '.';
 2558              		.loc 1 742 16
 2559 0116 7B6C     		ldr	r3, [r7, #68]
 2560 0118 5A1C     		adds	r2, r3, #1
 2561 011a 7A64     		str	r2, [r7, #68]
 2562              		.loc 1 742 12
 2563 011c 3A6C     		ldr	r2, [r7, #64]
 2564 011e 1344     		add	r3, r3, r2
 2565              		.loc 1 742 20
 2566 0120 2E22     		movs	r2, #46
 2567 0122 1A70     		strb	r2, [r3]
 2568 0124 30E0     		b	.L148
 2569              	.L136:
 2570              	.LBE5:
 743:Core/Src/printf.c ****       }
 744:Core/Src/printf.c ****     }
 745:Core/Src/printf.c ****   }
 746:Core/Src/printf.c ****   else {
 747:Core/Src/printf.c ****     if ((flags & FLAGS_HASH) && (len < PRINTF_DECIMAL_BUFFER_SIZE)) {
 2571              		.loc 1 747 16
 2572 0126 FB6B     		ldr	r3, [r7, #60]
 2573 0128 03F01003 		and	r3, r3, #16
 2574              		.loc 1 747 8
 2575 012c 002B     		cmp	r3, #0
 2576 012e 2BD0     		beq	.L148
 2577              		.loc 1 747 30 discriminator 1
 2578 0130 7B6C     		ldr	r3, [r7, #68]
 2579 0132 1F2B     		cmp	r3, #31
 2580 0134 28D8     		bhi	.L148
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 59


 748:Core/Src/printf.c ****       buf[len++] = '.';
 2581              		.loc 1 748 14
 2582 0136 7B6C     		ldr	r3, [r7, #68]
 2583 0138 5A1C     		adds	r2, r3, #1
 2584 013a 7A64     		str	r2, [r7, #68]
 2585              		.loc 1 748 10
 2586 013c 3A6C     		ldr	r2, [r7, #64]
 2587 013e 1344     		add	r3, r3, r2
 2588              		.loc 1 748 18
 2589 0140 2E22     		movs	r2, #46
 2590 0142 1A70     		strb	r2, [r3]
 749:Core/Src/printf.c ****     }
 750:Core/Src/printf.c ****   }
 751:Core/Src/printf.c **** 
 752:Core/Src/printf.c ****   // Write the integer part of the number (it comes after the fractional
 753:Core/Src/printf.c ****   // since the character order is reversed)
 754:Core/Src/printf.c ****   while (len < PRINTF_DECIMAL_BUFFER_SIZE) {
 2591              		.loc 1 754 9
 2592 0144 20E0     		b	.L148
 2593              	.L150:
 755:Core/Src/printf.c ****     buf[len++] = (char)('0' + (number_.integral % 10));
 2594              		.loc 1 755 39
 2595 0146 D7E90601 		ldrd	r0, [r7, #24]
 2596              		.loc 1 755 49
 2597 014a 4FF00A02 		mov	r2, #10
 2598 014e 4FF00003 		mov	r3, #0
 2599 0152 FFF7FEFF 		bl	__aeabi_ldivmod
 2600              		.loc 1 755 18
 2601 0156 D2B2     		uxtb	r2, r2
 2602              		.loc 1 755 12
 2603 0158 7B6C     		ldr	r3, [r7, #68]
 2604 015a 591C     		adds	r1, r3, #1
 2605 015c 7964     		str	r1, [r7, #68]
 2606              		.loc 1 755 8
 2607 015e 396C     		ldr	r1, [r7, #64]
 2608 0160 0B44     		add	r3, r3, r1
 2609              		.loc 1 755 18
 2610 0162 3032     		adds	r2, r2, #48
 2611 0164 D2B2     		uxtb	r2, r2
 2612              		.loc 1 755 16
 2613 0166 1A70     		strb	r2, [r3]
 756:Core/Src/printf.c ****     if (!(number_.integral /= 10)) {
 2614              		.loc 1 756 18
 2615 0168 D7E90601 		ldrd	r0, [r7, #24]
 2616              		.loc 1 756 28
 2617 016c 4FF00A02 		mov	r2, #10
 2618 0170 4FF00003 		mov	r3, #0
 2619 0174 FFF7FEFF 		bl	__aeabi_ldivmod
 2620 0178 0246     		mov	r2, r0
 2621 017a 0B46     		mov	r3, r1
 2622 017c C7E90623 		strd	r2, [r7, #24]
 2623              		.loc 1 756 18
 2624 0180 D7E90623 		ldrd	r2, [r7, #24]
 2625              		.loc 1 756 8
 2626 0184 1343     		orrs	r3, r3, r2
 2627 0186 03D0     		beq	.L161
 2628              	.L148:
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 60


 754:Core/Src/printf.c ****     buf[len++] = (char)('0' + (number_.integral % 10));
 2629              		.loc 1 754 14
 2630 0188 7B6C     		ldr	r3, [r7, #68]
 2631 018a 1F2B     		cmp	r3, #31
 2632 018c DBD9     		bls	.L150
 2633 018e 00E0     		b	.L149
 2634              	.L161:
 757:Core/Src/printf.c ****       break;
 2635              		.loc 1 757 7
 2636 0190 00BF     		nop
 2637              	.L149:
 758:Core/Src/printf.c ****     }
 759:Core/Src/printf.c ****   }
 760:Core/Src/printf.c **** 
 761:Core/Src/printf.c ****   // pad leading zeros
 762:Core/Src/printf.c ****   if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 2638              		.loc 1 762 15
 2639 0192 FB6B     		ldr	r3, [r7, #60]
 2640 0194 03F00203 		and	r3, r3, #2
 2641              		.loc 1 762 6
 2642 0198 002B     		cmp	r3, #0
 2643 019a 22D1     		bne	.L151
 2644              		.loc 1 762 39 discriminator 1
 2645 019c FB6B     		ldr	r3, [r7, #60]
 2646 019e 03F00103 		and	r3, r3, #1
 2647              		.loc 1 762 29 discriminator 1
 2648 01a2 002B     		cmp	r3, #0
 2649 01a4 1DD0     		beq	.L151
 763:Core/Src/printf.c ****     if (width && (number_.is_negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 2650              		.loc 1 763 8
 2651 01a6 BB6B     		ldr	r3, [r7, #56]
 2652 01a8 002B     		cmp	r3, #0
 2653 01aa 13D0     		beq	.L154
 2654              		.loc 1 763 26 discriminator 1
 2655 01ac 97F82830 		ldrb	r3, [r7, #40]	@ zero_extendqisi2
 2656              		.loc 1 763 15 discriminator 1
 2657 01b0 002B     		cmp	r3, #0
 2658 01b2 04D1     		bne	.L153
 2659              		.loc 1 763 49 discriminator 2
 2660 01b4 FB6B     		ldr	r3, [r7, #60]
 2661 01b6 03F00C03 		and	r3, r3, #12
 2662              		.loc 1 763 39 discriminator 2
 2663 01ba 002B     		cmp	r3, #0
 2664 01bc 0AD0     		beq	.L154
 2665              	.L153:
 764:Core/Src/printf.c ****       width--;
 2666              		.loc 1 764 12
 2667 01be BB6B     		ldr	r3, [r7, #56]
 2668 01c0 013B     		subs	r3, r3, #1
 2669 01c2 BB63     		str	r3, [r7, #56]
 765:Core/Src/printf.c ****     }
 766:Core/Src/printf.c ****     while ((len < width) && (len < PRINTF_DECIMAL_BUFFER_SIZE)) {
 2670              		.loc 1 766 11
 2671 01c4 06E0     		b	.L154
 2672              	.L155:
 767:Core/Src/printf.c ****       buf[len++] = '0';
 2673              		.loc 1 767 14
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 61


 2674 01c6 7B6C     		ldr	r3, [r7, #68]
 2675 01c8 5A1C     		adds	r2, r3, #1
 2676 01ca 7A64     		str	r2, [r7, #68]
 2677              		.loc 1 767 10
 2678 01cc 3A6C     		ldr	r2, [r7, #64]
 2679 01ce 1344     		add	r3, r3, r2
 2680              		.loc 1 767 18
 2681 01d0 3022     		movs	r2, #48
 2682 01d2 1A70     		strb	r2, [r3]
 2683              	.L154:
 766:Core/Src/printf.c ****       buf[len++] = '0';
 2684              		.loc 1 766 26
 2685 01d4 7A6C     		ldr	r2, [r7, #68]
 2686 01d6 BB6B     		ldr	r3, [r7, #56]
 2687 01d8 9A42     		cmp	r2, r3
 2688 01da 02D2     		bcs	.L151
 766:Core/Src/printf.c ****       buf[len++] = '0';
 2689              		.loc 1 766 26 is_stmt 0 discriminator 1
 2690 01dc 7B6C     		ldr	r3, [r7, #68]
 2691 01de 1F2B     		cmp	r3, #31
 2692 01e0 F1D9     		bls	.L155
 2693              	.L151:
 768:Core/Src/printf.c ****     }
 769:Core/Src/printf.c ****   }
 770:Core/Src/printf.c **** 
 771:Core/Src/printf.c ****   if (len < PRINTF_DECIMAL_BUFFER_SIZE) {
 2694              		.loc 1 771 6 is_stmt 1
 2695 01e2 7B6C     		ldr	r3, [r7, #68]
 2696 01e4 1F2B     		cmp	r3, #31
 2697 01e6 24D8     		bhi	.L156
 772:Core/Src/printf.c ****     if (number_.is_negative) {
 2698              		.loc 1 772 16
 2699 01e8 97F82830 		ldrb	r3, [r7, #40]	@ zero_extendqisi2
 2700              		.loc 1 772 8
 2701 01ec 002B     		cmp	r3, #0
 2702 01ee 07D0     		beq	.L157
 773:Core/Src/printf.c ****       buf[len++] = '-';
 2703              		.loc 1 773 14
 2704 01f0 7B6C     		ldr	r3, [r7, #68]
 2705 01f2 5A1C     		adds	r2, r3, #1
 2706 01f4 7A64     		str	r2, [r7, #68]
 2707              		.loc 1 773 10
 2708 01f6 3A6C     		ldr	r2, [r7, #64]
 2709 01f8 1344     		add	r3, r3, r2
 2710              		.loc 1 773 18
 2711 01fa 2D22     		movs	r2, #45
 2712 01fc 1A70     		strb	r2, [r3]
 2713 01fe 18E0     		b	.L156
 2714              	.L157:
 774:Core/Src/printf.c ****     }
 775:Core/Src/printf.c ****     else if (flags & FLAGS_PLUS) {
 2715              		.loc 1 775 20
 2716 0200 FB6B     		ldr	r3, [r7, #60]
 2717 0202 03F00403 		and	r3, r3, #4
 2718              		.loc 1 775 13
 2719 0206 002B     		cmp	r3, #0
 2720 0208 07D0     		beq	.L158
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 62


 776:Core/Src/printf.c ****       buf[len++] = '+';  // ignore the space if the '+' exists
 2721              		.loc 1 776 14
 2722 020a 7B6C     		ldr	r3, [r7, #68]
 2723 020c 5A1C     		adds	r2, r3, #1
 2724 020e 7A64     		str	r2, [r7, #68]
 2725              		.loc 1 776 10
 2726 0210 3A6C     		ldr	r2, [r7, #64]
 2727 0212 1344     		add	r3, r3, r2
 2728              		.loc 1 776 18
 2729 0214 2B22     		movs	r2, #43
 2730 0216 1A70     		strb	r2, [r3]
 2731 0218 0BE0     		b	.L156
 2732              	.L158:
 777:Core/Src/printf.c ****     }
 778:Core/Src/printf.c ****     else if (flags & FLAGS_SPACE) {
 2733              		.loc 1 778 20
 2734 021a FB6B     		ldr	r3, [r7, #60]
 2735 021c 03F00803 		and	r3, r3, #8
 2736              		.loc 1 778 13
 2737 0220 002B     		cmp	r3, #0
 2738 0222 06D0     		beq	.L156
 779:Core/Src/printf.c ****       buf[len++] = ' ';
 2739              		.loc 1 779 14
 2740 0224 7B6C     		ldr	r3, [r7, #68]
 2741 0226 5A1C     		adds	r2, r3, #1
 2742 0228 7A64     		str	r2, [r7, #68]
 2743              		.loc 1 779 10
 2744 022a 3A6C     		ldr	r2, [r7, #64]
 2745 022c 1344     		add	r3, r3, r2
 2746              		.loc 1 779 18
 2747 022e 2022     		movs	r2, #32
 2748 0230 1A70     		strb	r2, [r3]
 2749              	.L156:
 780:Core/Src/printf.c ****     }
 781:Core/Src/printf.c ****   }
 782:Core/Src/printf.c **** 
 783:Core/Src/printf.c ****   out_rev_(output, buf, len, width, flags);
 2750              		.loc 1 783 3
 2751 0232 FB6B     		ldr	r3, [r7, #60]
 2752 0234 0093     		str	r3, [sp]
 2753 0236 BB6B     		ldr	r3, [r7, #56]
 2754 0238 7A6C     		ldr	r2, [r7, #68]
 2755 023a 396C     		ldr	r1, [r7, #64]
 2756 023c 386B     		ldr	r0, [r7, #48]
 2757 023e FFF7FEFF 		bl	out_rev_
 784:Core/Src/printf.c **** }
 2758              		.loc 1 784 1
 2759 0242 00BF     		nop
 2760 0244 1037     		adds	r7, r7, #16
 2761              	.LCFI118:
 2762              		.cfi_def_cfa_offset 24
 2763 0246 BD46     		mov	sp, r7
 2764              	.LCFI119:
 2765              		.cfi_def_cfa_register 13
 2766              		@ sp needed
 2767 0248 BDE88040 		pop	{r7, lr}
 2768              	.LCFI120:
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 63


 2769              		.cfi_restore 14
 2770              		.cfi_restore 7
 2771              		.cfi_def_cfa_offset 16
 2772 024c 04B0     		add	sp, sp, #16
 2773              	.LCFI121:
 2774              		.cfi_def_cfa_offset 0
 2775 024e 7047     		bx	lr
 2776              		.cfi_endproc
 2777              	.LFE21:
 2779              		.section	.text.print_decimal_number,"ax",%progbits
 2780              		.align	1
 2781              		.syntax unified
 2782              		.thumb
 2783              		.thumb_func
 2785              	print_decimal_number:
 2786              	.LFB22:
 785:Core/Src/printf.c **** 
 786:Core/Src/printf.c ****       // internal ftoa for fixed decimal floating point
 787:Core/Src/printf.c **** static void print_decimal_number(output_gadget_t* output, double number, printf_size_t precision, p
 788:Core/Src/printf.c **** {
 2787              		.loc 1 788 1
 2788              		.cfi_startproc
 2789              		@ args = 8, pretend = 0, frame = 48
 2790              		@ frame_needed = 1, uses_anonymous_args = 0
 2791 0000 80B5     		push	{r7, lr}
 2792              	.LCFI122:
 2793              		.cfi_def_cfa_offset 8
 2794              		.cfi_offset 7, -8
 2795              		.cfi_offset 14, -4
 2796 0002 94B0     		sub	sp, sp, #80
 2797              	.LCFI123:
 2798              		.cfi_def_cfa_offset 88
 2799 0004 08AF     		add	r7, sp, #32
 2800              	.LCFI124:
 2801              		.cfi_def_cfa 7, 56
 2802 0006 7861     		str	r0, [r7, #20]
 2803 0008 87ED020B 		vstr.64	d0, [r7, #8]
 2804 000c 3961     		str	r1, [r7, #16]
 2805 000e 7A60     		str	r2, [r7, #4]
 2806 0010 3B60     		str	r3, [r7]
 789:Core/Src/printf.c ****   struct double_components value_ = get_components(number, precision);
 2807              		.loc 1 789 37
 2808 0012 07F11803 		add	r3, r7, #24
 2809 0016 3969     		ldr	r1, [r7, #16]
 2810 0018 97ED020B 		vldr.64	d0, [r7, #8]
 2811 001c 1846     		mov	r0, r3
 2812 001e FFF7FEFF 		bl	get_components
 790:Core/Src/printf.c ****   print_broken_up_decimal(value_, output, precision, width, flags, buf, len);
 2813              		.loc 1 790 3
 2814 0022 FB6B     		ldr	r3, [r7, #60]
 2815 0024 0793     		str	r3, [sp, #28]
 2816 0026 BB6B     		ldr	r3, [r7, #56]
 2817 0028 0693     		str	r3, [sp, #24]
 2818 002a 3B68     		ldr	r3, [r7]
 2819 002c 0593     		str	r3, [sp, #20]
 2820 002e 7B68     		ldr	r3, [r7, #4]
 2821 0030 0493     		str	r3, [sp, #16]
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 64


 2822 0032 3B69     		ldr	r3, [r7, #16]
 2823 0034 0393     		str	r3, [sp, #12]
 2824 0036 7B69     		ldr	r3, [r7, #20]
 2825 0038 0293     		str	r3, [sp, #8]
 2826 003a 6A46     		mov	r2, sp
 2827 003c 07F12803 		add	r3, r7, #40
 2828 0040 93E80300 		ldm	r3, {r0, r1}
 2829 0044 82E80300 		stm	r2, {r0, r1}
 2830 0048 07F11803 		add	r3, r7, #24
 2831 004c 0FCB     		ldm	r3, {r0, r1, r2, r3}
 2832 004e FFF7FEFF 		bl	print_broken_up_decimal
 791:Core/Src/printf.c **** }
 2833              		.loc 1 791 1
 2834 0052 00BF     		nop
 2835 0054 3037     		adds	r7, r7, #48
 2836              	.LCFI125:
 2837              		.cfi_def_cfa_offset 8
 2838 0056 BD46     		mov	sp, r7
 2839              	.LCFI126:
 2840              		.cfi_def_cfa_register 13
 2841              		@ sp needed
 2842 0058 80BD     		pop	{r7, pc}
 2843              		.cfi_endproc
 2844              	.LFE22:
 2846              		.global	__aeabi_d2iz
 2847              		.global	__aeabi_i2d
 2848              		.section	.text.bastardized_floor,"ax",%progbits
 2849              		.align	1
 2850              		.syntax unified
 2851              		.thumb
 2852              		.thumb_func
 2854              	bastardized_floor:
 2855              	.LFB23:
 792:Core/Src/printf.c **** 
 793:Core/Src/printf.c **** #if PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS
 794:Core/Src/printf.c **** 
 795:Core/Src/printf.c **** // A floor function - but one which only works for numbers whose
 796:Core/Src/printf.c **** // floor value is representable by an int.
 797:Core/Src/printf.c **** static int bastardized_floor(double x)
 798:Core/Src/printf.c **** {
 2856              		.loc 1 798 1
 2857              		.cfi_startproc
 2858              		@ args = 0, pretend = 0, frame = 16
 2859              		@ frame_needed = 1, uses_anonymous_args = 0
 2860 0000 80B5     		push	{r7, lr}
 2861              	.LCFI127:
 2862              		.cfi_def_cfa_offset 8
 2863              		.cfi_offset 7, -8
 2864              		.cfi_offset 14, -4
 2865 0002 84B0     		sub	sp, sp, #16
 2866              	.LCFI128:
 2867              		.cfi_def_cfa_offset 24
 2868 0004 00AF     		add	r7, sp, #0
 2869              	.LCFI129:
 2870              		.cfi_def_cfa_register 7
 2871 0006 87ED000B 		vstr.64	d0, [r7]
 799:Core/Src/printf.c ****   if (x >= 0) { return (int) x; }
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 65


 2872              		.loc 1 799 6
 2873 000a 4FF00002 		mov	r2, #0
 2874 000e 4FF00003 		mov	r3, #0
 2875 0012 D7E90001 		ldrd	r0, [r7]
 2876 0016 FFF7FEFF 		bl	__aeabi_dcmpge
 2877 001a 0346     		mov	r3, r0
 2878 001c 002B     		cmp	r3, #0
 2879 001e 05D0     		beq	.L172
 2880              		.loc 1 799 24 discriminator 1
 2881 0020 D7E90001 		ldrd	r0, [r7]
 2882 0024 FFF7FEFF 		bl	__aeabi_d2iz
 2883 0028 0346     		mov	r3, r0
 2884              		.loc 1 799 24 is_stmt 0
 2885 002a 15E0     		b	.L166
 2886              	.L172:
 800:Core/Src/printf.c ****   int n = (int) x;
 2887              		.loc 1 800 7 is_stmt 1
 2888 002c D7E90001 		ldrd	r0, [r7]
 2889 0030 FFF7FEFF 		bl	__aeabi_d2iz
 2890 0034 0346     		mov	r3, r0
 2891 0036 FB60     		str	r3, [r7, #12]
 801:Core/Src/printf.c ****   return ( ((double) n) == x ) ? n : n-1;
 2892              		.loc 1 801 13
 2893 0038 F868     		ldr	r0, [r7, #12]
 2894 003a FFF7FEFF 		bl	__aeabi_i2d
 2895 003e 0246     		mov	r2, r0
 2896 0040 0B46     		mov	r3, r1
 2897              		.loc 1 801 36
 2898 0042 D7E90001 		ldrd	r0, [r7]
 2899 0046 FFF7FEFF 		bl	__aeabi_dcmpeq
 2900 004a 0346     		mov	r3, r0
 2901 004c 002B     		cmp	r3, #0
 2902 004e 02D1     		bne	.L173
 2903              		.loc 1 801 36 is_stmt 0 discriminator 1
 2904 0050 FB68     		ldr	r3, [r7, #12]
 2905 0052 013B     		subs	r3, r3, #1
 2906              		.loc 1 801 36
 2907 0054 00E0     		b	.L166
 2908              	.L173:
 2909              		.loc 1 801 36 discriminator 2
 2910 0056 FB68     		ldr	r3, [r7, #12]
 2911              	.L166:
 802:Core/Src/printf.c **** }
 2912              		.loc 1 802 1 is_stmt 1
 2913 0058 1846     		mov	r0, r3
 2914 005a 1037     		adds	r7, r7, #16
 2915              	.LCFI130:
 2916              		.cfi_def_cfa_offset 8
 2917 005c BD46     		mov	sp, r7
 2918              	.LCFI131:
 2919              		.cfi_def_cfa_register 13
 2920              		@ sp needed
 2921 005e 80BD     		pop	{r7, pc}
 2922              		.cfi_endproc
 2923              	.LFE23:
 2925              		.global	__aeabi_dadd
 2926              		.section	.text.log10_of_positive,"ax",%progbits
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 66


 2927              		.align	1
 2928              		.syntax unified
 2929              		.thumb
 2930              		.thumb_func
 2932              	log10_of_positive:
 2933              	.LFB24:
 803:Core/Src/printf.c **** 
 804:Core/Src/printf.c **** // Computes the base-10 logarithm of the input number - which must be an actual
 805:Core/Src/printf.c **** // positive number (not infinity or NaN, nor a sub-normal)
 806:Core/Src/printf.c **** static double log10_of_positive(double positive_number)
 807:Core/Src/printf.c **** {
 2934              		.loc 1 807 1
 2935              		.cfi_startproc
 2936              		@ args = 0, pretend = 0, frame = 32
 2937              		@ frame_needed = 1, uses_anonymous_args = 0
 2938 0000 2DE9B043 		push	{r4, r5, r7, r8, r9, lr}
 2939              	.LCFI132:
 2940              		.cfi_def_cfa_offset 24
 2941              		.cfi_offset 4, -24
 2942              		.cfi_offset 5, -20
 2943              		.cfi_offset 7, -16
 2944              		.cfi_offset 8, -12
 2945              		.cfi_offset 9, -8
 2946              		.cfi_offset 14, -4
 2947 0004 88B0     		sub	sp, sp, #32
 2948              	.LCFI133:
 2949              		.cfi_def_cfa_offset 56
 2950 0006 00AF     		add	r7, sp, #0
 2951              	.LCFI134:
 2952              		.cfi_def_cfa_register 7
 2953 0008 87ED000B 		vstr.64	d0, [r7]
 808:Core/Src/printf.c ****   // The implementation follows David Gay (https://www.ampl.com/netlib/fp/dtoa.c).
 809:Core/Src/printf.c ****   //
 810:Core/Src/printf.c ****   // Since log_10 ( M * 2^x ) = log_10(M) + x , we can separate the components of
 811:Core/Src/printf.c ****   // our input number, and need only solve log_10(M) for M between 1 and 2 (as
 812:Core/Src/printf.c ****   // the base-2 mantissa is always 1-point-something). In that limited range, a
 813:Core/Src/printf.c ****   // Taylor series expansion of log10(x) should serve us well enough; and we'll
 814:Core/Src/printf.c ****   // take the mid-point, 1.5, as the point of expansion.
 815:Core/Src/printf.c **** 
 816:Core/Src/printf.c ****   double_with_bit_access dwba = get_bit_access(positive_number);
 2954              		.loc 1 816 33
 2955 000c 07F10803 		add	r3, r7, #8
 2956 0010 97ED000B 		vldr.64	d0, [r7]
 2957 0014 1846     		mov	r0, r3
 2958 0016 FFF7FEFF 		bl	get_bit_access
 817:Core/Src/printf.c ****   // based on the algorithm by David Gay (https://www.ampl.com/netlib/fp/dtoa.c)
 818:Core/Src/printf.c ****   int exp2 = get_exp2(dwba);
 2959              		.loc 1 818 14
 2960 001a D7E90201 		ldrd	r0, [r7, #8]
 2961 001e FFF7FEFF 		bl	get_exp2
 2962 0022 F861     		str	r0, [r7, #28]
 819:Core/Src/printf.c ****   // drop the exponent, so dwba.F comes into the range [1,2)
 820:Core/Src/printf.c ****   dwba.U = (dwba.U & (((double_uint_t) (1) << DOUBLE_STORED_MANTISSA_BITS) - 1U)) |
 2963              		.loc 1 820 17
 2964 0024 D7E90223 		ldrd	r2, [r7, #8]
 2965              		.loc 1 820 20
 2966 0028 9046     		mov	r8, r2
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 67


 2967 002a C3F31309 		ubfx	r9, r3, #0, #20
 2968              		.loc 1 820 83
 2969 002e 4446     		mov	r4, r8
 2970 0030 49F07F55 		orr	r5, r9, #1069547520
 2971 0034 45F44015 		orr	r5, r5, #3145728
 2972              		.loc 1 820 10
 2973 0038 C7E90245 		strd	r4, [r7, #8]
 821:Core/Src/printf.c ****            ((double_uint_t) DOUBLE_BASE_EXPONENT << DOUBLE_STORED_MANTISSA_BITS);
 822:Core/Src/printf.c ****   double z = (dwba.F - 1.5);
 2974              		.loc 1 822 19
 2975 003c D7E90201 		ldrd	r0, [r7, #8]
 2976              		.loc 1 822 10
 2977 0040 4FF00002 		mov	r2, #0
 2978 0044 424B     		ldr	r3, .L176+40
 2979 0046 FFF7FEFF 		bl	__aeabi_dsub
 2980 004a 0246     		mov	r2, r0
 2981 004c 0B46     		mov	r3, r1
 2982 004e C7E90423 		strd	r2, [r7, #16]
 823:Core/Src/printf.c ****   return (
 824:Core/Src/printf.c ****     // Taylor expansion around 1.5:
 825:Core/Src/printf.c ****     0.1760912590556812420           // Expansion term 0: ln(1.5)            / ln(10)
 826:Core/Src/printf.c ****     + z     * 0.2895296546021678851 // Expansion term 1: (M - 1.5)   * 2/3  / ln(10)
 2983              		.loc 1 826 13
 2984 0052 35A3     		adr	r3, .L176
 2985 0054 D3E90023 		ldrd	r2, [r3]
 2986 0058 D7E90401 		ldrd	r0, [r7, #16]
 2987 005c FFF7FEFF 		bl	__aeabi_dmul
 2988 0060 0246     		mov	r2, r0
 2989 0062 0B46     		mov	r3, r1
 2990 0064 1046     		mov	r0, r2
 2991 0066 1946     		mov	r1, r3
 2992              		.loc 1 826 5
 2993 0068 31A3     		adr	r3, .L176+8
 2994 006a D3E90023 		ldrd	r2, [r3]
 2995 006e FFF7FEFF 		bl	__aeabi_dadd
 2996 0072 0246     		mov	r2, r0
 2997 0074 0B46     		mov	r3, r1
 2998 0076 1446     		mov	r4, r2
 2999 0078 1D46     		mov	r5, r3
 827:Core/Src/printf.c **** #if PRINTF_LOG10_TAYLOR_TERMS > 2
 828:Core/Src/printf.c ****     - z*z   * 0.0965098848673892950 // Expansion term 2: (M - 1.5)^2 * 2/9  / ln(10)
 3000              		.loc 1 828 8
 3001 007a D7E90423 		ldrd	r2, [r7, #16]
 3002 007e D7E90401 		ldrd	r0, [r7, #16]
 3003 0082 FFF7FEFF 		bl	__aeabi_dmul
 3004 0086 0246     		mov	r2, r0
 3005 0088 0B46     		mov	r3, r1
 3006 008a 1046     		mov	r0, r2
 3007 008c 1946     		mov	r1, r3
 3008              		.loc 1 828 13
 3009 008e 2AA3     		adr	r3, .L176+16
 3010 0090 D3E90023 		ldrd	r2, [r3]
 3011 0094 FFF7FEFF 		bl	__aeabi_dmul
 3012 0098 0246     		mov	r2, r0
 3013 009a 0B46     		mov	r3, r1
 3014              		.loc 1 828 5
 3015 009c 2046     		mov	r0, r4
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 68


 3016 009e 2946     		mov	r1, r5
 3017 00a0 FFF7FEFF 		bl	__aeabi_dsub
 3018 00a4 0246     		mov	r2, r0
 3019 00a6 0B46     		mov	r3, r1
 3020 00a8 1446     		mov	r4, r2
 3021 00aa 1D46     		mov	r5, r3
 829:Core/Src/printf.c **** #if PRINTF_LOG10_TAYLOR_TERMS > 3
 830:Core/Src/printf.c ****     + z*z*z * 0.0428932821632841311 // Expansion term 2: (M - 1.5)^3 * 8/81 / ln(10)
 3022              		.loc 1 830 8
 3023 00ac D7E90423 		ldrd	r2, [r7, #16]
 3024 00b0 D7E90401 		ldrd	r0, [r7, #16]
 3025 00b4 FFF7FEFF 		bl	__aeabi_dmul
 3026 00b8 0246     		mov	r2, r0
 3027 00ba 0B46     		mov	r3, r1
 3028 00bc 1046     		mov	r0, r2
 3029 00be 1946     		mov	r1, r3
 3030              		.loc 1 830 10
 3031 00c0 D7E90423 		ldrd	r2, [r7, #16]
 3032 00c4 FFF7FEFF 		bl	__aeabi_dmul
 3033 00c8 0246     		mov	r2, r0
 3034 00ca 0B46     		mov	r3, r1
 3035 00cc 1046     		mov	r0, r2
 3036 00ce 1946     		mov	r1, r3
 3037              		.loc 1 830 13
 3038 00d0 1BA3     		adr	r3, .L176+24
 3039 00d2 D3E90023 		ldrd	r2, [r3]
 3040 00d6 FFF7FEFF 		bl	__aeabi_dmul
 3041 00da 0246     		mov	r2, r0
 3042 00dc 0B46     		mov	r3, r1
 3043              		.loc 1 830 5
 3044 00de 2046     		mov	r0, r4
 3045 00e0 2946     		mov	r1, r5
 3046 00e2 FFF7FEFF 		bl	__aeabi_dadd
 3047 00e6 0246     		mov	r2, r0
 3048 00e8 0B46     		mov	r3, r1
 3049 00ea 1446     		mov	r4, r2
 3050 00ec 1D46     		mov	r5, r3
 831:Core/Src/printf.c **** #endif
 832:Core/Src/printf.c **** #endif
 833:Core/Src/printf.c ****     // exact log_2 of the exponent x, with logarithm base change
 834:Core/Src/printf.c ****     + exp2 * 0.30102999566398119521 // = exp2 * log_10(2) = exp2 * ln(2)/ln(10)
 3051              		.loc 1 834 12
 3052 00ee F869     		ldr	r0, [r7, #28]
 3053 00f0 FFF7FEFF 		bl	__aeabi_i2d
 3054 00f4 14A3     		adr	r3, .L176+32
 3055 00f6 D3E90023 		ldrd	r2, [r3]
 3056 00fa FFF7FEFF 		bl	__aeabi_dmul
 3057 00fe 0246     		mov	r2, r0
 3058 0100 0B46     		mov	r3, r1
 3059              		.loc 1 834 5
 3060 0102 2046     		mov	r0, r4
 3061 0104 2946     		mov	r1, r5
 3062 0106 FFF7FEFF 		bl	__aeabi_dadd
 3063 010a 0246     		mov	r2, r0
 3064 010c 0B46     		mov	r3, r1
 3065 010e 43EC172B 		vmov	d7, r2, r3
 835:Core/Src/printf.c ****   );
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 69


 836:Core/Src/printf.c **** }
 3066              		.loc 1 836 1
 3067 0112 B0EE470A 		vmov.f32	s0, s14
 3068 0116 F0EE670A 		vmov.f32	s1, s15
 3069 011a 2037     		adds	r7, r7, #32
 3070              	.LCFI135:
 3071              		.cfi_def_cfa_offset 24
 3072 011c BD46     		mov	sp, r7
 3073              	.LCFI136:
 3074              		.cfi_def_cfa_register 13
 3075              		@ sp needed
 3076 011e BDE8B083 		pop	{r4, r5, r7, r8, r9, pc}
 3077              	.L177:
 3078 0122 00BFAFF3 		.align	3
 3078      0080
 3079              	.L176:
 3080 0128 5F436F63 		.word	1668236127
 3081 012c A787D23F 		.word	1070761895
 3082 0130 FCB7608B 		.word	-1956595716
 3083 0134 288AC63F 		.word	1069976104
 3084 0138 7E043F2F 		.word	792659070
 3085 013c DFB4B83F 		.word	1069069535
 3086 0140 FF0338B8 		.word	-1204288513
 3087 0144 1BF6A53F 		.word	1067841051
 3088 0148 FF799F50 		.word	1352628735
 3089 014c 1344D33F 		.word	1070810131
 3090 0150 0000F83F 		.word	1073217536
 3091              		.cfi_endproc
 3092              	.LFE24:
 3094              		.section	.text.pow10_of_int,"ax",%progbits
 3095              		.align	1
 3096              		.syntax unified
 3097              		.thumb
 3098              		.thumb_func
 3100              	pow10_of_int:
 3101              	.LFB25:
 837:Core/Src/printf.c **** 
 838:Core/Src/printf.c **** 
 839:Core/Src/printf.c **** static double pow10_of_int(int floored_exp10)
 840:Core/Src/printf.c **** {
 3102              		.loc 1 840 1
 3103              		.cfi_startproc
 3104              		@ args = 0, pretend = 0, frame = 40
 3105              		@ frame_needed = 1, uses_anonymous_args = 0
 3106 0000 2DE9B04F 		push	{r4, r5, r7, r8, r9, r10, fp, lr}
 3107              	.LCFI137:
 3108              		.cfi_def_cfa_offset 32
 3109              		.cfi_offset 4, -32
 3110              		.cfi_offset 5, -28
 3111              		.cfi_offset 7, -24
 3112              		.cfi_offset 8, -20
 3113              		.cfi_offset 9, -16
 3114              		.cfi_offset 10, -12
 3115              		.cfi_offset 11, -8
 3116              		.cfi_offset 14, -4
 3117 0004 8AB0     		sub	sp, sp, #40
 3118              	.LCFI138:
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 70


 3119              		.cfi_def_cfa_offset 72
 3120 0006 00AF     		add	r7, sp, #0
 3121              	.LCFI139:
 3122              		.cfi_def_cfa_register 7
 3123 0008 7860     		str	r0, [r7, #4]
 841:Core/Src/printf.c ****   // A crude hack for avoiding undesired behavior with barely-normal or slightly-subnormal values.
 842:Core/Src/printf.c ****   if (floored_exp10 == DOUBLE_MAX_SUBNORMAL_EXPONENT_OF_10) {
 3124              		.loc 1 842 6
 3125 000a 7B68     		ldr	r3, [r7, #4]
 3126 000c 13F59A7F 		cmn	r3, #308
 3127 0010 03D1     		bne	.L179
 843:Core/Src/printf.c ****     return DOUBLE_MAX_SUBNORMAL_POWER_OF_10;
 3128              		.loc 1 843 12
 3129 0012 6AA3     		adr	r3, .L182+36
 3130 0014 D3E90023 		ldrd	r2, [r3]
 3131 0018 B4E0     		b	.L181
 3132              	.L179:
 844:Core/Src/printf.c ****   }
 845:Core/Src/printf.c ****   // Compute 10^(floored_exp10) but (try to) make sure that doesn't overflow
 846:Core/Src/printf.c ****   double_with_bit_access dwba;
 847:Core/Src/printf.c ****   int exp2 = bastardized_floor(floored_exp10 * 3.321928094887362 + 0.5);
 3133              		.loc 1 847 46
 3134 001a 7868     		ldr	r0, [r7, #4]
 3135 001c FFF7FEFF 		bl	__aeabi_i2d
 3136 0020 68A3     		adr	r3, .L182+44
 3137 0022 D3E90023 		ldrd	r2, [r3]
 3138 0026 FFF7FEFF 		bl	__aeabi_dmul
 3139 002a 0246     		mov	r2, r0
 3140 002c 0B46     		mov	r3, r1
 3141 002e 1046     		mov	r0, r2
 3142 0030 1946     		mov	r1, r3
 3143              		.loc 1 847 14
 3144 0032 4FF00002 		mov	r2, #0
 3145 0036 5C4B     		ldr	r3, .L182+16
 3146 0038 FFF7FEFF 		bl	__aeabi_dadd
 3147 003c 0246     		mov	r2, r0
 3148 003e 0B46     		mov	r3, r1
 3149 0040 43EC172B 		vmov	d7, r2, r3
 3150 0044 B0EE470A 		vmov.f32	s0, s14
 3151 0048 F0EE670A 		vmov.f32	s1, s15
 3152 004c FFF7FEFF 		bl	bastardized_floor
 3153 0050 7862     		str	r0, [r7, #36]
 848:Core/Src/printf.c ****   const double z  = floored_exp10 * 2.302585092994046 - exp2 * 0.6931471805599453;
 3154              		.loc 1 848 35
 3155 0052 7868     		ldr	r0, [r7, #4]
 3156 0054 FFF7FEFF 		bl	__aeabi_i2d
 3157 0058 4FA3     		adr	r3, .L182
 3158 005a D3E90023 		ldrd	r2, [r3]
 3159 005e FFF7FEFF 		bl	__aeabi_dmul
 3160 0062 0246     		mov	r2, r0
 3161 0064 0B46     		mov	r3, r1
 3162 0066 9246     		mov	r10, r2
 3163 0068 9B46     		mov	fp, r3
 3164              		.loc 1 848 62
 3165 006a 786A     		ldr	r0, [r7, #36]
 3166 006c FFF7FEFF 		bl	__aeabi_i2d
 3167 0070 4BA3     		adr	r3, .L182+8
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 71


 3168 0072 D3E90023 		ldrd	r2, [r3]
 3169 0076 FFF7FEFF 		bl	__aeabi_dmul
 3170 007a 0246     		mov	r2, r0
 3171 007c 0B46     		mov	r3, r1
 3172              		.loc 1 848 16
 3173 007e 5046     		mov	r0, r10
 3174 0080 5946     		mov	r1, fp
 3175 0082 FFF7FEFF 		bl	__aeabi_dsub
 3176 0086 0246     		mov	r2, r0
 3177 0088 0B46     		mov	r3, r1
 3178 008a C7E90623 		strd	r2, [r7, #24]
 849:Core/Src/printf.c ****   const double z2 = z * z;
 3179              		.loc 1 849 16
 3180 008e D7E90623 		ldrd	r2, [r7, #24]
 3181 0092 D7E90601 		ldrd	r0, [r7, #24]
 3182 0096 FFF7FEFF 		bl	__aeabi_dmul
 3183 009a 0246     		mov	r2, r0
 3184 009c 0B46     		mov	r3, r1
 3185 009e C7E90423 		strd	r2, [r7, #16]
 850:Core/Src/printf.c ****   dwba.U = ((double_uint_t)(exp2) + DOUBLE_BASE_EXPONENT) << DOUBLE_STORED_MANTISSA_BITS;
 3186              		.loc 1 850 13
 3187 00a2 7B6A     		ldr	r3, [r7, #36]
 3188 00a4 DA17     		asrs	r2, r3, #31
 3189 00a6 1C46     		mov	r4, r3
 3190 00a8 1546     		mov	r5, r2
 3191              		.loc 1 850 35
 3192 00aa 40F2FF33 		movw	r3, #1023
 3193 00ae 14EB0308 		adds	r8, r4, r3
 3194 00b2 45F10009 		adc	r9, r5, #0
 3195              		.loc 1 850 59
 3196 00b6 4FF00002 		mov	r2, #0
 3197 00ba 4FF00003 		mov	r3, #0
 3198 00be 4FEA0853 		lsl	r3, r8, #20
 3199 00c2 0022     		movs	r2, #0
 3200              		.loc 1 850 10
 3201 00c4 C7E90223 		strd	r2, [r7, #8]
 851:Core/Src/printf.c ****   // compute exp(z) using continued fractions,
 852:Core/Src/printf.c ****   // see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
 853:Core/Src/printf.c ****   dwba.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 3202              		.loc 1 853 7
 3203 00c8 D7E90245 		ldrd	r4, [r7, #8]
 3204              		.loc 1 853 19
 3205 00cc D7E90601 		ldrd	r0, [r7, #24]
 3206 00d0 0246     		mov	r2, r0
 3207 00d2 0B46     		mov	r3, r1
 3208 00d4 FFF7FEFF 		bl	__aeabi_dadd
 3209 00d8 0246     		mov	r2, r0
 3210 00da 0B46     		mov	r3, r1
 3211 00dc 9046     		mov	r8, r2
 3212 00de 9946     		mov	r9, r3
 3213              		.loc 1 853 28
 3214 00e0 D7E90623 		ldrd	r2, [r7, #24]
 3215 00e4 4FF00000 		mov	r0, #0
 3216 00e8 4FF08041 		mov	r1, #1073741824
 3217 00ec FFF7FEFF 		bl	__aeabi_dsub
 3218 00f0 0246     		mov	r2, r0
 3219 00f2 0B46     		mov	r3, r1
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 72


 3220 00f4 9246     		mov	r10, r2
 3221 00f6 9B46     		mov	fp, r3
 3222              		.loc 1 853 60
 3223 00f8 4FF00002 		mov	r2, #0
 3224 00fc 2B4B     		ldr	r3, .L182+20
 3225 00fe D7E90401 		ldrd	r0, [r7, #16]
 3226 0102 FFF7FEFF 		bl	__aeabi_ddiv
 3227 0106 0246     		mov	r2, r0
 3228 0108 0B46     		mov	r3, r1
 3229 010a 1046     		mov	r0, r2
 3230 010c 1946     		mov	r1, r3
 3231              		.loc 1 853 55
 3232 010e 4FF00002 		mov	r2, #0
 3233 0112 274B     		ldr	r3, .L182+24
 3234 0114 FFF7FEFF 		bl	__aeabi_dadd
 3235 0118 0246     		mov	r2, r0
 3236 011a 0B46     		mov	r3, r1
 3237              		.loc 1 853 49
 3238 011c D7E90401 		ldrd	r0, [r7, #16]
 3239 0120 FFF7FEFF 		bl	__aeabi_ddiv
 3240 0124 0246     		mov	r2, r0
 3241 0126 0B46     		mov	r3, r1
 3242 0128 1046     		mov	r0, r2
 3243 012a 1946     		mov	r1, r3
 3244              		.loc 1 853 43
 3245 012c 4FF00002 		mov	r2, #0
 3246 0130 204B     		ldr	r3, .L182+28
 3247 0132 FFF7FEFF 		bl	__aeabi_dadd
 3248 0136 0246     		mov	r2, r0
 3249 0138 0B46     		mov	r3, r1
 3250              		.loc 1 853 38
 3251 013a D7E90401 		ldrd	r0, [r7, #16]
 3252 013e FFF7FEFF 		bl	__aeabi_ddiv
 3253 0142 0246     		mov	r2, r0
 3254 0144 0B46     		mov	r3, r1
 3255              		.loc 1 853 32
 3256 0146 5046     		mov	r0, r10
 3257 0148 5946     		mov	r1, fp
 3258 014a FFF7FEFF 		bl	__aeabi_dadd
 3259 014e 0246     		mov	r2, r0
 3260 0150 0B46     		mov	r3, r1
 3261              		.loc 1 853 23
 3262 0152 4046     		mov	r0, r8
 3263 0154 4946     		mov	r1, r9
 3264 0156 FFF7FEFF 		bl	__aeabi_ddiv
 3265 015a 0246     		mov	r2, r0
 3266 015c 0B46     		mov	r3, r1
 3267 015e 1046     		mov	r0, r2
 3268 0160 1946     		mov	r1, r3
 3269              		.loc 1 853 15
 3270 0162 4FF00002 		mov	r2, #0
 3271 0166 144B     		ldr	r3, .L182+32
 3272 0168 FFF7FEFF 		bl	__aeabi_dadd
 3273 016c 0246     		mov	r2, r0
 3274 016e 0B46     		mov	r3, r1
 3275              		.loc 1 853 10
 3276 0170 2046     		mov	r0, r4
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 73


 3277 0172 2946     		mov	r1, r5
 3278 0174 FFF7FEFF 		bl	__aeabi_dmul
 3279 0178 0246     		mov	r2, r0
 3280 017a 0B46     		mov	r3, r1
 3281 017c C7E90223 		strd	r2, [r7, #8]
 854:Core/Src/printf.c ****   return dwba.F;
 3282              		.loc 1 854 14
 3283 0180 D7E90223 		ldrd	r2, [r7, #8]
 3284              	.L181:
 855:Core/Src/printf.c **** }
 3285              		.loc 1 855 1
 3286 0184 43EC172B 		vmov	d7, r2, r3
 3287 0188 B0EE470A 		vmov.f32	s0, s14
 3288 018c F0EE670A 		vmov.f32	s1, s15
 3289 0190 2837     		adds	r7, r7, #40
 3290              	.LCFI140:
 3291              		.cfi_def_cfa_offset 32
 3292 0192 BD46     		mov	sp, r7
 3293              	.LCFI141:
 3294              		.cfi_def_cfa_register 13
 3295              		@ sp needed
 3296 0194 BDE8B08F 		pop	{r4, r5, r7, r8, r9, r10, fp, pc}
 3297              	.L183:
 3298              		.align	3
 3299              	.L182:
 3300 0198 1655B5BB 		.word	-1145744106
 3301 019c B16B0240 		.word	1073900465
 3302 01a0 EF39FAFE 		.word	-17155601
 3303 01a4 422EE63F 		.word	1072049730
 3304 01a8 0000E03F 		.word	1071644672
 3305 01ac 00002C40 		.word	1076625408
 3306 01b0 00002440 		.word	1076101120
 3307 01b4 00001840 		.word	1075314688
 3308 01b8 0000F03F 		.word	1072693248
 3309 01bc D2E81978 		.word	2014963922
 3310 01c0 D6300700 		.word	471254
 3311 01c4 71A37909 		.word	158966641
 3312 01c8 4F930A40 		.word	1074434895
 3313              		.cfi_endproc
 3314              	.LFE25:
 3316              		.section	.text.print_exponential_number,"ax",%progbits
 3317              		.align	1
 3318              		.syntax unified
 3319              		.thumb
 3320              		.thumb_func
 3322              	print_exponential_number:
 3323              	.LFB26:
 856:Core/Src/printf.c **** 
 857:Core/Src/printf.c **** static void print_exponential_number(output_gadget_t* output, double number, printf_size_t precisio
 858:Core/Src/printf.c **** {
 3324              		.loc 1 858 1
 3325              		.cfi_startproc
 3326              		@ args = 8, pretend = 0, frame = 144
 3327              		@ frame_needed = 1, uses_anonymous_args = 0
 3328 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3329              	.LCFI142:
 3330              		.cfi_def_cfa_offset 36
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 74


 3331              		.cfi_offset 4, -36
 3332              		.cfi_offset 5, -32
 3333              		.cfi_offset 6, -28
 3334              		.cfi_offset 7, -24
 3335              		.cfi_offset 8, -20
 3336              		.cfi_offset 9, -16
 3337              		.cfi_offset 10, -12
 3338              		.cfi_offset 11, -8
 3339              		.cfi_offset 14, -4
 3340 0004 ADB0     		sub	sp, sp, #180
 3341              	.LCFI143:
 3342              		.cfi_def_cfa_offset 216
 3343 0006 08AF     		add	r7, sp, #32
 3344              	.LCFI144:
 3345              		.cfi_def_cfa 7, 184
 3346 0008 7862     		str	r0, [r7, #36]
 3347 000a 87ED060B 		vstr.64	d0, [r7, #24]
 3348 000e 3962     		str	r1, [r7, #32]
 3349 0010 7A61     		str	r2, [r7, #20]
 3350 0012 3B61     		str	r3, [r7, #16]
 859:Core/Src/printf.c ****   const bool negative = get_sign_bit(number);
 3351              		.loc 1 859 25
 3352 0014 97ED060B 		vldr.64	d0, [r7, #24]
 3353 0018 FFF7FEFF 		bl	get_sign_bit
 3354 001c 0346     		mov	r3, r0
 3355              		.loc 1 859 14 discriminator 1
 3356 001e 002B     		cmp	r3, #0
 3357 0020 14BF     		ite	ne
 3358 0022 0123     		movne	r3, #1
 3359 0024 0023     		moveq	r3, #0
 3360 0026 87F87E30 		strb	r3, [r7, #126]
 860:Core/Src/printf.c ****   // This number will decrease gradually (by factors of 10) as we "extract" the exponent out of it
 861:Core/Src/printf.c ****   double abs_number =  negative ? -number : number;
 3361              		.loc 1 861 43
 3362 002a 97F87E30 		ldrb	r3, [r7, #126]	@ zero_extendqisi2
 3363 002e 002B     		cmp	r3, #0
 3364 0030 04D0     		beq	.L185
 3365              		.loc 1 861 43 is_stmt 0 discriminator 1
 3366 0032 BC69     		ldr	r4, [r7, #24]
 3367 0034 FB69     		ldr	r3, [r7, #28]
 3368 0036 83F00045 		eor	r5, r3, #-2147483648
 3369 003a 01E0     		b	.L186
 3370              	.L185:
 3371              		.loc 1 861 43 discriminator 2
 3372 003c D7E90645 		ldrd	r4, [r7, #24]
 3373              	.L186:
 3374              		.loc 1 861 10 is_stmt 1 discriminator 4
 3375 0040 C7E91C45 		strd	r4, [r7, #112]
 862:Core/Src/printf.c **** 
 863:Core/Src/printf.c ****   int floored_exp10;
 864:Core/Src/printf.c ****   bool abs_exp10_covered_by_powers_table;
 865:Core/Src/printf.c ****   struct scaling_factor normalization;
 866:Core/Src/printf.c **** 
 867:Core/Src/printf.c **** 
 868:Core/Src/printf.c ****   // Determine the decimal exponent
 869:Core/Src/printf.c ****   if (abs_number == 0.0) {
 3376              		.loc 1 869 6
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 75


 3377 0044 4FF00002 		mov	r2, #0
 3378 0048 4FF00003 		mov	r3, #0
 3379 004c D7E91C01 		ldrd	r0, [r7, #112]
 3380 0050 FFF7FEFF 		bl	__aeabi_dcmpeq
 3381 0054 0346     		mov	r3, r0
 3382 0056 002B     		cmp	r3, #0
 3383 0058 03D0     		beq	.L234
 870:Core/Src/printf.c ****     // TODO: This is a special-case for 0.0 (and -0.0); but proper handling is required for denorma
 871:Core/Src/printf.c ****     floored_exp10 = 0; // ... and no need to set a normalization factor or check the powers table
 3384              		.loc 1 871 19
 3385 005a 0023     		movs	r3, #0
 3386 005c C7F88C30 		str	r3, [r7, #140]
 3387 0060 51E0     		b	.L189
 3388              	.L234:
 3389              	.LBB8:
 872:Core/Src/printf.c ****   }
 873:Core/Src/printf.c ****   else  {
 874:Core/Src/printf.c ****     double exp10 = log10_of_positive(abs_number);
 3390              		.loc 1 874 20
 3391 0062 97ED1C0B 		vldr.64	d0, [r7, #112]
 3392 0066 FFF7FEFF 		bl	log10_of_positive
 3393 006a 87ED1A0B 		vstr.64	d0, [r7, #104]
 875:Core/Src/printf.c ****     floored_exp10 = bastardized_floor(exp10);
 3394              		.loc 1 875 21
 3395 006e 97ED1A0B 		vldr.64	d0, [r7, #104]
 3396 0072 FFF7FEFF 		bl	bastardized_floor
 3397 0076 C7F88C00 		str	r0, [r7, #140]
 876:Core/Src/printf.c ****     double p10 = pow10_of_int(floored_exp10);
 3398              		.loc 1 876 18
 3399 007a D7F88C00 		ldr	r0, [r7, #140]
 3400 007e FFF7FEFF 		bl	pow10_of_int
 3401 0082 87ED200B 		vstr.64	d0, [r7, #128]
 877:Core/Src/printf.c ****     // correct for rounding errors
 878:Core/Src/printf.c ****     if (abs_number < p10) {
 3402              		.loc 1 878 8
 3403 0086 D7E92023 		ldrd	r2, [r7, #128]
 3404 008a D7E91C01 		ldrd	r0, [r7, #112]
 3405 008e FFF7FEFF 		bl	__aeabi_dcmplt
 3406 0092 0346     		mov	r3, r0
 3407 0094 002B     		cmp	r3, #0
 3408 0096 0FD0     		beq	.L190
 879:Core/Src/printf.c ****       floored_exp10--;
 3409              		.loc 1 879 20
 3410 0098 D7F88C30 		ldr	r3, [r7, #140]
 3411 009c 013B     		subs	r3, r3, #1
 3412 009e C7F88C30 		str	r3, [r7, #140]
 880:Core/Src/printf.c ****       p10 /= 10;
 3413              		.loc 1 880 11
 3414 00a2 4FF00002 		mov	r2, #0
 3415 00a6 AF4B     		ldr	r3, .L236
 3416 00a8 D7E92001 		ldrd	r0, [r7, #128]
 3417 00ac FFF7FEFF 		bl	__aeabi_ddiv
 3418 00b0 0246     		mov	r2, r0
 3419 00b2 0B46     		mov	r3, r1
 3420 00b4 C7E92023 		strd	r2, [r7, #128]
 3421              	.L190:
 881:Core/Src/printf.c ****     }
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 76


 882:Core/Src/printf.c ****     abs_exp10_covered_by_powers_table = PRINTF_ABS(floored_exp10) < PRINTF_MAX_PRECOMPUTED_POWER_OF
 3422              		.loc 1 882 67
 3423 00b8 D7F88C30 		ldr	r3, [r7, #140]
 3424 00bc 13F1110F 		cmn	r3, #17
 3425 00c0 05DB     		blt	.L192
 3426              		.loc 1 882 67 is_stmt 0 discriminator 1
 3427 00c2 D7F88C30 		ldr	r3, [r7, #140]
 3428 00c6 112B     		cmp	r3, #17
 3429 00c8 01DC     		bgt	.L192
 3430              		.loc 1 882 67 discriminator 3
 3431 00ca 0123     		movs	r3, #1
 3432              		.loc 1 882 67
 3433 00cc 00E0     		b	.L193
 3434              	.L192:
 3435              		.loc 1 882 67 discriminator 4
 3436 00ce 0023     		movs	r3, #0
 3437              	.L193:
 3438              		.loc 1 882 39 is_stmt 1 discriminator 6
 3439 00d0 87F88B30 		strb	r3, [r7, #139]
 3440 00d4 97F88B30 		ldrb	r3, [r7, #139]
 3441 00d8 03F00103 		and	r3, r3, #1
 3442 00dc 87F88B30 		strb	r3, [r7, #139]
 883:Core/Src/printf.c ****     normalization.raw_factor = abs_exp10_covered_by_powers_table ? powers_of_10[PRINTF_ABS(floored_
 3443              		.loc 1 883 108
 3444 00e0 97F88B30 		ldrb	r3, [r7, #139]	@ zero_extendqisi2
 3445 00e4 002B     		cmp	r3, #0
 3446 00e6 0AD0     		beq	.L194
 3447              		.loc 1 883 81 discriminator 1
 3448 00e8 D7F88C30 		ldr	r3, [r7, #140]
 3449 00ec 002B     		cmp	r3, #0
 3450 00ee B8BF     		it	lt
 3451 00f0 5B42     		rsblt	r3, r3, #0
 3452              		.loc 1 883 108 discriminator 1
 3453 00f2 9D4A     		ldr	r2, .L236+4
 3454 00f4 DB00     		lsls	r3, r3, #3
 3455 00f6 1344     		add	r3, r3, r2
 3456 00f8 D3E90023 		ldrd	r2, [r3]
 3457 00fc 01E0     		b	.L195
 3458              	.L194:
 3459              		.loc 1 883 108 is_stmt 0 discriminator 2
 3460 00fe D7E92023 		ldrd	r2, [r7, #128]
 3461              	.L195:
 3462              		.loc 1 883 30 is_stmt 1 discriminator 4
 3463 0102 C7E91023 		strd	r2, [r7, #64]
 3464              	.L189:
 3465              	.LBE8:
 884:Core/Src/printf.c ****   }
 885:Core/Src/printf.c **** 
 886:Core/Src/printf.c ****   // We now begin accounting for the widths of the two parts of our printed field:
 887:Core/Src/printf.c ****   // the decimal part after decimal exponent extraction, and the base-10 exponent part.
 888:Core/Src/printf.c ****   // For both of these, the value of 0 has a special meaning, but not the same one:
 889:Core/Src/printf.c ****   // a 0 exponent-part width means "don't print the exponent"; a 0 decimal-part width
 890:Core/Src/printf.c ****   // means "use as many characters as necessary".
 891:Core/Src/printf.c **** 
 892:Core/Src/printf.c ****   bool fall_back_to_decimal_only_mode = false;
 3466              		.loc 1 892 8
 3467 0106 0023     		movs	r3, #0
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 77


 3468 0108 87F87F30 		strb	r3, [r7, #127]
 893:Core/Src/printf.c ****   if (flags & FLAGS_ADAPT_EXP) {
 3469              		.loc 1 893 13
 3470 010c 3B69     		ldr	r3, [r7, #16]
 3471 010e 03F48053 		and	r3, r3, #4096
 3472              		.loc 1 893 6
 3473 0112 002B     		cmp	r3, #0
 3474 0114 30D0     		beq	.L196
 3475              	.LBB9:
 894:Core/Src/printf.c ****     int required_significant_digits = (precision == 0) ? 1 : (int) precision;
 3476              		.loc 1 894 60
 3477 0116 3B6A     		ldr	r3, [r7, #32]
 3478 0118 002B     		cmp	r3, #0
 3479 011a 01D0     		beq	.L197
 3480              		.loc 1 894 60 is_stmt 0 discriminator 1
 3481 011c 3B6A     		ldr	r3, [r7, #32]
 3482 011e 00E0     		b	.L198
 3483              	.L197:
 3484              		.loc 1 894 60 discriminator 2
 3485 0120 0123     		movs	r3, #1
 3486              	.L198:
 3487              		.loc 1 894 9 is_stmt 1 discriminator 4
 3488 0122 7B66     		str	r3, [r7, #100]
 895:Core/Src/printf.c ****     // Should we want to fall-back to "%f" mode, and only print the decimal part?
 896:Core/Src/printf.c ****     fall_back_to_decimal_only_mode = (floored_exp10 >= -4 && floored_exp10 < required_significant_d
 3489              		.loc 1 896 59
 3490 0124 D7F88C30 		ldr	r3, [r7, #140]
 3491 0128 13F1040F 		cmn	r3, #4
 3492 012c 06DB     		blt	.L199
 3493              		.loc 1 896 59 is_stmt 0 discriminator 1
 3494 012e D7F88C20 		ldr	r2, [r7, #140]
 3495 0132 7B6E     		ldr	r3, [r7, #100]
 3496 0134 9A42     		cmp	r2, r3
 3497 0136 01DA     		bge	.L199
 3498              		.loc 1 896 59 discriminator 3
 3499 0138 0123     		movs	r3, #1
 3500              		.loc 1 896 59
 3501 013a 00E0     		b	.L200
 3502              	.L199:
 3503              		.loc 1 896 59 discriminator 4
 3504 013c 0023     		movs	r3, #0
 3505              	.L200:
 3506              		.loc 1 896 36 is_stmt 1 discriminator 6
 3507 013e 87F87F30 		strb	r3, [r7, #127]
 3508 0142 97F87F30 		ldrb	r3, [r7, #127]
 3509 0146 03F00103 		and	r3, r3, #1
 3510 014a 87F87F30 		strb	r3, [r7, #127]
 897:Core/Src/printf.c ****     // Now, let's adjust the precision
 898:Core/Src/printf.c ****     // This also decided how we adjust the precision value - as in "%g" mode,
 899:Core/Src/printf.c ****     // "precision" is the number of _significant digits_, and this is when we "translate"
 900:Core/Src/printf.c ****     // the precision value to an actual number of decimal digits.
 901:Core/Src/printf.c ****     int precision_ = fall_back_to_decimal_only_mode ?
 902:Core/Src/printf.c ****                      (int) precision - 1 - floored_exp10 :
 3511              		.loc 1 902 58
 3512 014e 97F87F30 		ldrb	r3, [r7, #127]	@ zero_extendqisi2
 3513 0152 002B     		cmp	r3, #0
 3514 0154 05D0     		beq	.L201
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 78


 3515              		.loc 1 902 22 discriminator 1
 3516 0156 3B6A     		ldr	r3, [r7, #32]
 3517              		.loc 1 902 38 discriminator 1
 3518 0158 5A1E     		subs	r2, r3, #1
 3519              		.loc 1 902 58 discriminator 1
 3520 015a D7F88C30 		ldr	r3, [r7, #140]
 3521 015e D31A     		subs	r3, r2, r3
 3522 0160 01E0     		b	.L202
 3523              	.L201:
 903:Core/Src/printf.c ****         (int) precision - 1; // the presence of the exponent ensures only one significant digit com
 3524              		.loc 1 903 9
 3525 0162 3B6A     		ldr	r3, [r7, #32]
 902:Core/Src/printf.c ****         (int) precision - 1; // the presence of the exponent ensures only one significant digit com
 3526              		.loc 1 902 58 discriminator 2
 3527 0164 013B     		subs	r3, r3, #1
 3528              	.L202:
 901:Core/Src/printf.c ****                      (int) precision - 1 - floored_exp10 :
 3529              		.loc 1 901 9
 3530 0166 3B66     		str	r3, [r7, #96]
 904:Core/Src/printf.c ****     precision = (precision_ > 0 ? (unsigned) precision_ : 0U);
 3531              		.loc 1 904 57
 3532 0168 3B6E     		ldr	r3, [r7, #96]
 3533 016a 23EAE373 		bic	r3, r3, r3, asr #31
 3534              		.loc 1 904 15
 3535 016e 3B62     		str	r3, [r7, #32]
 905:Core/Src/printf.c ****     flags |= FLAGS_PRECISION;   // make sure print_broken_up_decimal respects our choice above
 3536              		.loc 1 905 11
 3537 0170 3B69     		ldr	r3, [r7, #16]
 3538 0172 43F40063 		orr	r3, r3, #2048
 3539 0176 3B61     		str	r3, [r7, #16]
 3540              	.L196:
 3541              	.LBE9:
 906:Core/Src/printf.c ****   }
 907:Core/Src/printf.c **** 
 908:Core/Src/printf.c ****   normalization.multiply = (floored_exp10 < 0 && abs_exp10_covered_by_powers_table);
 3542              		.loc 1 908 47
 3543 0178 D7F88C30 		ldr	r3, [r7, #140]
 3544 017c 002B     		cmp	r3, #0
 3545 017e 05DA     		bge	.L203
 3546              		.loc 1 908 47 is_stmt 0 discriminator 1
 3547 0180 97F88B30 		ldrb	r3, [r7, #139]	@ zero_extendqisi2
 3548 0184 002B     		cmp	r3, #0
 3549 0186 01D0     		beq	.L203
 3550              		.loc 1 908 47 discriminator 3
 3551 0188 0123     		movs	r3, #1
 3552              		.loc 1 908 47
 3553 018a 00E0     		b	.L204
 3554              	.L203:
 3555              		.loc 1 908 47 discriminator 4
 3556 018c 0023     		movs	r3, #0
 3557              	.L204:
 3558              		.loc 1 908 47 discriminator 6
 3559 018e 03F00103 		and	r3, r3, #1
 3560 0192 DBB2     		uxtb	r3, r3
 3561              		.loc 1 908 26 is_stmt 1 discriminator 6
 3562 0194 87F84830 		strb	r3, [r7, #72]
 909:Core/Src/printf.c ****   bool should_skip_normalization = (fall_back_to_decimal_only_mode || floored_exp10 == 0);
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 79


 3563              		.loc 1 909 68
 3564 0198 97F87F30 		ldrb	r3, [r7, #127]	@ zero_extendqisi2
 3565 019c 002B     		cmp	r3, #0
 3566 019e 03D1     		bne	.L205
 3567              		.loc 1 909 68 is_stmt 0 discriminator 2
 3568 01a0 D7F88C30 		ldr	r3, [r7, #140]
 3569 01a4 002B     		cmp	r3, #0
 3570 01a6 01D1     		bne	.L206
 3571              	.L205:
 3572              		.loc 1 909 68 discriminator 3
 3573 01a8 0123     		movs	r3, #1
 3574              		.loc 1 909 68
 3575 01aa 00E0     		b	.L207
 3576              	.L206:
 3577              		.loc 1 909 68 discriminator 4
 3578 01ac 0023     		movs	r3, #0
 3579              	.L207:
 3580              		.loc 1 909 8 is_stmt 1 discriminator 6
 3581 01ae 87F85F30 		strb	r3, [r7, #95]
 3582 01b2 97F85F30 		ldrb	r3, [r7, #95]
 3583 01b6 03F00103 		and	r3, r3, #1
 3584 01ba 87F85F30 		strb	r3, [r7, #95]
 910:Core/Src/printf.c ****   struct double_components decimal_part_components =
 911:Core/Src/printf.c ****     should_skip_normalization ?
 912:Core/Src/printf.c ****     get_components(negative ? -abs_number : abs_number, precision) :
 3585              		.loc 1 912 68
 3586 01be 97F85F30 		ldrb	r3, [r7, #95]	@ zero_extendqisi2
 3587 01c2 002B     		cmp	r3, #0
 3588 01c4 17D0     		beq	.L208
 3589              		.loc 1 912 5 discriminator 1
 3590 01c6 97F87E30 		ldrb	r3, [r7, #126]	@ zero_extendqisi2
 3591 01ca 002B     		cmp	r3, #0
 3592 01cc 06D0     		beq	.L209
 3593              		.loc 1 912 5 is_stmt 0 discriminator 2
 3594 01ce 3B6F     		ldr	r3, [r7, #112]
 3595 01d0 BB60     		str	r3, [r7, #8]
 3596 01d2 7B6F     		ldr	r3, [r7, #116]
 3597 01d4 83F00043 		eor	r3, r3, #-2147483648
 3598 01d8 FB60     		str	r3, [r7, #12]
 3599 01da 03E0     		b	.L210
 3600              	.L209:
 3601              		.loc 1 912 5 discriminator 3
 3602 01dc 97ED1C7B 		vldr.64	d7, [r7, #112]
 3603 01e0 87ED027B 		vstr.64	d7, [r7, #8]
 3604              	.L210:
 3605              		.loc 1 912 5 discriminator 5
 3606 01e4 07F12803 		add	r3, r7, #40
 3607 01e8 396A     		ldr	r1, [r7, #32]
 3608 01ea 97ED020B 		vldr.64	d0, [r7, #8]
 3609 01ee 1846     		mov	r0, r3
 3610 01f0 FFF7FEFF 		bl	get_components
 3611 01f4 13E0     		b	.L211
 3612              	.L208:
 913:Core/Src/printf.c ****     get_normalized_components(negative, precision, abs_number, normalization, floored_exp10);
 3613              		.loc 1 913 5 is_stmt 1
 3614 01f6 07F12805 		add	r5, r7, #40
 3615 01fa 97F87E60 		ldrb	r6, [r7, #126]	@ zero_extendqisi2
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 80


 3616 01fe D7F88C30 		ldr	r3, [r7, #140]
 3617 0202 0493     		str	r3, [sp, #16]
 3618 0204 6C46     		mov	r4, sp
 3619 0206 07F14003 		add	r3, r7, #64
 3620 020a 0FCB     		ldm	r3, {r0, r1, r2, r3}
 3621 020c 84E80F00 		stm	r4, {r0, r1, r2, r3}
 3622 0210 97ED1C0B 		vldr.64	d0, [r7, #112]
 3623 0214 3A6A     		ldr	r2, [r7, #32]
 3624 0216 3146     		mov	r1, r6
 3625 0218 2846     		mov	r0, r5
 3626 021a FFF7FEFF 		bl	get_normalized_components
 3627              	.L211:
 914:Core/Src/printf.c **** 
 915:Core/Src/printf.c ****   // Account for roll-over, e.g. rounding from 9.99 to 100.0 - which effects
 916:Core/Src/printf.c ****   // the exponent and may require additional tweaking of the parts
 917:Core/Src/printf.c ****   if (fall_back_to_decimal_only_mode) {
 3628              		.loc 1 917 6
 3629 021e 97F87F30 		ldrb	r3, [r7, #127]	@ zero_extendqisi2
 3630 0222 002B     		cmp	r3, #0
 3631 0224 25D0     		beq	.L212
 918:Core/Src/printf.c ****     if ((flags & FLAGS_ADAPT_EXP) && floored_exp10 >= -1 && decimal_part_components.integral == pow
 3632              		.loc 1 918 16
 3633 0226 3B69     		ldr	r3, [r7, #16]
 3634 0228 03F48053 		and	r3, r3, #4096
 3635              		.loc 1 918 8
 3636 022c 002B     		cmp	r3, #0
 3637 022e 37D0     		beq	.L213
 3638              		.loc 1 918 35 discriminator 1
 3639 0230 D7F88C30 		ldr	r3, [r7, #140]
 3640 0234 B3F1FF3F 		cmp	r3, #-1
 3641 0238 32DB     		blt	.L213
 3642              		.loc 1 918 84 discriminator 2
 3643 023a D7E90A23 		ldrd	r2, [r7, #40]
 3644              		.loc 1 918 94 discriminator 2
 3645 023e 1046     		mov	r0, r2
 3646 0240 1946     		mov	r1, r3
 3647 0242 FFF7FEFF 		bl	__aeabi_l2d
 3648              		.loc 1 918 124 discriminator 2
 3649 0246 D7F88C30 		ldr	r3, [r7, #140]
 3650 024a 0133     		adds	r3, r3, #1
 3651              		.loc 1 918 109 discriminator 2
 3652 024c 464A     		ldr	r2, .L236+4
 3653 024e DB00     		lsls	r3, r3, #3
 3654 0250 1344     		add	r3, r3, r2
 3655 0252 D3E90023 		ldrd	r2, [r3]
 3656              		.loc 1 918 58 discriminator 2
 3657 0256 FFF7FEFF 		bl	__aeabi_dcmpeq
 3658 025a 0346     		mov	r3, r0
 3659 025c 002B     		cmp	r3, #0
 3660 025e 1FD0     		beq	.L213
 919:Core/Src/printf.c ****       floored_exp10++; // Not strictly necessary, since floored_exp10 is no longer really used
 3661              		.loc 1 919 20
 3662 0260 D7F88C30 		ldr	r3, [r7, #140]
 3663 0264 0133     		adds	r3, r3, #1
 3664 0266 C7F88C30 		str	r3, [r7, #140]
 920:Core/Src/printf.c ****       precision--;
 3665              		.loc 1 920 16
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 81


 3666 026a 3B6A     		ldr	r3, [r7, #32]
 3667 026c 013B     		subs	r3, r3, #1
 3668 026e 3B62     		str	r3, [r7, #32]
 3669 0270 16E0     		b	.L213
 3670              	.L212:
 921:Core/Src/printf.c ****       // ... and it should already be the case that decimal_part_components.fractional == 0
 922:Core/Src/printf.c ****     }
 923:Core/Src/printf.c ****     // TODO: What about rollover strictly within the fractional part?
 924:Core/Src/printf.c ****   }
 925:Core/Src/printf.c ****   else {
 926:Core/Src/printf.c ****     if (decimal_part_components.integral >= 10) {
 3671              		.loc 1 926 32
 3672 0272 D7E90A23 		ldrd	r2, [r7, #40]
 3673              		.loc 1 926 8
 3674 0276 0A2A     		cmp	r2, #10
 3675 0278 73F10003 		sbcs	r3, r3, #0
 3676 027c 10DB     		blt	.L213
 927:Core/Src/printf.c ****       floored_exp10++;
 3677              		.loc 1 927 20
 3678 027e D7F88C30 		ldr	r3, [r7, #140]
 3679 0282 0133     		adds	r3, r3, #1
 3680 0284 C7F88C30 		str	r3, [r7, #140]
 928:Core/Src/printf.c ****       decimal_part_components.integral = 1;
 3681              		.loc 1 928 40
 3682 0288 4FF00102 		mov	r2, #1
 3683 028c 4FF00003 		mov	r3, #0
 3684 0290 C7E90A23 		strd	r2, [r7, #40]
 929:Core/Src/printf.c ****       decimal_part_components.fractional = 0;
 3685              		.loc 1 929 42
 3686 0294 4FF00002 		mov	r2, #0
 3687 0298 4FF00003 		mov	r3, #0
 3688 029c C7E90C23 		strd	r2, [r7, #48]
 3689              	.L213:
 930:Core/Src/printf.c ****     }
 931:Core/Src/printf.c ****   }
 932:Core/Src/printf.c **** 
 933:Core/Src/printf.c ****   // the floored_exp10 format is "E%+03d" and largest possible floored_exp10 value for a 64-bit dou
 934:Core/Src/printf.c ****   // is "307" (for 2^1023), so we set aside 4-5 characters overall
 935:Core/Src/printf.c ****   printf_size_t exp10_part_width = fall_back_to_decimal_only_mode ? 0U : (PRINTF_ABS(floored_exp10)
 3690              		.loc 1 935 72
 3691 02a0 97F87F30 		ldrb	r3, [r7, #127]	@ zero_extendqisi2
 3692 02a4 002B     		cmp	r3, #0
 3693 02a6 01D0     		beq	.L215
 3694              		.loc 1 935 72 is_stmt 0 discriminator 1
 3695 02a8 0023     		movs	r3, #0
 3696 02aa 0BE0     		b	.L216
 3697              	.L215:
 3698              		.loc 1 935 113 is_stmt 1 discriminator 2
 3699 02ac D7F88C30 		ldr	r3, [r7, #140]
 3700 02b0 13F1630F 		cmn	r3, #99
 3701 02b4 05DB     		blt	.L217
 3702              		.loc 1 935 101 discriminator 4
 3703 02b6 D7F88C30 		ldr	r3, [r7, #140]
 3704 02ba 632B     		cmp	r3, #99
 3705 02bc 01DC     		bgt	.L217
 3706              		.loc 1 935 113 discriminator 6
 3707 02be 0423     		movs	r3, #4
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 82


 3708              		.loc 1 935 113 is_stmt 0
 3709 02c0 00E0     		b	.L216
 3710              	.L217:
 3711              		.loc 1 935 113 discriminator 7
 3712 02c2 0523     		movs	r3, #5
 3713              	.L216:
 3714              		.loc 1 935 17 is_stmt 1 discriminator 10
 3715 02c4 BB65     		str	r3, [r7, #88]
 936:Core/Src/printf.c **** 
 937:Core/Src/printf.c ****   printf_size_t decimal_part_width =
 938:Core/Src/printf.c ****     ((flags & FLAGS_LEFT) && exp10_part_width) ?
 3716              		.loc 1 938 13
 3717 02c6 3B69     		ldr	r3, [r7, #16]
 3718 02c8 03F00203 		and	r3, r3, #2
 939:Core/Src/printf.c ****       // We're padding on the right, so the width constraint is the exponent part's
 940:Core/Src/printf.c ****       // problem, not the decimal part's, so we'll use as many characters as we need:
 941:Core/Src/printf.c ****       0U :
 3719              		.loc 1 941 10
 3720 02cc 002B     		cmp	r3, #0
 3721 02ce 02D0     		beq	.L219
 938:Core/Src/printf.c ****       // We're padding on the right, so the width constraint is the exponent part's
 3722              		.loc 1 938 27
 3723 02d0 BB6D     		ldr	r3, [r7, #88]
 3724 02d2 002B     		cmp	r3, #0
 3725 02d4 09D1     		bne	.L220
 3726              	.L219:
 942:Core/Src/printf.c ****       // We're padding on the left; so the width constraint is the decimal part's
 943:Core/Src/printf.c ****       // problem. Well, can both the decimal part and the exponent part fit within our overall widt
 944:Core/Src/printf.c ****       ((width > exp10_part_width) ?
 945:Core/Src/printf.c ****         // Yes, so we limit our decimal part's width.
 946:Core/Src/printf.c ****         // (Note this is trivially valid even if we've fallen back to "%f" mode)
 947:Core/Src/printf.c ****         width - exp10_part_width :
 3727              		.loc 1 947 34
 3728 02d6 7A69     		ldr	r2, [r7, #20]
 3729 02d8 BB6D     		ldr	r3, [r7, #88]
 3730 02da 9A42     		cmp	r2, r3
 3731 02dc 03D9     		bls	.L221
 3732              		.loc 1 947 34 is_stmt 0 discriminator 1
 3733 02de 7A69     		ldr	r2, [r7, #20]
 3734 02e0 BB6D     		ldr	r3, [r7, #88]
 3735 02e2 D31A     		subs	r3, r2, r3
 941:Core/Src/printf.c ****       // We're padding on the left; so the width constraint is the decimal part's
 3736              		.loc 1 941 10 is_stmt 1
 3737 02e4 02E0     		b	.L223
 3738              	.L221:
 3739              		.loc 1 947 34 discriminator 2
 3740 02e6 0023     		movs	r3, #0
 941:Core/Src/printf.c ****       // We're padding on the left; so the width constraint is the decimal part's
 3741              		.loc 1 941 10
 3742 02e8 00E0     		b	.L223
 3743              	.L220:
 3744 02ea 0023     		movs	r3, #0
 3745              	.L223:
 937:Core/Src/printf.c ****     ((flags & FLAGS_LEFT) && exp10_part_width) ?
 3746              		.loc 1 937 17
 3747 02ec 7B65     		str	r3, [r7, #84]
 948:Core/Src/printf.c ****         // No; we just give up on any restriction on the decimal part and use as many
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 83


 949:Core/Src/printf.c ****         // characters as we need
 950:Core/Src/printf.c ****         0U);
 951:Core/Src/printf.c **** 
 952:Core/Src/printf.c ****   const printf_size_t printed_exponential_start_pos = output->pos;
 3748              		.loc 1 952 23
 3749 02ee 7B6A     		ldr	r3, [r7, #36]
 3750 02f0 DB68     		ldr	r3, [r3, #12]
 3751 02f2 3B65     		str	r3, [r7, #80]
 953:Core/Src/printf.c ****   print_broken_up_decimal(decimal_part_components, output, precision, decimal_part_width, flags, bu
 3752              		.loc 1 953 3
 3753 02f4 D7F8BC30 		ldr	r3, [r7, #188]
 3754 02f8 0793     		str	r3, [sp, #28]
 3755 02fa D7F8B830 		ldr	r3, [r7, #184]
 3756 02fe 0693     		str	r3, [sp, #24]
 3757 0300 3B69     		ldr	r3, [r7, #16]
 3758 0302 0593     		str	r3, [sp, #20]
 3759 0304 7B6D     		ldr	r3, [r7, #84]
 3760 0306 0493     		str	r3, [sp, #16]
 3761 0308 3B6A     		ldr	r3, [r7, #32]
 3762 030a 0393     		str	r3, [sp, #12]
 3763 030c 7B6A     		ldr	r3, [r7, #36]
 3764 030e 0293     		str	r3, [sp, #8]
 3765 0310 6A46     		mov	r2, sp
 3766 0312 07F13803 		add	r3, r7, #56
 3767 0316 93E80300 		ldm	r3, {r0, r1}
 3768 031a 82E80300 		stm	r2, {r0, r1}
 3769 031e 07F12803 		add	r3, r7, #40
 3770 0322 0FCB     		ldm	r3, {r0, r1, r2, r3}
 3771 0324 FFF7FEFF 		bl	print_broken_up_decimal
 954:Core/Src/printf.c **** 
 955:Core/Src/printf.c ****   if (! fall_back_to_decimal_only_mode) {
 3772              		.loc 1 955 7
 3773 0328 97F87F30 		ldrb	r3, [r7, #127]
 3774 032c 83F00103 		eor	r3, r3, #1
 3775 0330 DBB2     		uxtb	r3, r3
 3776              		.loc 1 955 6
 3777 0332 002B     		cmp	r3, #0
 3778 0334 4AD0     		beq	.L235
 956:Core/Src/printf.c ****     putchar_via_gadget(output, (flags & FLAGS_UPPERCASE) ? 'E' : 'e');
 3779              		.loc 1 956 39
 3780 0336 3B69     		ldr	r3, [r7, #16]
 3781 0338 03F02003 		and	r3, r3, #32
 3782              		.loc 1 956 5
 3783 033c 002B     		cmp	r3, #0
 3784 033e 01D0     		beq	.L225
 3785              		.loc 1 956 5 is_stmt 0 discriminator 1
 3786 0340 4523     		movs	r3, #69
 3787 0342 00E0     		b	.L226
 3788              	.L225:
 3789              		.loc 1 956 5 discriminator 2
 3790 0344 6523     		movs	r3, #101
 3791              	.L226:
 3792              		.loc 1 956 5 discriminator 4
 3793 0346 1946     		mov	r1, r3
 3794 0348 786A     		ldr	r0, [r7, #36]
 3795 034a FFF7FEFF 		bl	putchar_via_gadget
 957:Core/Src/printf.c ****     print_integer(output,
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 84


 3796              		.loc 1 957 5 is_stmt 1
 3797 034e D7F88C30 		ldr	r3, [r7, #140]
 3798 0352 002B     		cmp	r3, #0
 3799 0354 0ADD     		ble	.L227
 3800              		.loc 1 957 5 is_stmt 0 discriminator 1
 3801 0356 D7F88C30 		ldr	r3, [r7, #140]
 3802 035a DA17     		asrs	r2, r3, #31
 3803 035c 3B60     		str	r3, [r7]
 3804 035e 7A60     		str	r2, [r7, #4]
 3805 0360 10E0     		b	.L228
 3806              	.L237:
 3807 0362 00BF     		.align	2
 3808              	.L236:
 3809 0364 00002440 		.word	1076101120
 3810 0368 00000000 		.word	powers_of_10
 3811              	.L227:
 958:Core/Src/printf.c ****                   ABS_FOR_PRINTING(floored_exp10),
 3812              		.loc 1 958 19 is_stmt 1
 3813 036c D7F88C30 		ldr	r3, [r7, #140]
 3814 0370 DA17     		asrs	r2, r3, #31
 3815 0372 9846     		mov	r8, r3
 3816 0374 9146     		mov	r9, r2
 3817 0376 0023     		movs	r3, #0
 3818 0378 D8F1000A 		rsbs	r10, r8, #0
 3819 037c 63EB090B 		sbc	fp, r3, r9
 957:Core/Src/printf.c ****     print_integer(output,
 3820              		.loc 1 957 5 discriminator 2
 3821 0380 C7E900AB 		strd	r10, [r7]
 3822              	.L228:
 957:Core/Src/printf.c ****     print_integer(output,
 3823              		.loc 1 957 5 is_stmt 0 discriminator 4
 3824 0384 D7F88C30 		ldr	r3, [r7, #140]
 3825 0388 DB0F     		lsrs	r3, r3, #31
 3826 038a DBB2     		uxtb	r3, r3
 3827 038c BA6D     		ldr	r2, [r7, #88]
 3828 038e 013A     		subs	r2, r2, #1
 3829 0390 0521     		movs	r1, #5
 3830 0392 0491     		str	r1, [sp, #16]
 3831 0394 0392     		str	r2, [sp, #12]
 3832 0396 0022     		movs	r2, #0
 3833 0398 0292     		str	r2, [sp, #8]
 3834 039a 0A22     		movs	r2, #10
 3835 039c 0192     		str	r2, [sp, #4]
 3836 039e 0093     		str	r3, [sp]
 3837 03a0 D7E90023 		ldrd	r2, [r7]
 3838 03a4 786A     		ldr	r0, [r7, #36]
 3839 03a6 FFF7FEFF 		bl	print_integer
 959:Core/Src/printf.c ****                   floored_exp10 < 0, 10, 0, exp10_part_width - 1,
 960:Core/Src/printf.c ****                 FLAGS_ZEROPAD | FLAGS_PLUS);
 961:Core/Src/printf.c ****     if (flags & FLAGS_LEFT) {
 3840              		.loc 1 961 15 is_stmt 1
 3841 03aa 3B69     		ldr	r3, [r7, #16]
 3842 03ac 03F00203 		and	r3, r3, #2
 3843              		.loc 1 961 8
 3844 03b0 002B     		cmp	r3, #0
 3845 03b2 0BD0     		beq	.L235
 962:Core/Src/printf.c ****       // We need to right-pad with spaces to meet the width requirement
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 85


 963:Core/Src/printf.c ****       while (output->pos - printed_exponential_start_pos < width) {
 3846              		.loc 1 963 13
 3847 03b4 03E0     		b	.L229
 3848              	.L230:
 964:Core/Src/printf.c ****         putchar_via_gadget(output, ' ');
 3849              		.loc 1 964 9
 3850 03b6 2021     		movs	r1, #32
 3851 03b8 786A     		ldr	r0, [r7, #36]
 3852 03ba FFF7FEFF 		bl	putchar_via_gadget
 3853              	.L229:
 963:Core/Src/printf.c ****         putchar_via_gadget(output, ' ');
 3854              		.loc 1 963 20
 3855 03be 7B6A     		ldr	r3, [r7, #36]
 3856 03c0 DA68     		ldr	r2, [r3, #12]
 963:Core/Src/printf.c ****         putchar_via_gadget(output, ' ');
 3857              		.loc 1 963 26
 3858 03c2 3B6D     		ldr	r3, [r7, #80]
 3859 03c4 D31A     		subs	r3, r2, r3
 963:Core/Src/printf.c ****         putchar_via_gadget(output, ' ');
 3860              		.loc 1 963 58
 3861 03c6 7A69     		ldr	r2, [r7, #20]
 3862 03c8 9A42     		cmp	r2, r3
 3863 03ca F4D8     		bhi	.L230
 3864              	.L235:
 965:Core/Src/printf.c ****       }
 966:Core/Src/printf.c ****     }
 967:Core/Src/printf.c ****   }
 968:Core/Src/printf.c **** }
 3865              		.loc 1 968 1
 3866 03cc 00BF     		nop
 3867 03ce 9437     		adds	r7, r7, #148
 3868              	.LCFI145:
 3869              		.cfi_def_cfa_offset 36
 3870 03d0 BD46     		mov	sp, r7
 3871              	.LCFI146:
 3872              		.cfi_def_cfa_register 13
 3873              		@ sp needed
 3874 03d2 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3875              		.cfi_endproc
 3876              	.LFE26:
 3878 03d6 00BF     		.section	.rodata
 3879              		.align	2
 3880              	.LC0:
 3881 0000 6E616E00 		.ascii	"nan\000"
 3882              		.align	2
 3883              	.LC1:
 3884 0004 666E692D 		.ascii	"fni-\000"
 3884      00
 3885 0009 000000   		.align	2
 3886              	.LC2:
 3887 000c 666E692B 		.ascii	"fni+\000"
 3887      00
 3888 0011 000000   		.align	2
 3889              	.LC3:
 3890 0014 666E6900 		.ascii	"fni\000"
 3891              		.section	.text.print_floating_point,"ax",%progbits
 3892              		.align	1
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 86


 3893              		.syntax unified
 3894              		.thumb
 3895              		.thumb_func
 3897              	print_floating_point:
 3898              	.LFB27:
 969:Core/Src/printf.c **** #endif  // PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS
 970:Core/Src/printf.c **** 
 971:Core/Src/printf.c **** static void print_floating_point(output_gadget_t* output, double value, printf_size_t precision, pr
 972:Core/Src/printf.c **** {
 3899              		.loc 1 972 1
 3900              		.cfi_startproc
 3901              		@ args = 4, pretend = 0, frame = 64
 3902              		@ frame_needed = 1, uses_anonymous_args = 0
 3903 0000 80B5     		push	{r7, lr}
 3904              	.LCFI147:
 3905              		.cfi_def_cfa_offset 8
 3906              		.cfi_offset 7, -8
 3907              		.cfi_offset 14, -4
 3908 0002 92B0     		sub	sp, sp, #72
 3909              	.LCFI148:
 3910              		.cfi_def_cfa_offset 80
 3911 0004 02AF     		add	r7, sp, #8
 3912              	.LCFI149:
 3913              		.cfi_def_cfa 7, 72
 3914 0006 7861     		str	r0, [r7, #20]
 3915 0008 87ED020B 		vstr.64	d0, [r7, #8]
 3916 000c 3961     		str	r1, [r7, #16]
 3917 000e 7A60     		str	r2, [r7, #4]
 3918 0010 3B60     		str	r3, [r7]
 973:Core/Src/printf.c ****   char buf[PRINTF_DECIMAL_BUFFER_SIZE];
 974:Core/Src/printf.c ****   printf_size_t len = 0U;
 3919              		.loc 1 974 17
 3920 0012 0023     		movs	r3, #0
 3921 0014 FB63     		str	r3, [r7, #60]
 975:Core/Src/printf.c **** 
 976:Core/Src/printf.c ****   // test for special values
 977:Core/Src/printf.c ****   if (value != value) {
 3922              		.loc 1 977 6
 3923 0016 D7E90223 		ldrd	r2, [r7, #8]
 3924 001a D7E90201 		ldrd	r0, [r7, #8]
 3925 001e FFF7FEFF 		bl	__aeabi_dcmpeq
 3926 0022 0346     		mov	r3, r0
 3927 0024 002B     		cmp	r3, #0
 3928 0026 08D1     		bne	.L263
 978:Core/Src/printf.c ****     out_rev_(output, "nan", 3, width, flags);
 3929              		.loc 1 978 5
 3930 0028 3B68     		ldr	r3, [r7]
 3931 002a 0093     		str	r3, [sp]
 3932 002c 7B68     		ldr	r3, [r7, #4]
 3933 002e 0322     		movs	r2, #3
 3934 0030 5349     		ldr	r1, .L266+16
 3935 0032 7869     		ldr	r0, [r7, #20]
 3936 0034 FFF7FEFF 		bl	out_rev_
 979:Core/Src/printf.c ****     return;
 3937              		.loc 1 979 5
 3938 0038 95E0     		b	.L238
 3939              	.L263:
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 87


 980:Core/Src/printf.c ****   }
 981:Core/Src/printf.c ****   if (value < -DBL_MAX) {
 3940              		.loc 1 981 6
 3941 003a 4FF0FF32 		mov	r2, #-1
 3942 003e 6FF48013 		mvn	r3, #1048576
 3943 0042 D7E90201 		ldrd	r0, [r7, #8]
 3944 0046 FFF7FEFF 		bl	__aeabi_dcmplt
 3945 004a 0346     		mov	r3, r0
 3946 004c 002B     		cmp	r3, #0
 3947 004e 08D0     		beq	.L264
 982:Core/Src/printf.c ****     out_rev_(output, "fni-", 4, width, flags);
 3948              		.loc 1 982 5
 3949 0050 3B68     		ldr	r3, [r7]
 3950 0052 0093     		str	r3, [sp]
 3951 0054 7B68     		ldr	r3, [r7, #4]
 3952 0056 0422     		movs	r2, #4
 3953 0058 4A49     		ldr	r1, .L266+20
 3954 005a 7869     		ldr	r0, [r7, #20]
 3955 005c FFF7FEFF 		bl	out_rev_
 983:Core/Src/printf.c ****     return;
 3956              		.loc 1 983 5
 3957 0060 81E0     		b	.L238
 3958              	.L264:
 984:Core/Src/printf.c ****   }
 985:Core/Src/printf.c ****   if (value > DBL_MAX) {
 3959              		.loc 1 985 6
 3960 0062 4FF0FF32 		mov	r2, #-1
 3961 0066 484B     		ldr	r3, .L266+24
 3962 0068 D7E90201 		ldrd	r0, [r7, #8]
 3963 006c FFF7FEFF 		bl	__aeabi_dcmpgt
 3964 0070 0346     		mov	r3, r0
 3965 0072 002B     		cmp	r3, #0
 3966 0074 16D0     		beq	.L265
 986:Core/Src/printf.c ****     out_rev_(output, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, 
 3967              		.loc 1 986 29
 3968 0076 3B68     		ldr	r3, [r7]
 3969 0078 03F00403 		and	r3, r3, #4
 3970              		.loc 1 986 5
 3971 007c 002B     		cmp	r3, #0
 3972 007e 01D0     		beq	.L246
 3973              		.loc 1 986 5 is_stmt 0 discriminator 1
 3974 0080 4249     		ldr	r1, .L266+28
 3975 0082 00E0     		b	.L247
 3976              	.L246:
 3977              		.loc 1 986 5 discriminator 2
 3978 0084 4249     		ldr	r1, .L266+32
 3979              	.L247:
 3980              		.loc 1 986 68 is_stmt 1 discriminator 4
 3981 0086 3B68     		ldr	r3, [r7]
 3982 0088 03F00403 		and	r3, r3, #4
 3983              		.loc 1 986 5 discriminator 4
 3984 008c 002B     		cmp	r3, #0
 3985 008e 01D0     		beq	.L248
 3986              		.loc 1 986 5 is_stmt 0 discriminator 5
 3987 0090 0422     		movs	r2, #4
 3988 0092 00E0     		b	.L249
 3989              	.L248:
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 88


 3990              		.loc 1 986 5 discriminator 6
 3991 0094 0322     		movs	r2, #3
 3992              	.L249:
 3993              		.loc 1 986 5 discriminator 8
 3994 0096 3B68     		ldr	r3, [r7]
 3995 0098 0093     		str	r3, [sp]
 3996 009a 7B68     		ldr	r3, [r7, #4]
 3997 009c 7869     		ldr	r0, [r7, #20]
 3998 009e FFF7FEFF 		bl	out_rev_
 987:Core/Src/printf.c ****     return;
 3999              		.loc 1 987 5 is_stmt 1
 4000 00a2 60E0     		b	.L238
 4001              	.L265:
 988:Core/Src/printf.c ****   }
 989:Core/Src/printf.c **** 
 990:Core/Src/printf.c ****   if (!prefer_exponential &&
 4002              		.loc 1 990 7
 4003 00a4 97F84830 		ldrb	r3, [r7, #72]
 4004 00a8 83F00103 		eor	r3, r3, #1
 4005 00ac DBB2     		uxtb	r3, r3
 4006              		.loc 1 990 6
 4007 00ae 002B     		cmp	r3, #0
 4008 00b0 21D0     		beq	.L250
 4009              		.loc 1 990 27 discriminator 1
 4010 00b2 2FA3     		adr	r3, .L266
 4011 00b4 D3E90023 		ldrd	r2, [r3]
 4012 00b8 D7E90201 		ldrd	r0, [r7, #8]
 4013 00bc FFF7FEFF 		bl	__aeabi_dcmpgt
 4014 00c0 0346     		mov	r3, r0
 4015 00c2 002B     		cmp	r3, #0
 4016 00c4 09D1     		bne	.L251
 991:Core/Src/printf.c ****       ((value > PRINTF_FLOAT_NOTATION_THRESHOLD) || (value < -PRINTF_FLOAT_NOTATION_THRESHOLD))) {
 4017              		.loc 1 991 50
 4018 00c6 2CA3     		adr	r3, .L266+8
 4019 00c8 D3E90023 		ldrd	r2, [r3]
 4020 00cc D7E90201 		ldrd	r0, [r7, #8]
 4021 00d0 FFF7FEFF 		bl	__aeabi_dcmplt
 4022 00d4 0346     		mov	r3, r0
 4023 00d6 002B     		cmp	r3, #0
 4024 00d8 0DD0     		beq	.L250
 4025              	.L251:
 992:Core/Src/printf.c ****     // The required behavior of standard printf is to print _every_ integral-part digit -- which co
 993:Core/Src/printf.c ****     // printing hundreds of characters, overflowing any fixed internal buffer and necessitating a m
 994:Core/Src/printf.c ****     // implementation.
 995:Core/Src/printf.c **** #if PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS
 996:Core/Src/printf.c ****     print_exponential_number(output, value, precision, width, flags, buf, len);
 4026              		.loc 1 996 5
 4027 00da FB6B     		ldr	r3, [r7, #60]
 4028 00dc 0193     		str	r3, [sp, #4]
 4029 00de 07F11C03 		add	r3, r7, #28
 4030 00e2 0093     		str	r3, [sp]
 4031 00e4 3B68     		ldr	r3, [r7]
 4032 00e6 7A68     		ldr	r2, [r7, #4]
 4033 00e8 3969     		ldr	r1, [r7, #16]
 4034 00ea 97ED020B 		vldr.64	d0, [r7, #8]
 4035 00ee 7869     		ldr	r0, [r7, #20]
 4036 00f0 FFF7FEFF 		bl	print_exponential_number
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 89


 997:Core/Src/printf.c **** #endif
 998:Core/Src/printf.c ****     return;
 4037              		.loc 1 998 5
 4038 00f4 37E0     		b	.L238
 4039              	.L250:
 999:Core/Src/printf.c ****   }
1000:Core/Src/printf.c **** 
1001:Core/Src/printf.c ****   // set default precision, if not set explicitly
1002:Core/Src/printf.c ****   if (!(flags & FLAGS_PRECISION)) {
 4040              		.loc 1 1002 15
 4041 00f6 3B68     		ldr	r3, [r7]
 4042 00f8 03F40063 		and	r3, r3, #2048
 4043              		.loc 1 1002 6
 4044 00fc 002B     		cmp	r3, #0
 4045 00fe 0DD1     		bne	.L254
1003:Core/Src/printf.c ****     precision = PRINTF_DEFAULT_FLOAT_PRECISION;
 4046              		.loc 1 1003 15
 4047 0100 0623     		movs	r3, #6
 4048 0102 3B61     		str	r3, [r7, #16]
1004:Core/Src/printf.c ****   }
1005:Core/Src/printf.c **** 
1006:Core/Src/printf.c ****   // limit precision so that our integer holding the fractional part does not overflow
1007:Core/Src/printf.c ****   while ((len < PRINTF_DECIMAL_BUFFER_SIZE) && (precision > PRINTF_MAX_SUPPORTED_PRECISION)) {
 4049              		.loc 1 1007 9
 4050 0104 0AE0     		b	.L254
 4051              	.L256:
1008:Core/Src/printf.c ****     buf[len++] = '0'; // This respects the precision in terms of result length only
 4052              		.loc 1 1008 12
 4053 0106 FB6B     		ldr	r3, [r7, #60]
 4054 0108 5A1C     		adds	r2, r3, #1
 4055 010a FA63     		str	r2, [r7, #60]
 4056              		.loc 1 1008 16
 4057 010c 4033     		adds	r3, r3, #64
 4058 010e 3B44     		add	r3, r3, r7
 4059 0110 3022     		movs	r2, #48
 4060 0112 03F8242C 		strb	r2, [r3, #-36]
1009:Core/Src/printf.c ****     precision--;
 4061              		.loc 1 1009 14
 4062 0116 3B69     		ldr	r3, [r7, #16]
 4063 0118 013B     		subs	r3, r3, #1
 4064 011a 3B61     		str	r3, [r7, #16]
 4065              	.L254:
1007:Core/Src/printf.c ****     buf[len++] = '0'; // This respects the precision in terms of result length only
 4066              		.loc 1 1007 45
 4067 011c FB6B     		ldr	r3, [r7, #60]
 4068 011e 1F2B     		cmp	r3, #31
 4069 0120 02D8     		bhi	.L255
1007:Core/Src/printf.c ****     buf[len++] = '0'; // This respects the precision in terms of result length only
 4070              		.loc 1 1007 45 is_stmt 0 discriminator 1
 4071 0122 3B69     		ldr	r3, [r7, #16]
 4072 0124 112B     		cmp	r3, #17
 4073 0126 EED8     		bhi	.L256
 4074              	.L255:
1010:Core/Src/printf.c ****   }
1011:Core/Src/printf.c **** 
1012:Core/Src/printf.c **** #if PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS
1013:Core/Src/printf.c ****   if (prefer_exponential)
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 90


 4075              		.loc 1 1013 6 is_stmt 1
 4076 0128 97F84830 		ldrb	r3, [r7, #72]	@ zero_extendqisi2
 4077 012c 002B     		cmp	r3, #0
 4078 012e 0DD0     		beq	.L257
1014:Core/Src/printf.c ****     print_exponential_number(output, value, precision, width, flags, buf, len);
 4079              		.loc 1 1014 5
 4080 0130 FB6B     		ldr	r3, [r7, #60]
 4081 0132 0193     		str	r3, [sp, #4]
 4082 0134 07F11C03 		add	r3, r7, #28
 4083 0138 0093     		str	r3, [sp]
 4084 013a 3B68     		ldr	r3, [r7]
 4085 013c 7A68     		ldr	r2, [r7, #4]
 4086 013e 3969     		ldr	r1, [r7, #16]
 4087 0140 97ED020B 		vldr.64	d0, [r7, #8]
 4088 0144 7869     		ldr	r0, [r7, #20]
 4089 0146 FFF7FEFF 		bl	print_exponential_number
 4090 014a 0CE0     		b	.L238
 4091              	.L257:
1015:Core/Src/printf.c ****   else
1016:Core/Src/printf.c **** #endif
1017:Core/Src/printf.c ****     print_decimal_number(output, value, precision, width, flags, buf, len);
 4092              		.loc 1 1017 5
 4093 014c FB6B     		ldr	r3, [r7, #60]
 4094 014e 0193     		str	r3, [sp, #4]
 4095 0150 07F11C03 		add	r3, r7, #28
 4096 0154 0093     		str	r3, [sp]
 4097 0156 3B68     		ldr	r3, [r7]
 4098 0158 7A68     		ldr	r2, [r7, #4]
 4099 015a 3969     		ldr	r1, [r7, #16]
 4100 015c 97ED020B 		vldr.64	d0, [r7, #8]
 4101 0160 7869     		ldr	r0, [r7, #20]
 4102 0162 FFF7FEFF 		bl	print_decimal_number
 4103              	.L238:
1018:Core/Src/printf.c **** }
 4104              		.loc 1 1018 1
 4105 0166 4037     		adds	r7, r7, #64
 4106              	.LCFI150:
 4107              		.cfi_def_cfa_offset 8
 4108 0168 BD46     		mov	sp, r7
 4109              	.LCFI151:
 4110              		.cfi_def_cfa_register 13
 4111              		@ sp needed
 4112 016a 80BD     		pop	{r7, pc}
 4113              	.L267:
 4114 016c AFF30080 		.align	3
 4115              	.L266:
 4116 0170 00000000 		.word	0
 4117 0174 65CDCD41 		.word	1104006501
 4118 0178 00000000 		.word	0
 4119 017c 65CDCDC1 		.word	-1043477147
 4120 0180 00000000 		.word	.LC0
 4121 0184 04000000 		.word	.LC1
 4122 0188 FFFFEF7F 		.word	2146435071
 4123 018c 0C000000 		.word	.LC2
 4124 0190 14000000 		.word	.LC3
 4125              		.cfi_endproc
 4126              	.LFE27:
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 91


 4128              		.section	.text.parse_flags,"ax",%progbits
 4129              		.align	1
 4130              		.syntax unified
 4131              		.thumb
 4132              		.thumb_func
 4134              	parse_flags:
 4135              	.LFB28:
1019:Core/Src/printf.c **** 
1020:Core/Src/printf.c **** #endif  // (PRINTF_SUPPORT_DECIMAL_SPECIFIERS || PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS)
1021:Core/Src/printf.c **** 
1022:Core/Src/printf.c **** // Advances the format pointer past the flags, and returns the parsed flags
1023:Core/Src/printf.c **** // due to the characters passed
1024:Core/Src/printf.c **** static printf_flags_t parse_flags(const char** format)
1025:Core/Src/printf.c **** {
 4136              		.loc 1 1025 1
 4137              		.cfi_startproc
 4138              		@ args = 0, pretend = 0, frame = 16
 4139              		@ frame_needed = 1, uses_anonymous_args = 0
 4140              		@ link register save eliminated.
 4141 0000 80B4     		push	{r7}
 4142              	.LCFI152:
 4143              		.cfi_def_cfa_offset 4
 4144              		.cfi_offset 7, -4
 4145 0002 85B0     		sub	sp, sp, #20
 4146              	.LCFI153:
 4147              		.cfi_def_cfa_offset 24
 4148 0004 00AF     		add	r7, sp, #0
 4149              	.LCFI154:
 4150              		.cfi_def_cfa_register 7
 4151 0006 7860     		str	r0, [r7, #4]
1026:Core/Src/printf.c ****   printf_flags_t flags = 0U;
 4152              		.loc 1 1026 18
 4153 0008 0023     		movs	r3, #0
 4154 000a FB60     		str	r3, [r7, #12]
 4155              	.L278:
1027:Core/Src/printf.c ****   do {
1028:Core/Src/printf.c ****     switch (**format) {
 4156              		.loc 1 1028 14
 4157 000c 7B68     		ldr	r3, [r7, #4]
 4158 000e 1B68     		ldr	r3, [r3]
 4159              		.loc 1 1028 13
 4160 0010 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4161              		.loc 1 1028 5
 4162 0012 203B     		subs	r3, r3, #32
 4163 0014 102B     		cmp	r3, #16
 4164 0016 57D8     		bhi	.L269
 4165 0018 01A2     		adr	r2, .L271
 4166 001a 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 4167 001e 00BF     		.p2align 2
 4168              	.L271:
 4169 0020 A1000000 		.word	.L275+1
 4170 0024 C9000000 		.word	.L269+1
 4171 0028 C9000000 		.word	.L269+1
 4172 002c B5000000 		.word	.L274+1
 4173 0030 C9000000 		.word	.L269+1
 4174 0034 C9000000 		.word	.L269+1
 4175 0038 C9000000 		.word	.L269+1
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 92


 4176 003c C9000000 		.word	.L269+1
 4177 0040 C9000000 		.word	.L269+1
 4178 0044 C9000000 		.word	.L269+1
 4179 0048 C9000000 		.word	.L269+1
 4180 004c 8D000000 		.word	.L273+1
 4181 0050 C9000000 		.word	.L269+1
 4182 0054 79000000 		.word	.L272+1
 4183 0058 C9000000 		.word	.L269+1
 4184 005c C9000000 		.word	.L269+1
 4185 0060 65000000 		.word	.L270+1
 4186              		.p2align 1
 4187              	.L270:
1029:Core/Src/printf.c ****       case '0': flags |= FLAGS_ZEROPAD; (*format)++; break;
 4188              		.loc 1 1029 23
 4189 0064 FB68     		ldr	r3, [r7, #12]
 4190 0066 43F00103 		orr	r3, r3, #1
 4191 006a FB60     		str	r3, [r7, #12]
 4192              		.loc 1 1029 42
 4193 006c 7B68     		ldr	r3, [r7, #4]
 4194 006e 1B68     		ldr	r3, [r3]
 4195              		.loc 1 1029 50
 4196 0070 5A1C     		adds	r2, r3, #1
 4197 0072 7B68     		ldr	r3, [r7, #4]
 4198 0074 1A60     		str	r2, [r3]
 4199              		.loc 1 1029 54
 4200 0076 29E0     		b	.L276
 4201              	.L272:
1030:Core/Src/printf.c ****       case '-': flags |= FLAGS_LEFT;    (*format)++; break;
 4202              		.loc 1 1030 23
 4203 0078 FB68     		ldr	r3, [r7, #12]
 4204 007a 43F00203 		orr	r3, r3, #2
 4205 007e FB60     		str	r3, [r7, #12]
 4206              		.loc 1 1030 42
 4207 0080 7B68     		ldr	r3, [r7, #4]
 4208 0082 1B68     		ldr	r3, [r3]
 4209              		.loc 1 1030 50
 4210 0084 5A1C     		adds	r2, r3, #1
 4211 0086 7B68     		ldr	r3, [r7, #4]
 4212 0088 1A60     		str	r2, [r3]
 4213              		.loc 1 1030 54
 4214 008a 1FE0     		b	.L276
 4215              	.L273:
1031:Core/Src/printf.c ****       case '+': flags |= FLAGS_PLUS;    (*format)++; break;
 4216              		.loc 1 1031 23
 4217 008c FB68     		ldr	r3, [r7, #12]
 4218 008e 43F00403 		orr	r3, r3, #4
 4219 0092 FB60     		str	r3, [r7, #12]
 4220              		.loc 1 1031 42
 4221 0094 7B68     		ldr	r3, [r7, #4]
 4222 0096 1B68     		ldr	r3, [r3]
 4223              		.loc 1 1031 50
 4224 0098 5A1C     		adds	r2, r3, #1
 4225 009a 7B68     		ldr	r3, [r7, #4]
 4226 009c 1A60     		str	r2, [r3]
 4227              		.loc 1 1031 54
 4228 009e 15E0     		b	.L276
 4229              	.L275:
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 93


1032:Core/Src/printf.c ****       case ' ': flags |= FLAGS_SPACE;   (*format)++; break;
 4230              		.loc 1 1032 23
 4231 00a0 FB68     		ldr	r3, [r7, #12]
 4232 00a2 43F00803 		orr	r3, r3, #8
 4233 00a6 FB60     		str	r3, [r7, #12]
 4234              		.loc 1 1032 42
 4235 00a8 7B68     		ldr	r3, [r7, #4]
 4236 00aa 1B68     		ldr	r3, [r3]
 4237              		.loc 1 1032 50
 4238 00ac 5A1C     		adds	r2, r3, #1
 4239 00ae 7B68     		ldr	r3, [r7, #4]
 4240 00b0 1A60     		str	r2, [r3]
 4241              		.loc 1 1032 54
 4242 00b2 0BE0     		b	.L276
 4243              	.L274:
1033:Core/Src/printf.c ****       case '#': flags |= FLAGS_HASH;    (*format)++; break;
 4244              		.loc 1 1033 23
 4245 00b4 FB68     		ldr	r3, [r7, #12]
 4246 00b6 43F01003 		orr	r3, r3, #16
 4247 00ba FB60     		str	r3, [r7, #12]
 4248              		.loc 1 1033 42
 4249 00bc 7B68     		ldr	r3, [r7, #4]
 4250 00be 1B68     		ldr	r3, [r3]
 4251              		.loc 1 1033 50
 4252 00c0 5A1C     		adds	r2, r3, #1
 4253 00c2 7B68     		ldr	r3, [r7, #4]
 4254 00c4 1A60     		str	r2, [r3]
 4255              		.loc 1 1033 54
 4256 00c6 01E0     		b	.L276
 4257              	.L269:
1034:Core/Src/printf.c ****       default : return flags;
 4258              		.loc 1 1034 24
 4259 00c8 FB68     		ldr	r3, [r7, #12]
 4260 00ca 00E0     		b	.L279
 4261              	.L276:
1028:Core/Src/printf.c ****       case '0': flags |= FLAGS_ZEROPAD; (*format)++; break;
 4262              		.loc 1 1028 5
 4263 00cc 9EE7     		b	.L278
 4264              	.L279:
1035:Core/Src/printf.c ****     }
1036:Core/Src/printf.c ****   } while (true);
1037:Core/Src/printf.c **** }
 4265              		.loc 1 1037 1
 4266 00ce 1846     		mov	r0, r3
 4267 00d0 1437     		adds	r7, r7, #20
 4268              	.LCFI155:
 4269              		.cfi_def_cfa_offset 4
 4270 00d2 BD46     		mov	sp, r7
 4271              	.LCFI156:
 4272              		.cfi_def_cfa_register 13
 4273              		@ sp needed
 4274 00d4 5DF8047B 		ldr	r7, [sp], #4
 4275              	.LCFI157:
 4276              		.cfi_restore 7
 4277              		.cfi_def_cfa_offset 0
 4278 00d8 7047     		bx	lr
 4279              		.cfi_endproc
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 94


 4280              	.LFE28:
 4282 00da 00BF     		.section	.rodata
 4283              		.align	2
 4284              	.LC4:
 4285 0018 296C6C75 		.ascii	")llun(\000"
 4285      6E2800
 4286 001f 00       		.align	2
 4287              	.LC5:
 4288 0020 296C696E 		.ascii	")lin(\000"
 4288      2800
 4289              		.section	.text.format_string_loop,"ax",%progbits
 4290              		.align	1
 4291              		.syntax unified
 4292              		.thumb
 4293              		.thumb_func
 4295              	format_string_loop:
 4296              	.LFB29:
1038:Core/Src/printf.c **** 
1039:Core/Src/printf.c **** static inline void format_string_loop(output_gadget_t* output, const char* format, va_list args)
1040:Core/Src/printf.c **** {
 4297              		.loc 1 1040 1
 4298              		.cfi_startproc
 4299              		@ args = 0, pretend = 0, frame = 152
 4300              		@ frame_needed = 1, uses_anonymous_args = 0
 4301 0000 2DE9B04F 		push	{r4, r5, r7, r8, r9, r10, fp, lr}
 4302              	.LCFI158:
 4303              		.cfi_def_cfa_offset 32
 4304              		.cfi_offset 4, -32
 4305              		.cfi_offset 5, -28
 4306              		.cfi_offset 7, -24
 4307              		.cfi_offset 8, -20
 4308              		.cfi_offset 9, -16
 4309              		.cfi_offset 10, -12
 4310              		.cfi_offset 11, -8
 4311              		.cfi_offset 14, -4
 4312 0004 ACB0     		sub	sp, sp, #176
 4313              	.LCFI159:
 4314              		.cfi_def_cfa_offset 208
 4315 0006 06AF     		add	r7, sp, #24
 4316              	.LCFI160:
 4317              		.cfi_def_cfa 7, 184
 4318 0008 7865     		str	r0, [r7, #84]
 4319 000a 3965     		str	r1, [r7, #80]
 4320 000c FA64     		str	r2, [r7, #76]
1041:Core/Src/printf.c **** #if PRINTF_CHECK_FOR_NUL_IN_FORMAT_SPECIFIER
1042:Core/Src/printf.c **** #define ADVANCE_IN_FORMAT_STRING(cptr_) do { (cptr_)++; if (!*(cptr_)) return; } while(0)
1043:Core/Src/printf.c **** #else
1044:Core/Src/printf.c **** #define ADVANCE_IN_FORMAT_STRING(cptr_) (cptr_)++
1045:Core/Src/printf.c **** #endif
1046:Core/Src/printf.c **** 
1047:Core/Src/printf.c **** 
1048:Core/Src/printf.c ****   while (*format)
 4321              		.loc 1 1048 9
 4322 000e 00F01BBD 		b	.L281
 4323              	.L377:
 4324              	.LBB10:
1049:Core/Src/printf.c ****   {
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 95


1050:Core/Src/printf.c ****     if (*format != '%') {
 4325              		.loc 1 1050 9
 4326 0012 3B6D     		ldr	r3, [r7, #80]
 4327 0014 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4328              		.loc 1 1050 8
 4329 0016 252B     		cmp	r3, #37
 4330 0018 0AD0     		beq	.L282
1051:Core/Src/printf.c ****       // A regular content character
1052:Core/Src/printf.c ****       putchar_via_gadget(output, *format);
 4331              		.loc 1 1052 7
 4332 001a 3B6D     		ldr	r3, [r7, #80]
 4333 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4334 001e 1946     		mov	r1, r3
 4335 0020 786D     		ldr	r0, [r7, #84]
 4336 0022 FFF7FEFF 		bl	putchar_via_gadget
1053:Core/Src/printf.c ****       format++;
 4337              		.loc 1 1053 13
 4338 0026 3B6D     		ldr	r3, [r7, #80]
 4339 0028 0133     		adds	r3, r3, #1
 4340 002a 3B65     		str	r3, [r7, #80]
1054:Core/Src/printf.c ****       continue;
 4341              		.loc 1 1054 7
 4342 002c 00F00CBD 		b	.L281
 4343              	.L282:
1055:Core/Src/printf.c ****     }
1056:Core/Src/printf.c ****     // We're parsing a format specifier: %[flags][width][.precision][length]
1057:Core/Src/printf.c ****     ADVANCE_IN_FORMAT_STRING(format);
 4344              		.loc 1 1057 5
 4345 0030 3B6D     		ldr	r3, [r7, #80]
 4346 0032 0133     		adds	r3, r3, #1
 4347 0034 3B65     		str	r3, [r7, #80]
 4348 0036 3B6D     		ldr	r3, [r7, #80]
 4349 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4350 003a 002B     		cmp	r3, #0
 4351 003c 00F00985 		beq	.L280
1058:Core/Src/printf.c **** 
1059:Core/Src/printf.c ****     printf_flags_t flags = parse_flags(&format);
 4352              		.loc 1 1059 28
 4353 0040 07F15003 		add	r3, r7, #80
 4354 0044 1846     		mov	r0, r3
 4355 0046 FFF7FEFF 		bl	parse_flags
 4356 004a C7F89400 		str	r0, [r7, #148]
1060:Core/Src/printf.c **** 
1061:Core/Src/printf.c ****     // evaluate width field
1062:Core/Src/printf.c ****     printf_size_t width = 0U;
 4357              		.loc 1 1062 19
 4358 004e 0023     		movs	r3, #0
 4359 0050 C7F89030 		str	r3, [r7, #144]
1063:Core/Src/printf.c ****     if (is_digit_(*format)) {
 4360              		.loc 1 1063 9
 4361 0054 3B6D     		ldr	r3, [r7, #80]
 4362 0056 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4363 0058 1846     		mov	r0, r3
 4364 005a FFF7FEFF 		bl	is_digit_
 4365 005e 0346     		mov	r3, r0
 4366              		.loc 1 1063 8 discriminator 1
 4367 0060 002B     		cmp	r3, #0
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 96


 4368 0062 07D0     		beq	.L286
1064:Core/Src/printf.c ****       width = (printf_size_t) atou_(&format);
 4369              		.loc 1 1064 31
 4370 0064 07F15003 		add	r3, r7, #80
 4371 0068 1846     		mov	r0, r3
 4372 006a FFF7FEFF 		bl	atou_
 4373 006e C7F89000 		str	r0, [r7, #144]
 4374 0072 21E0     		b	.L287
 4375              	.L286:
1065:Core/Src/printf.c ****     }
1066:Core/Src/printf.c ****     else if (*format == '*') {
 4376              		.loc 1 1066 14
 4377 0074 3B6D     		ldr	r3, [r7, #80]
 4378 0076 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4379              		.loc 1 1066 13
 4380 0078 2A2B     		cmp	r3, #42
 4381 007a 1DD1     		bne	.L287
 4382              	.LBB11:
1067:Core/Src/printf.c ****       const int w = va_arg(args, int);
 4383              		.loc 1 1067 17
 4384 007c FA6C     		ldr	r2, [r7, #76]
 4385 007e 131D     		adds	r3, r2, #4
 4386 0080 FB64     		str	r3, [r7, #76]
 4387 0082 1368     		ldr	r3, [r2]
 4388 0084 BB67     		str	r3, [r7, #120]
1068:Core/Src/printf.c ****       if (w < 0) {
 4389              		.loc 1 1068 10
 4390 0086 BB6F     		ldr	r3, [r7, #120]
 4391 0088 002B     		cmp	r3, #0
 4392 008a 0ADA     		bge	.L288
1069:Core/Src/printf.c ****         flags |= FLAGS_LEFT;    // reverse padding
 4393              		.loc 1 1069 15
 4394 008c D7F89430 		ldr	r3, [r7, #148]
 4395 0090 43F00203 		orr	r3, r3, #2
 4396 0094 C7F89430 		str	r3, [r7, #148]
1070:Core/Src/printf.c ****         width = (printf_size_t)-w;
 4397              		.loc 1 1070 32
 4398 0098 BB6F     		ldr	r3, [r7, #120]
 4399 009a 5B42     		rsbs	r3, r3, #0
 4400              		.loc 1 1070 15
 4401 009c C7F89030 		str	r3, [r7, #144]
 4402 00a0 02E0     		b	.L289
 4403              	.L288:
1071:Core/Src/printf.c ****       }
1072:Core/Src/printf.c ****       else {
1073:Core/Src/printf.c ****         width = (printf_size_t)w;
 4404              		.loc 1 1073 15
 4405 00a2 BB6F     		ldr	r3, [r7, #120]
 4406 00a4 C7F89030 		str	r3, [r7, #144]
 4407              	.L289:
1074:Core/Src/printf.c ****       }
1075:Core/Src/printf.c ****       ADVANCE_IN_FORMAT_STRING(format);
 4408              		.loc 1 1075 7
 4409 00a8 3B6D     		ldr	r3, [r7, #80]
 4410 00aa 0133     		adds	r3, r3, #1
 4411 00ac 3B65     		str	r3, [r7, #80]
 4412 00ae 3B6D     		ldr	r3, [r7, #80]
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 97


 4413 00b0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4414 00b2 002B     		cmp	r3, #0
 4415 00b4 00F0CD84 		beq	.L280
 4416              	.L287:
 4417              	.LBE11:
1076:Core/Src/printf.c ****     }
1077:Core/Src/printf.c **** 
1078:Core/Src/printf.c ****     // evaluate precision field
1079:Core/Src/printf.c ****     printf_size_t precision = 0U;
 4418              		.loc 1 1079 19
 4419 00b8 0023     		movs	r3, #0
 4420 00ba C7F88C30 		str	r3, [r7, #140]
1080:Core/Src/printf.c ****     if (*format == '.') {
 4421              		.loc 1 1080 9
 4422 00be 3B6D     		ldr	r3, [r7, #80]
 4423 00c0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4424              		.loc 1 1080 8
 4425 00c2 2E2B     		cmp	r3, #46
 4426 00c4 33D1     		bne	.L290
1081:Core/Src/printf.c ****       flags |= FLAGS_PRECISION;
 4427              		.loc 1 1081 13
 4428 00c6 D7F89430 		ldr	r3, [r7, #148]
 4429 00ca 43F40063 		orr	r3, r3, #2048
 4430 00ce C7F89430 		str	r3, [r7, #148]
1082:Core/Src/printf.c ****       ADVANCE_IN_FORMAT_STRING(format);
 4431              		.loc 1 1082 7
 4432 00d2 3B6D     		ldr	r3, [r7, #80]
 4433 00d4 0133     		adds	r3, r3, #1
 4434 00d6 3B65     		str	r3, [r7, #80]
 4435 00d8 3B6D     		ldr	r3, [r7, #80]
 4436 00da 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4437 00dc 002B     		cmp	r3, #0
 4438 00de 00F0B884 		beq	.L280
1083:Core/Src/printf.c ****       if (is_digit_(*format)) {
 4439              		.loc 1 1083 11
 4440 00e2 3B6D     		ldr	r3, [r7, #80]
 4441 00e4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4442 00e6 1846     		mov	r0, r3
 4443 00e8 FFF7FEFF 		bl	is_digit_
 4444 00ec 0346     		mov	r3, r0
 4445              		.loc 1 1083 10 discriminator 1
 4446 00ee 002B     		cmp	r3, #0
 4447 00f0 07D0     		beq	.L292
1084:Core/Src/printf.c ****         precision = (printf_size_t) atou_(&format);
 4448              		.loc 1 1084 37
 4449 00f2 07F15003 		add	r3, r7, #80
 4450 00f6 1846     		mov	r0, r3
 4451 00f8 FFF7FEFF 		bl	atou_
 4452 00fc C7F88C00 		str	r0, [r7, #140]
 4453 0100 15E0     		b	.L290
 4454              	.L292:
1085:Core/Src/printf.c ****       }
1086:Core/Src/printf.c ****       else if (*format == '*') {
 4455              		.loc 1 1086 16
 4456 0102 3B6D     		ldr	r3, [r7, #80]
 4457 0104 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4458              		.loc 1 1086 15
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 98


 4459 0106 2A2B     		cmp	r3, #42
 4460 0108 11D1     		bne	.L290
 4461              	.LBB12:
1087:Core/Src/printf.c ****         const int precision_ = va_arg(args, int);
 4462              		.loc 1 1087 19
 4463 010a FA6C     		ldr	r2, [r7, #76]
 4464 010c 131D     		adds	r3, r2, #4
 4465 010e FB64     		str	r3, [r7, #76]
 4466 0110 1368     		ldr	r3, [r2]
 4467 0112 7B67     		str	r3, [r7, #116]
1088:Core/Src/printf.c ****         precision = precision_ > 0 ? (printf_size_t) precision_ : 0U;
 4468              		.loc 1 1088 65
 4469 0114 7B6F     		ldr	r3, [r7, #116]
 4470 0116 23EAE373 		bic	r3, r3, r3, asr #31
 4471              		.loc 1 1088 19
 4472 011a C7F88C30 		str	r3, [r7, #140]
1089:Core/Src/printf.c ****         ADVANCE_IN_FORMAT_STRING(format);
 4473              		.loc 1 1089 9
 4474 011e 3B6D     		ldr	r3, [r7, #80]
 4475 0120 0133     		adds	r3, r3, #1
 4476 0122 3B65     		str	r3, [r7, #80]
 4477 0124 3B6D     		ldr	r3, [r7, #80]
 4478 0126 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4479 0128 002B     		cmp	r3, #0
 4480 012a 00F09284 		beq	.L280
 4481              	.L290:
 4482              	.LBE12:
1090:Core/Src/printf.c ****       }
1091:Core/Src/printf.c ****     }
1092:Core/Src/printf.c **** 
1093:Core/Src/printf.c ****     // evaluate length field
1094:Core/Src/printf.c ****     switch (*format) {
 4483              		.loc 1 1094 13
 4484 012e 3B6D     		ldr	r3, [r7, #80]
 4485 0130 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4486              		.loc 1 1094 5
 4487 0132 683B     		subs	r3, r3, #104
 4488 0134 122B     		cmp	r3, #18
 4489 0136 00F29880 		bhi	.L378
 4490 013a 01A2     		adr	r2, .L295
 4491 013c 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 4492              		.p2align 2
 4493              	.L295:
 4494 0140 CF010000 		.word	.L299+1
 4495 0144 6B020000 		.word	.L378+1
 4496 0148 2F020000 		.word	.L298+1
 4497 014c 6B020000 		.word	.L378+1
 4498 0150 8D010000 		.word	.L297+1
 4499 0154 6B020000 		.word	.L378+1
 4500 0158 6B020000 		.word	.L378+1
 4501 015c 6B020000 		.word	.L378+1
 4502 0160 6B020000 		.word	.L378+1
 4503 0164 6B020000 		.word	.L378+1
 4504 0168 6B020000 		.word	.L378+1
 4505 016c 6B020000 		.word	.L378+1
 4506 0170 11020000 		.word	.L296+1
 4507 0174 6B020000 		.word	.L378+1
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 99


 4508 0178 6B020000 		.word	.L378+1
 4509 017c 6B020000 		.word	.L378+1
 4510 0180 6B020000 		.word	.L378+1
 4511 0184 6B020000 		.word	.L378+1
 4512 0188 4D020000 		.word	.L294+1
 4513              		.p2align 1
 4514              	.L297:
1095:Core/Src/printf.c **** #ifdef PRINTF_SUPPORT_MSVC_STYLE_INTEGER_SPECIFIERS
1096:Core/Src/printf.c ****       case 'I' : {
1097:Core/Src/printf.c ****         ADVANCE_IN_FORMAT_STRING(format);
1098:Core/Src/printf.c ****         // Greedily parse for size in bits: 8, 16, 32 or 64
1099:Core/Src/printf.c ****         switch(*format) {
1100:Core/Src/printf.c ****           case '8':               flags |= FLAGS_INT8;
1101:Core/Src/printf.c ****             ADVANCE_IN_FORMAT_STRING(format);
1102:Core/Src/printf.c ****             break;
1103:Core/Src/printf.c ****           case '1':
1104:Core/Src/printf.c ****             ADVANCE_IN_FORMAT_STRING(format);
1105:Core/Src/printf.c ****           if (*format == '6') { format++; flags |= FLAGS_INT16; }
1106:Core/Src/printf.c ****             break;
1107:Core/Src/printf.c ****           case '3':
1108:Core/Src/printf.c ****             ADVANCE_IN_FORMAT_STRING(format);
1109:Core/Src/printf.c ****             if (*format == '2') { ADVANCE_IN_FORMAT_STRING(format); flags |= FLAGS_INT32; }
1110:Core/Src/printf.c ****             break;
1111:Core/Src/printf.c ****           case '6':
1112:Core/Src/printf.c ****             ADVANCE_IN_FORMAT_STRING(format);
1113:Core/Src/printf.c ****             if (*format == '4') { ADVANCE_IN_FORMAT_STRING(format); flags |= FLAGS_INT64; }
1114:Core/Src/printf.c ****             break;
1115:Core/Src/printf.c ****           default: break;
1116:Core/Src/printf.c ****         }
1117:Core/Src/printf.c ****         break;
1118:Core/Src/printf.c ****       }
1119:Core/Src/printf.c **** #endif
1120:Core/Src/printf.c ****       case 'l' :
1121:Core/Src/printf.c ****         flags |= FLAGS_LONG;
 4515              		.loc 1 1121 15
 4516 018c D7F89430 		ldr	r3, [r7, #148]
 4517 0190 43F40073 		orr	r3, r3, #512
 4518 0194 C7F89430 		str	r3, [r7, #148]
1122:Core/Src/printf.c ****         ADVANCE_IN_FORMAT_STRING(format);
 4519              		.loc 1 1122 9
 4520 0198 3B6D     		ldr	r3, [r7, #80]
 4521 019a 0133     		adds	r3, r3, #1
 4522 019c 3B65     		str	r3, [r7, #80]
 4523 019e 3B6D     		ldr	r3, [r7, #80]
 4524 01a0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4525 01a2 002B     		cmp	r3, #0
 4526 01a4 00F05584 		beq	.L280
1123:Core/Src/printf.c ****         if (*format == 'l') {
 4527              		.loc 1 1123 13
 4528 01a8 3B6D     		ldr	r3, [r7, #80]
 4529 01aa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4530              		.loc 1 1123 12
 4531 01ac 6C2B     		cmp	r3, #108
 4532 01ae 5ED1     		bne	.L379
1124:Core/Src/printf.c ****           flags |= FLAGS_LONG_LONG;
 4533              		.loc 1 1124 17
 4534 01b0 D7F89430 		ldr	r3, [r7, #148]
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 100


 4535 01b4 43F48063 		orr	r3, r3, #1024
 4536 01b8 C7F89430 		str	r3, [r7, #148]
1125:Core/Src/printf.c ****           ADVANCE_IN_FORMAT_STRING(format);
 4537              		.loc 1 1125 11
 4538 01bc 3B6D     		ldr	r3, [r7, #80]
 4539 01be 0133     		adds	r3, r3, #1
 4540 01c0 3B65     		str	r3, [r7, #80]
 4541 01c2 3B6D     		ldr	r3, [r7, #80]
 4542 01c4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4543 01c6 002B     		cmp	r3, #0
 4544 01c8 51D1     		bne	.L379
 4545 01ca 00F042BC 		b	.L280
 4546              	.L299:
1126:Core/Src/printf.c ****         }
1127:Core/Src/printf.c ****         break;
1128:Core/Src/printf.c ****       case 'h' :
1129:Core/Src/printf.c ****         flags |= FLAGS_SHORT;
 4547              		.loc 1 1129 15
 4548 01ce D7F89430 		ldr	r3, [r7, #148]
 4549 01d2 43F08003 		orr	r3, r3, #128
 4550 01d6 C7F89430 		str	r3, [r7, #148]
1130:Core/Src/printf.c ****         ADVANCE_IN_FORMAT_STRING(format);
 4551              		.loc 1 1130 9
 4552 01da 3B6D     		ldr	r3, [r7, #80]
 4553 01dc 0133     		adds	r3, r3, #1
 4554 01de 3B65     		str	r3, [r7, #80]
 4555 01e0 3B6D     		ldr	r3, [r7, #80]
 4556 01e2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4557 01e4 002B     		cmp	r3, #0
 4558 01e6 00F03484 		beq	.L280
1131:Core/Src/printf.c ****         if (*format == 'h') {
 4559              		.loc 1 1131 13
 4560 01ea 3B6D     		ldr	r3, [r7, #80]
 4561 01ec 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4562              		.loc 1 1131 12
 4563 01ee 682B     		cmp	r3, #104
 4564 01f0 3FD1     		bne	.L380
1132:Core/Src/printf.c ****           flags |= FLAGS_CHAR;
 4565              		.loc 1 1132 17
 4566 01f2 D7F89430 		ldr	r3, [r7, #148]
 4567 01f6 43F04003 		orr	r3, r3, #64
 4568 01fa C7F89430 		str	r3, [r7, #148]
1133:Core/Src/printf.c ****           ADVANCE_IN_FORMAT_STRING(format);
 4569              		.loc 1 1133 11
 4570 01fe 3B6D     		ldr	r3, [r7, #80]
 4571 0200 0133     		adds	r3, r3, #1
 4572 0202 3B65     		str	r3, [r7, #80]
 4573 0204 3B6D     		ldr	r3, [r7, #80]
 4574 0206 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4575 0208 002B     		cmp	r3, #0
 4576 020a 32D1     		bne	.L380
 4577 020c 00F021BC 		b	.L280
 4578              	.L296:
1134:Core/Src/printf.c ****         }
1135:Core/Src/printf.c ****         break;
1136:Core/Src/printf.c ****       case 't' :
1137:Core/Src/printf.c ****         flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 101


 4579              		.loc 1 1137 15
 4580 0210 D7F89430 		ldr	r3, [r7, #148]
 4581 0214 43F40073 		orr	r3, r3, #512
 4582 0218 C7F89430 		str	r3, [r7, #148]
1138:Core/Src/printf.c ****         ADVANCE_IN_FORMAT_STRING(format);
 4583              		.loc 1 1138 9
 4584 021c 3B6D     		ldr	r3, [r7, #80]
 4585 021e 0133     		adds	r3, r3, #1
 4586 0220 3B65     		str	r3, [r7, #80]
 4587 0222 3B6D     		ldr	r3, [r7, #80]
 4588 0224 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4589 0226 002B     		cmp	r3, #0
 4590 0228 25D1     		bne	.L381
 4591 022a 00F012BC 		b	.L280
 4592              	.L298:
1139:Core/Src/printf.c ****         break;
1140:Core/Src/printf.c ****       case 'j' :
1141:Core/Src/printf.c ****         flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 4593              		.loc 1 1141 15
 4594 022e D7F89430 		ldr	r3, [r7, #148]
 4595 0232 43F48063 		orr	r3, r3, #1024
 4596 0236 C7F89430 		str	r3, [r7, #148]
1142:Core/Src/printf.c ****         ADVANCE_IN_FORMAT_STRING(format);
 4597              		.loc 1 1142 9
 4598 023a 3B6D     		ldr	r3, [r7, #80]
 4599 023c 0133     		adds	r3, r3, #1
 4600 023e 3B65     		str	r3, [r7, #80]
 4601 0240 3B6D     		ldr	r3, [r7, #80]
 4602 0242 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4603 0244 002B     		cmp	r3, #0
 4604 0246 18D1     		bne	.L382
 4605 0248 00F003BC 		b	.L280
 4606              	.L294:
1143:Core/Src/printf.c ****         break;
1144:Core/Src/printf.c ****       case 'z' :
1145:Core/Src/printf.c ****         flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 4607              		.loc 1 1145 15
 4608 024c D7F89430 		ldr	r3, [r7, #148]
 4609 0250 43F40073 		orr	r3, r3, #512
 4610 0254 C7F89430 		str	r3, [r7, #148]
1146:Core/Src/printf.c ****         ADVANCE_IN_FORMAT_STRING(format);
 4611              		.loc 1 1146 9
 4612 0258 3B6D     		ldr	r3, [r7, #80]
 4613 025a 0133     		adds	r3, r3, #1
 4614 025c 3B65     		str	r3, [r7, #80]
 4615 025e 3B6D     		ldr	r3, [r7, #80]
 4616 0260 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4617 0262 002B     		cmp	r3, #0
 4618 0264 00F0F583 		beq	.L280
1147:Core/Src/printf.c ****         break;
 4619              		.loc 1 1147 9
 4620 0268 08E0     		b	.L302
 4621              	.L378:
1148:Core/Src/printf.c ****       default:
1149:Core/Src/printf.c ****         break;
 4622              		.loc 1 1149 9
 4623 026a 00BF     		nop
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 102


 4624 026c 06E0     		b	.L302
 4625              	.L379:
1127:Core/Src/printf.c ****       case 'h' :
 4626              		.loc 1 1127 9
 4627 026e 00BF     		nop
 4628 0270 04E0     		b	.L302
 4629              	.L380:
1135:Core/Src/printf.c ****       case 't' :
 4630              		.loc 1 1135 9
 4631 0272 00BF     		nop
 4632 0274 02E0     		b	.L302
 4633              	.L381:
1139:Core/Src/printf.c ****       case 'j' :
 4634              		.loc 1 1139 9
 4635 0276 00BF     		nop
 4636 0278 00E0     		b	.L302
 4637              	.L382:
1143:Core/Src/printf.c ****       case 'z' :
 4638              		.loc 1 1143 9
 4639 027a 00BF     		nop
 4640              	.L302:
1150:Core/Src/printf.c ****     }
1151:Core/Src/printf.c **** 
1152:Core/Src/printf.c ****     // evaluate specifier
1153:Core/Src/printf.c ****     switch (*format) {
 4641              		.loc 1 1153 13
 4642 027c 3B6D     		ldr	r3, [r7, #80]
 4643 027e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4644              		.loc 1 1153 5
 4645 0280 253B     		subs	r3, r3, #37
 4646 0282 532B     		cmp	r3, #83
 4647 0284 00F2D683 		bhi	.L308
 4648 0288 01A2     		adr	r2, .L310
 4649 028a 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 4650 028e 00BF     		.p2align 2
 4651              	.L310:
 4652 0290 8B090000 		.word	.L317+1
 4653 0294 350A0000 		.word	.L308+1
 4654 0298 350A0000 		.word	.L308+1
 4655 029c 350A0000 		.word	.L308+1
 4656 02a0 350A0000 		.word	.L308+1
 4657 02a4 350A0000 		.word	.L308+1
 4658 02a8 350A0000 		.word	.L308+1
 4659 02ac 350A0000 		.word	.L308+1
 4660 02b0 350A0000 		.word	.L308+1
 4661 02b4 350A0000 		.word	.L308+1
 4662 02b8 350A0000 		.word	.L308+1
 4663 02bc 350A0000 		.word	.L308+1
 4664 02c0 350A0000 		.word	.L308+1
 4665 02c4 350A0000 		.word	.L308+1
 4666 02c8 350A0000 		.word	.L308+1
 4667 02cc 350A0000 		.word	.L308+1
 4668 02d0 350A0000 		.word	.L308+1
 4669 02d4 350A0000 		.word	.L308+1
 4670 02d8 350A0000 		.word	.L308+1
 4671 02dc 350A0000 		.word	.L308+1
 4672 02e0 350A0000 		.word	.L308+1
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 103


 4673 02e4 350A0000 		.word	.L308+1
 4674 02e8 350A0000 		.word	.L308+1
 4675 02ec 350A0000 		.word	.L308+1
 4676 02f0 350A0000 		.word	.L308+1
 4677 02f4 350A0000 		.word	.L308+1
 4678 02f8 350A0000 		.word	.L308+1
 4679 02fc 350A0000 		.word	.L308+1
 4680 0300 350A0000 		.word	.L308+1
 4681 0304 350A0000 		.word	.L308+1
 4682 0308 350A0000 		.word	.L308+1
 4683 030c 350A0000 		.word	.L308+1
 4684 0310 4B070000 		.word	.L314+1
 4685 0314 FF060000 		.word	.L315+1
 4686 0318 4B070000 		.word	.L314+1
 4687 031c 350A0000 		.word	.L308+1
 4688 0320 350A0000 		.word	.L308+1
 4689 0324 350A0000 		.word	.L308+1
 4690 0328 350A0000 		.word	.L308+1
 4691 032c 350A0000 		.word	.L308+1
 4692 0330 350A0000 		.word	.L308+1
 4693 0334 350A0000 		.word	.L308+1
 4694 0338 350A0000 		.word	.L308+1
 4695 033c 350A0000 		.word	.L308+1
 4696 0340 350A0000 		.word	.L308+1
 4697 0344 350A0000 		.word	.L308+1
 4698 0348 350A0000 		.word	.L308+1
 4699 034c 350A0000 		.word	.L308+1
 4700 0350 350A0000 		.word	.L308+1
 4701 0354 350A0000 		.word	.L308+1
 4702 0358 350A0000 		.word	.L308+1
 4703 035c E1030000 		.word	.L309+1
 4704 0360 350A0000 		.word	.L308+1
 4705 0364 350A0000 		.word	.L308+1
 4706 0368 350A0000 		.word	.L308+1
 4707 036c 350A0000 		.word	.L308+1
 4708 0370 350A0000 		.word	.L308+1
 4709 0374 350A0000 		.word	.L308+1
 4710 0378 350A0000 		.word	.L308+1
 4711 037c 350A0000 		.word	.L308+1
 4712 0380 350A0000 		.word	.L308+1
 4713 0384 E1030000 		.word	.L309+1
 4714 0388 BB070000 		.word	.L316+1
 4715 038c E1030000 		.word	.L309+1
 4716 0390 4B070000 		.word	.L314+1
 4717 0394 FF060000 		.word	.L315+1
 4718 0398 4B070000 		.word	.L314+1
 4719 039c 350A0000 		.word	.L308+1
 4720 03a0 E1030000 		.word	.L309+1
 4721 03a4 350A0000 		.word	.L308+1
 4722 03a8 350A0000 		.word	.L308+1
 4723 03ac 350A0000 		.word	.L308+1
 4724 03b0 350A0000 		.word	.L308+1
 4725 03b4 9B090000 		.word	.L313+1
 4726 03b8 E1030000 		.word	.L309+1
 4727 03bc 1B090000 		.word	.L312+1
 4728 03c0 350A0000 		.word	.L308+1
 4729 03c4 350A0000 		.word	.L308+1
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 104


 4730 03c8 2B080000 		.word	.L311+1
 4731 03cc 350A0000 		.word	.L308+1
 4732 03d0 E1030000 		.word	.L309+1
 4733 03d4 350A0000 		.word	.L308+1
 4734 03d8 350A0000 		.word	.L308+1
 4735 03dc E1030000 		.word	.L309+1
 4736              		.p2align 1
 4737              	.L309:
 4738              	.LBB13:
1154:Core/Src/printf.c ****       case 'd' :
1155:Core/Src/printf.c ****       case 'i' :
1156:Core/Src/printf.c ****       case 'u' :
1157:Core/Src/printf.c ****       case 'x' :
1158:Core/Src/printf.c ****       case 'X' :
1159:Core/Src/printf.c ****       case 'o' :
1160:Core/Src/printf.c ****       case 'b' : {
1161:Core/Src/printf.c **** 
1162:Core/Src/printf.c ****         if (*format == 'd' || *format == 'i') {
 4739              		.loc 1 1162 13
 4740 03e0 3B6D     		ldr	r3, [r7, #80]
 4741 03e2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4742              		.loc 1 1162 12
 4743 03e4 642B     		cmp	r3, #100
 4744 03e6 03D0     		beq	.L318
 4745              		.loc 1 1162 31 discriminator 1
 4746 03e8 3B6D     		ldr	r3, [r7, #80]
 4747 03ea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4748              		.loc 1 1162 28 discriminator 1
 4749 03ec 692B     		cmp	r3, #105
 4750 03ee 05D1     		bne	.L319
 4751              	.L318:
1163:Core/Src/printf.c ****           flags |= FLAGS_SIGNED;
 4752              		.loc 1 1163 17
 4753 03f0 D7F89430 		ldr	r3, [r7, #148]
 4754 03f4 43F48043 		orr	r3, r3, #16384
 4755 03f8 C7F89430 		str	r3, [r7, #148]
 4756              	.L319:
1164:Core/Src/printf.c ****         }
1165:Core/Src/printf.c **** 
1166:Core/Src/printf.c ****         numeric_base_t base;
1167:Core/Src/printf.c ****         if (*format == 'x' || *format == 'X') {
 4757              		.loc 1 1167 13
 4758 03fc 3B6D     		ldr	r3, [r7, #80]
 4759 03fe 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4760              		.loc 1 1167 12
 4761 0400 782B     		cmp	r3, #120
 4762 0402 03D0     		beq	.L320
 4763              		.loc 1 1167 31 discriminator 1
 4764 0404 3B6D     		ldr	r3, [r7, #80]
 4765 0406 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4766              		.loc 1 1167 28 discriminator 1
 4767 0408 582B     		cmp	r3, #88
 4768 040a 03D1     		bne	.L321
 4769              	.L320:
1168:Core/Src/printf.c ****           base = BASE_HEX;
 4770              		.loc 1 1168 16
 4771 040c 1023     		movs	r3, #16
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 105


 4772 040e 87F88B30 		strb	r3, [r7, #139]
 4773 0412 18E0     		b	.L322
 4774              	.L321:
1169:Core/Src/printf.c ****         }
1170:Core/Src/printf.c ****         else if (*format == 'o') {
 4775              		.loc 1 1170 18
 4776 0414 3B6D     		ldr	r3, [r7, #80]
 4777 0416 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4778              		.loc 1 1170 17
 4779 0418 6F2B     		cmp	r3, #111
 4780 041a 03D1     		bne	.L323
1171:Core/Src/printf.c ****           base =  BASE_OCTAL;
 4781              		.loc 1 1171 16
 4782 041c 0823     		movs	r3, #8
 4783 041e 87F88B30 		strb	r3, [r7, #139]
 4784 0422 10E0     		b	.L322
 4785              	.L323:
1172:Core/Src/printf.c ****         }
1173:Core/Src/printf.c ****         else if (*format == 'b') {
 4786              		.loc 1 1173 18
 4787 0424 3B6D     		ldr	r3, [r7, #80]
 4788 0426 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4789              		.loc 1 1173 17
 4790 0428 622B     		cmp	r3, #98
 4791 042a 03D1     		bne	.L324
1174:Core/Src/printf.c ****           base =  BASE_BINARY;
 4792              		.loc 1 1174 16
 4793 042c 0223     		movs	r3, #2
 4794 042e 87F88B30 		strb	r3, [r7, #139]
 4795 0432 08E0     		b	.L322
 4796              	.L324:
1175:Core/Src/printf.c ****         }
1176:Core/Src/printf.c ****         else {
1177:Core/Src/printf.c ****           base = BASE_DECIMAL;
 4797              		.loc 1 1177 16
 4798 0434 0A23     		movs	r3, #10
 4799 0436 87F88B30 		strb	r3, [r7, #139]
1178:Core/Src/printf.c ****           flags &= ~FLAGS_HASH; // decimal integers have no alternative presentation
 4800              		.loc 1 1178 17
 4801 043a D7F89430 		ldr	r3, [r7, #148]
 4802 043e 23F01003 		bic	r3, r3, #16
 4803 0442 C7F89430 		str	r3, [r7, #148]
 4804              	.L322:
1179:Core/Src/printf.c ****         }
1180:Core/Src/printf.c **** 
1181:Core/Src/printf.c ****         if (*format == 'X') {
 4805              		.loc 1 1181 13
 4806 0446 3B6D     		ldr	r3, [r7, #80]
 4807 0448 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4808              		.loc 1 1181 12
 4809 044a 582B     		cmp	r3, #88
 4810 044c 05D1     		bne	.L325
1182:Core/Src/printf.c ****           flags |= FLAGS_UPPERCASE;
 4811              		.loc 1 1182 17
 4812 044e D7F89430 		ldr	r3, [r7, #148]
 4813 0452 43F02003 		orr	r3, r3, #32
 4814 0456 C7F89430 		str	r3, [r7, #148]
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 106


 4815              	.L325:
1183:Core/Src/printf.c ****         }
1184:Core/Src/printf.c **** 
1185:Core/Src/printf.c ****         format++;
 4816              		.loc 1 1185 15
 4817 045a 3B6D     		ldr	r3, [r7, #80]
 4818 045c 0133     		adds	r3, r3, #1
 4819 045e 3B65     		str	r3, [r7, #80]
1186:Core/Src/printf.c ****         // ignore '0' flag when precision is given
1187:Core/Src/printf.c ****         if (flags & FLAGS_PRECISION) {
 4820              		.loc 1 1187 19
 4821 0460 D7F89430 		ldr	r3, [r7, #148]
 4822 0464 03F40063 		and	r3, r3, #2048
 4823              		.loc 1 1187 12
 4824 0468 002B     		cmp	r3, #0
 4825 046a 05D0     		beq	.L326
1188:Core/Src/printf.c ****           flags &= ~FLAGS_ZEROPAD;
 4826              		.loc 1 1188 17
 4827 046c D7F89430 		ldr	r3, [r7, #148]
 4828 0470 23F00103 		bic	r3, r3, #1
 4829 0474 C7F89430 		str	r3, [r7, #148]
 4830              	.L326:
1189:Core/Src/printf.c ****         }
1190:Core/Src/printf.c **** 
1191:Core/Src/printf.c ****         if (flags & FLAGS_SIGNED) {
 4831              		.loc 1 1191 19
 4832 0478 D7F89430 		ldr	r3, [r7, #148]
 4833 047c 03F48043 		and	r3, r3, #16384
 4834              		.loc 1 1191 12
 4835 0480 002B     		cmp	r3, #0
 4836 0482 00F0BD80 		beq	.L327
1192:Core/Src/printf.c ****           // A signed specifier: d, i or possibly I + bit size if enabled
1193:Core/Src/printf.c **** 
1194:Core/Src/printf.c ****           if (flags & FLAGS_LONG_LONG) {
 4837              		.loc 1 1194 21
 4838 0486 D7F89430 		ldr	r3, [r7, #148]
 4839 048a 03F48063 		and	r3, r3, #1024
 4840              		.loc 1 1194 14
 4841 048e 002B     		cmp	r3, #0
 4842 0490 34D0     		beq	.L328
 4843              	.LBB14:
1195:Core/Src/printf.c **** #if PRINTF_SUPPORT_LONG_LONG
1196:Core/Src/printf.c ****             const long long value = va_arg(args, long long);
 4844              		.loc 1 1196 29
 4845 0492 FB6C     		ldr	r3, [r7, #76]
 4846 0494 0733     		adds	r3, r3, #7
 4847 0496 23F00702 		bic	r2, r3, #7
 4848 049a 02F10803 		add	r3, r2, #8
 4849 049e FB64     		str	r3, [r7, #76]
 4850 04a0 D2E90023 		ldrd	r2, [r2]
 4851 04a4 C7E91623 		strd	r2, [r7, #88]
1197:Core/Src/printf.c ****             print_integer(output, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags
 4852              		.loc 1 1197 35
 4853 04a8 D7E91623 		ldrd	r2, [r7, #88]
 4854 04ac 002B     		cmp	r3, #0
 4855 04ae 07DA     		bge	.L329
 4856 04b0 0021     		movs	r1, #0
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 107


 4857 04b2 5042     		negs	r0, r2
 4858 04b4 3860     		str	r0, [r7]
 4859 04b6 61EB0303 		sbc	r3, r1, r3
 4860 04ba 7B60     		str	r3, [r7, #4]
 4861 04bc D7E90023 		ldrd	r2, [r7]
 4862              	.L329:
 4863              		.loc 1 1197 13
 4864 04c0 1446     		mov	r4, r2
 4865 04c2 1D46     		mov	r5, r3
 4866 04c4 D7E91623 		ldrd	r2, [r7, #88]
 4867 04c8 4FF00000 		mov	r0, #0
 4868 04cc 4FF00001 		mov	r1, #0
 4869 04d0 D80F     		lsrs	r0, r3, #31
 4870 04d2 0021     		movs	r1, #0
 4871 04d4 C2B2     		uxtb	r2, r0
 4872 04d6 D7F89430 		ldr	r3, [r7, #148]
 4873 04da 0493     		str	r3, [sp, #16]
 4874 04dc D7F89030 		ldr	r3, [r7, #144]
 4875 04e0 0393     		str	r3, [sp, #12]
 4876 04e2 D7F88C30 		ldr	r3, [r7, #140]
 4877 04e6 0293     		str	r3, [sp, #8]
 4878 04e8 97F88B30 		ldrb	r3, [r7, #139]	@ zero_extendqisi2
 4879 04ec 0193     		str	r3, [sp, #4]
 4880 04ee 0092     		str	r2, [sp]
 4881 04f0 2246     		mov	r2, r4
 4882 04f2 2B46     		mov	r3, r5
 4883 04f4 786D     		ldr	r0, [r7, #84]
 4884 04f6 FFF7FEFF 		bl	print_integer
 4885              	.LBE14:
1198:Core/Src/printf.c **** #endif
1199:Core/Src/printf.c ****           }
1200:Core/Src/printf.c ****           else if (flags & FLAGS_LONG) {
1201:Core/Src/printf.c ****             const long value = va_arg(args, long);
1202:Core/Src/printf.c ****             print_integer(output, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags
1203:Core/Src/printf.c ****           }
1204:Core/Src/printf.c ****           else {
1205:Core/Src/printf.c ****             // We never try to interpret the argument as something potentially-smaller than int,
1206:Core/Src/printf.c ****             // due to integer promotion rules: Even if the user passed a short int, short unsigned
1207:Core/Src/printf.c ****             // etc. - these will come in after promotion, as int's (or unsigned for the case of
1208:Core/Src/printf.c ****             // short unsigned when it has the same size as int)
1209:Core/Src/printf.c ****             const int value =
1210:Core/Src/printf.c ****               (flags & FLAGS_CHAR) ? (signed char) va_arg(args, int) :
1211:Core/Src/printf.c ****               (flags & FLAGS_SHORT) ? (short int) va_arg(args, int) :
1212:Core/Src/printf.c ****               va_arg(args, int);
1213:Core/Src/printf.c ****             print_integer(output, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags
1214:Core/Src/printf.c ****           }
1215:Core/Src/printf.c ****         }
1216:Core/Src/printf.c ****         else {
1217:Core/Src/printf.c ****           // An unsigned specifier: u, x, X, o, b
1218:Core/Src/printf.c **** 
1219:Core/Src/printf.c ****           flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
1220:Core/Src/printf.c **** 
1221:Core/Src/printf.c ****           if (flags & FLAGS_LONG_LONG) {
1222:Core/Src/printf.c **** #if PRINTF_SUPPORT_LONG_LONG
1223:Core/Src/printf.c ****             print_integer(output, (printf_unsigned_value_t) va_arg(args, unsigned long long), false
1224:Core/Src/printf.c **** #endif
1225:Core/Src/printf.c ****           }
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 108


1226:Core/Src/printf.c ****           else if (flags & FLAGS_LONG) {
1227:Core/Src/printf.c ****             print_integer(output, (printf_unsigned_value_t) va_arg(args, unsigned long), false, bas
1228:Core/Src/printf.c ****           }
1229:Core/Src/printf.c ****           else {
1230:Core/Src/printf.c ****             const unsigned int value =
1231:Core/Src/printf.c ****               (flags & FLAGS_CHAR) ? (unsigned char)va_arg(args, unsigned int) :
1232:Core/Src/printf.c ****               (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(args, unsigned int) :
1233:Core/Src/printf.c ****               va_arg(args, unsigned int);
1234:Core/Src/printf.c ****             print_integer(output, (printf_unsigned_value_t) value, false, base, precision, width, f
1235:Core/Src/printf.c ****           }
1236:Core/Src/printf.c ****         }
1237:Core/Src/printf.c ****         break;
 4886              		.loc 1 1237 9
 4887 04fa A5E2     		b	.L281
 4888              	.L328:
1200:Core/Src/printf.c ****             const long value = va_arg(args, long);
 4889              		.loc 1 1200 26
 4890 04fc D7F89430 		ldr	r3, [r7, #148]
 4891 0500 03F40073 		and	r3, r3, #512
1200:Core/Src/printf.c ****             const long value = va_arg(args, long);
 4892              		.loc 1 1200 19
 4893 0504 002B     		cmp	r3, #0
 4894 0506 31D0     		beq	.L331
 4895              	.LBB15:
1201:Core/Src/printf.c ****             print_integer(output, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags
 4896              		.loc 1 1201 24
 4897 0508 FA6C     		ldr	r2, [r7, #76]
 4898 050a 131D     		adds	r3, r2, #4
 4899 050c FB64     		str	r3, [r7, #76]
 4900 050e 1368     		ldr	r3, [r2]
 4901 0510 7B66     		str	r3, [r7, #100]
1202:Core/Src/printf.c ****           }
 4902              		.loc 1 1202 13
 4903 0512 7B6E     		ldr	r3, [r7, #100]
 4904 0514 002B     		cmp	r3, #0
 4905 0516 04DD     		ble	.L332
1202:Core/Src/printf.c ****           }
 4906              		.loc 1 1202 13 is_stmt 0 discriminator 1
 4907 0518 7B6E     		ldr	r3, [r7, #100]
 4908 051a DA17     		asrs	r2, r3, #31
 4909 051c 3B64     		str	r3, [r7, #64]
 4910 051e 7A64     		str	r2, [r7, #68]
 4911 0520 0EE0     		b	.L333
 4912              	.L332:
1202:Core/Src/printf.c ****           }
 4913              		.loc 1 1202 35 is_stmt 1 discriminator 2
 4914 0522 7B6E     		ldr	r3, [r7, #100]
 4915 0524 DA17     		asrs	r2, r3, #31
 4916 0526 9846     		mov	r8, r3
 4917 0528 9146     		mov	r9, r2
 4918 052a 0023     		movs	r3, #0
 4919 052c D8F10002 		rsbs	r2, r8, #0
 4920 0530 3A63     		str	r2, [r7, #48]
 4921 0532 63EB0903 		sbc	r3, r3, r9
 4922 0536 7B63     		str	r3, [r7, #52]
1202:Core/Src/printf.c ****           }
 4923              		.loc 1 1202 13 discriminator 2
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 109


 4924 0538 D7E90C34 		ldrd	r3, [r7, #48]
 4925 053c C7E91034 		strd	r3, [r7, #64]
 4926              	.L333:
1202:Core/Src/printf.c ****           }
 4927              		.loc 1 1202 13 is_stmt 0 discriminator 4
 4928 0540 7B6E     		ldr	r3, [r7, #100]
 4929 0542 DB0F     		lsrs	r3, r3, #31
 4930 0544 DAB2     		uxtb	r2, r3
 4931 0546 D7F89430 		ldr	r3, [r7, #148]
 4932 054a 0493     		str	r3, [sp, #16]
 4933 054c D7F89030 		ldr	r3, [r7, #144]
 4934 0550 0393     		str	r3, [sp, #12]
 4935 0552 D7F88C30 		ldr	r3, [r7, #140]
 4936 0556 0293     		str	r3, [sp, #8]
 4937 0558 97F88B30 		ldrb	r3, [r7, #139]	@ zero_extendqisi2
 4938 055c 0193     		str	r3, [sp, #4]
 4939 055e 0092     		str	r2, [sp]
 4940 0560 D7E91023 		ldrd	r2, [r7, #64]
 4941 0564 786D     		ldr	r0, [r7, #84]
 4942 0566 FFF7FEFF 		bl	print_integer
 4943              	.LBE15:
 4944              		.loc 1 1237 9 is_stmt 1
 4945 056a 6DE2     		b	.L281
 4946              	.L331:
 4947              	.LBB16:
1210:Core/Src/printf.c ****               (flags & FLAGS_SHORT) ? (short int) va_arg(args, int) :
 4948              		.loc 1 1210 22
 4949 056c D7F89430 		ldr	r3, [r7, #148]
 4950 0570 03F04003 		and	r3, r3, #64
1210:Core/Src/printf.c ****               (flags & FLAGS_SHORT) ? (short int) va_arg(args, int) :
 4951              		.loc 1 1210 70
 4952 0574 002B     		cmp	r3, #0
 4953 0576 05D0     		beq	.L334
1210:Core/Src/printf.c ****               (flags & FLAGS_SHORT) ? (short int) va_arg(args, int) :
 4954              		.loc 1 1210 52 discriminator 1
 4955 0578 FA6C     		ldr	r2, [r7, #76]
 4956 057a 131D     		adds	r3, r2, #4
 4957 057c FB64     		str	r3, [r7, #76]
 4958 057e 1368     		ldr	r3, [r2]
1210:Core/Src/printf.c ****               (flags & FLAGS_SHORT) ? (short int) va_arg(args, int) :
 4959              		.loc 1 1210 38 discriminator 1
 4960 0580 5BB2     		sxtb	r3, r3
 4961 0582 0FE0     		b	.L335
 4962              	.L334:
1211:Core/Src/printf.c ****               va_arg(args, int);
 4963              		.loc 1 1211 22
 4964 0584 D7F89430 		ldr	r3, [r7, #148]
 4965 0588 03F08003 		and	r3, r3, #128
1211:Core/Src/printf.c ****               va_arg(args, int);
 4966              		.loc 1 1211 69
 4967 058c 002B     		cmp	r3, #0
 4968 058e 05D0     		beq	.L336
1211:Core/Src/printf.c ****               va_arg(args, int);
 4969              		.loc 1 1211 51 discriminator 1
 4970 0590 FA6C     		ldr	r2, [r7, #76]
 4971 0592 131D     		adds	r3, r2, #4
 4972 0594 FB64     		str	r3, [r7, #76]
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 110


 4973 0596 1368     		ldr	r3, [r2]
1211:Core/Src/printf.c ****               va_arg(args, int);
 4974              		.loc 1 1211 39 discriminator 1
 4975 0598 1BB2     		sxth	r3, r3
 4976 059a 03E0     		b	.L335
 4977              	.L336:
1211:Core/Src/printf.c ****               va_arg(args, int);
 4978              		.loc 1 1211 69 discriminator 2
 4979 059c FA6C     		ldr	r2, [r7, #76]
 4980 059e 131D     		adds	r3, r2, #4
 4981 05a0 FB64     		str	r3, [r7, #76]
 4982 05a2 1368     		ldr	r3, [r2]
 4983              	.L335:
1209:Core/Src/printf.c ****               (flags & FLAGS_CHAR) ? (signed char) va_arg(args, int) :
 4984              		.loc 1 1209 23
 4985 05a4 BB66     		str	r3, [r7, #104]
1213:Core/Src/printf.c ****           }
 4986              		.loc 1 1213 13
 4987 05a6 BB6E     		ldr	r3, [r7, #104]
 4988 05a8 002B     		cmp	r3, #0
 4989 05aa 04DD     		ble	.L338
1213:Core/Src/printf.c ****           }
 4990              		.loc 1 1213 13 is_stmt 0 discriminator 1
 4991 05ac BB6E     		ldr	r3, [r7, #104]
 4992 05ae DA17     		asrs	r2, r3, #31
 4993 05b0 BB63     		str	r3, [r7, #56]
 4994 05b2 FA63     		str	r2, [r7, #60]
 4995 05b4 0EE0     		b	.L339
 4996              	.L338:
1213:Core/Src/printf.c ****           }
 4997              		.loc 1 1213 35 is_stmt 1 discriminator 2
 4998 05b6 BB6E     		ldr	r3, [r7, #104]
 4999 05b8 DA17     		asrs	r2, r3, #31
 5000 05ba 9A46     		mov	r10, r3
 5001 05bc 9346     		mov	fp, r2
 5002 05be 0023     		movs	r3, #0
 5003 05c0 DAF10002 		rsbs	r2, r10, #0
 5004 05c4 BA62     		str	r2, [r7, #40]
 5005 05c6 63EB0B03 		sbc	r3, r3, fp
 5006 05ca FB62     		str	r3, [r7, #44]
1213:Core/Src/printf.c ****           }
 5007              		.loc 1 1213 13 discriminator 2
 5008 05cc D7E90A34 		ldrd	r3, [r7, #40]
 5009 05d0 C7E90E34 		strd	r3, [r7, #56]
 5010              	.L339:
1213:Core/Src/printf.c ****           }
 5011              		.loc 1 1213 13 is_stmt 0 discriminator 4
 5012 05d4 BB6E     		ldr	r3, [r7, #104]
 5013 05d6 DB0F     		lsrs	r3, r3, #31
 5014 05d8 DAB2     		uxtb	r2, r3
 5015 05da D7F89430 		ldr	r3, [r7, #148]
 5016 05de 0493     		str	r3, [sp, #16]
 5017 05e0 D7F89030 		ldr	r3, [r7, #144]
 5018 05e4 0393     		str	r3, [sp, #12]
 5019 05e6 D7F88C30 		ldr	r3, [r7, #140]
 5020 05ea 0293     		str	r3, [sp, #8]
 5021 05ec 97F88B30 		ldrb	r3, [r7, #139]	@ zero_extendqisi2
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 111


 5022 05f0 0193     		str	r3, [sp, #4]
 5023 05f2 0092     		str	r2, [sp]
 5024 05f4 D7E90E23 		ldrd	r2, [r7, #56]
 5025 05f8 786D     		ldr	r0, [r7, #84]
 5026 05fa FFF7FEFF 		bl	print_integer
 5027              	.LBE16:
 5028              		.loc 1 1237 9 is_stmt 1
 5029 05fe 23E2     		b	.L281
 5030              	.L327:
1219:Core/Src/printf.c **** 
 5031              		.loc 1 1219 17
 5032 0600 D7F89430 		ldr	r3, [r7, #148]
 5033 0604 23F00C03 		bic	r3, r3, #12
 5034 0608 C7F89430 		str	r3, [r7, #148]
1221:Core/Src/printf.c **** #if PRINTF_SUPPORT_LONG_LONG
 5035              		.loc 1 1221 21
 5036 060c D7F89430 		ldr	r3, [r7, #148]
 5037 0610 03F48063 		and	r3, r3, #1024
1221:Core/Src/printf.c **** #if PRINTF_SUPPORT_LONG_LONG
 5038              		.loc 1 1221 14
 5039 0614 002B     		cmp	r3, #0
 5040 0616 1CD0     		beq	.L340
1223:Core/Src/printf.c **** #endif
 5041              		.loc 1 1223 13
 5042 0618 FB6C     		ldr	r3, [r7, #76]
 5043 061a 0733     		adds	r3, r3, #7
 5044 061c 23F00702 		bic	r2, r3, #7
 5045 0620 02F10803 		add	r3, r2, #8
 5046 0624 FB64     		str	r3, [r7, #76]
 5047 0626 D2E90001 		ldrd	r0, [r2]
1223:Core/Src/printf.c **** #endif
 5048              		.loc 1 1223 13 is_stmt 0 discriminator 1
 5049 062a D7F89430 		ldr	r3, [r7, #148]
 5050 062e 0493     		str	r3, [sp, #16]
 5051 0630 D7F89030 		ldr	r3, [r7, #144]
 5052 0634 0393     		str	r3, [sp, #12]
 5053 0636 D7F88C30 		ldr	r3, [r7, #140]
 5054 063a 0293     		str	r3, [sp, #8]
 5055 063c 97F88B30 		ldrb	r3, [r7, #139]	@ zero_extendqisi2
 5056 0640 0193     		str	r3, [sp, #4]
 5057 0642 0023     		movs	r3, #0
 5058 0644 0093     		str	r3, [sp]
 5059 0646 0246     		mov	r2, r0
 5060 0648 0B46     		mov	r3, r1
 5061 064a 786D     		ldr	r0, [r7, #84]
 5062 064c FFF7FEFF 		bl	print_integer
 5063              		.loc 1 1237 9 is_stmt 1
 5064 0650 FAE1     		b	.L281
 5065              	.L340:
1226:Core/Src/printf.c ****             print_integer(output, (printf_unsigned_value_t) va_arg(args, unsigned long), false, bas
 5066              		.loc 1 1226 26
 5067 0652 D7F89430 		ldr	r3, [r7, #148]
 5068 0656 03F40073 		and	r3, r3, #512
1226:Core/Src/printf.c ****             print_integer(output, (printf_unsigned_value_t) va_arg(args, unsigned long), false, bas
 5069              		.loc 1 1226 19
 5070 065a 002B     		cmp	r3, #0
 5071 065c 1AD0     		beq	.L341
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 112


1227:Core/Src/printf.c ****           }
 5072              		.loc 1 1227 61
 5073 065e FA6C     		ldr	r2, [r7, #76]
 5074 0660 131D     		adds	r3, r2, #4
 5075 0662 FB64     		str	r3, [r7, #76]
 5076 0664 1368     		ldr	r3, [r2]
1227:Core/Src/printf.c ****           }
 5077              		.loc 1 1227 13 discriminator 1
 5078 0666 0022     		movs	r2, #0
 5079 0668 3B62     		str	r3, [r7, #32]
 5080 066a 7A62     		str	r2, [r7, #36]
 5081 066c D7F89430 		ldr	r3, [r7, #148]
 5082 0670 0493     		str	r3, [sp, #16]
 5083 0672 D7F89030 		ldr	r3, [r7, #144]
 5084 0676 0393     		str	r3, [sp, #12]
 5085 0678 D7F88C30 		ldr	r3, [r7, #140]
 5086 067c 0293     		str	r3, [sp, #8]
 5087 067e 97F88B30 		ldrb	r3, [r7, #139]	@ zero_extendqisi2
 5088 0682 0193     		str	r3, [sp, #4]
 5089 0684 0023     		movs	r3, #0
 5090 0686 0093     		str	r3, [sp]
 5091 0688 D7E90823 		ldrd	r2, [r7, #32]
 5092 068c 786D     		ldr	r0, [r7, #84]
 5093 068e FFF7FEFF 		bl	print_integer
 5094              		.loc 1 1237 9
 5095 0692 D9E1     		b	.L281
 5096              	.L341:
 5097              	.LBB17:
1231:Core/Src/printf.c ****               (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(args, unsigned int) :
 5098              		.loc 1 1231 22
 5099 0694 D7F89430 		ldr	r3, [r7, #148]
 5100 0698 03F04003 		and	r3, r3, #64
1231:Core/Src/printf.c ****               (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(args, unsigned int) :
 5101              		.loc 1 1231 80
 5102 069c 002B     		cmp	r3, #0
 5103 069e 05D0     		beq	.L342
1231:Core/Src/printf.c ****               (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(args, unsigned int) :
 5104              		.loc 1 1231 53 discriminator 1
 5105 06a0 FA6C     		ldr	r2, [r7, #76]
 5106 06a2 131D     		adds	r3, r2, #4
 5107 06a4 FB64     		str	r3, [r7, #76]
 5108 06a6 1368     		ldr	r3, [r2]
1231:Core/Src/printf.c ****               (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(args, unsigned int) :
 5109              		.loc 1 1231 38 discriminator 1
 5110 06a8 DBB2     		uxtb	r3, r3
 5111 06aa 0FE0     		b	.L343
 5112              	.L342:
1232:Core/Src/printf.c ****               va_arg(args, unsigned int);
 5113              		.loc 1 1232 22
 5114 06ac D7F89430 		ldr	r3, [r7, #148]
 5115 06b0 03F08003 		and	r3, r3, #128
1232:Core/Src/printf.c ****               va_arg(args, unsigned int);
 5116              		.loc 1 1232 86
 5117 06b4 002B     		cmp	r3, #0
 5118 06b6 05D0     		beq	.L344
1232:Core/Src/printf.c ****               va_arg(args, unsigned int);
 5119              		.loc 1 1232 59 discriminator 1
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 113


 5120 06b8 FA6C     		ldr	r2, [r7, #76]
 5121 06ba 131D     		adds	r3, r2, #4
 5122 06bc FB64     		str	r3, [r7, #76]
 5123 06be 1368     		ldr	r3, [r2]
1232:Core/Src/printf.c ****               va_arg(args, unsigned int);
 5124              		.loc 1 1232 39 discriminator 1
 5125 06c0 9BB2     		uxth	r3, r3
 5126 06c2 03E0     		b	.L343
 5127              	.L344:
1232:Core/Src/printf.c ****               va_arg(args, unsigned int);
 5128              		.loc 1 1232 86 discriminator 2
 5129 06c4 FA6C     		ldr	r2, [r7, #76]
 5130 06c6 131D     		adds	r3, r2, #4
 5131 06c8 FB64     		str	r3, [r7, #76]
 5132 06ca 1368     		ldr	r3, [r2]
 5133              	.L343:
1230:Core/Src/printf.c ****               (flags & FLAGS_CHAR) ? (unsigned char)va_arg(args, unsigned int) :
 5134              		.loc 1 1230 32
 5135 06cc FB66     		str	r3, [r7, #108]
1234:Core/Src/printf.c ****           }
 5136              		.loc 1 1234 13
 5137 06ce FB6E     		ldr	r3, [r7, #108]
 5138 06d0 0022     		movs	r2, #0
 5139 06d2 BB61     		str	r3, [r7, #24]
 5140 06d4 FA61     		str	r2, [r7, #28]
 5141 06d6 D7F89430 		ldr	r3, [r7, #148]
 5142 06da 0493     		str	r3, [sp, #16]
 5143 06dc D7F89030 		ldr	r3, [r7, #144]
 5144 06e0 0393     		str	r3, [sp, #12]
 5145 06e2 D7F88C30 		ldr	r3, [r7, #140]
 5146 06e6 0293     		str	r3, [sp, #8]
 5147 06e8 97F88B30 		ldrb	r3, [r7, #139]	@ zero_extendqisi2
 5148 06ec 0193     		str	r3, [sp, #4]
 5149 06ee 0023     		movs	r3, #0
 5150 06f0 0093     		str	r3, [sp]
 5151 06f2 D7E90623 		ldrd	r2, [r7, #24]
 5152 06f6 786D     		ldr	r0, [r7, #84]
 5153 06f8 FFF7FEFF 		bl	print_integer
 5154              	.LBE17:
 5155              		.loc 1 1237 9
 5156 06fc A4E1     		b	.L281
 5157              	.L315:
 5158              	.LBE13:
1238:Core/Src/printf.c ****       }
1239:Core/Src/printf.c **** #if PRINTF_SUPPORT_DECIMAL_SPECIFIERS
1240:Core/Src/printf.c ****       case 'f' :
1241:Core/Src/printf.c ****       case 'F' :
1242:Core/Src/printf.c ****         if (*format == 'F') flags |= FLAGS_UPPERCASE;
 5159              		.loc 1 1242 13
 5160 06fe 3B6D     		ldr	r3, [r7, #80]
 5161 0700 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5162              		.loc 1 1242 12
 5163 0702 462B     		cmp	r3, #70
 5164 0704 05D1     		bne	.L346
 5165              		.loc 1 1242 35 discriminator 1
 5166 0706 D7F89430 		ldr	r3, [r7, #148]
 5167 070a 43F02003 		orr	r3, r3, #32
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 114


 5168 070e C7F89430 		str	r3, [r7, #148]
 5169              	.L346:
1243:Core/Src/printf.c ****         print_floating_point(output, va_arg(args, double), precision, width, flags, PRINTF_PREFER_D
 5170              		.loc 1 1243 9
 5171 0712 FB6C     		ldr	r3, [r7, #76]
 5172 0714 0733     		adds	r3, r3, #7
 5173 0716 23F00702 		bic	r2, r3, #7
 5174 071a 02F10803 		add	r3, r2, #8
 5175 071e FB64     		str	r3, [r7, #76]
 5176 0720 92ED007B 		vldr.64	d7, [r2]
 5177              		.loc 1 1243 9 is_stmt 0 discriminator 1
 5178 0724 0023     		movs	r3, #0
 5179 0726 0093     		str	r3, [sp]
 5180 0728 D7F89430 		ldr	r3, [r7, #148]
 5181 072c D7F89020 		ldr	r2, [r7, #144]
 5182 0730 D7F88C10 		ldr	r1, [r7, #140]
 5183 0734 B0EE470A 		vmov.f32	s0, s14
 5184 0738 F0EE670A 		vmov.f32	s1, s15
 5185 073c 786D     		ldr	r0, [r7, #84]
 5186 073e FFF7FEFF 		bl	print_floating_point
1244:Core/Src/printf.c ****         format++;
 5187              		.loc 1 1244 15 is_stmt 1
 5188 0742 3B6D     		ldr	r3, [r7, #80]
 5189 0744 0133     		adds	r3, r3, #1
 5190 0746 3B65     		str	r3, [r7, #80]
1245:Core/Src/printf.c ****         break;
 5191              		.loc 1 1245 9
 5192 0748 7EE1     		b	.L281
 5193              	.L314:
1246:Core/Src/printf.c **** #endif
1247:Core/Src/printf.c **** #if PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS
1248:Core/Src/printf.c ****       case 'e':
1249:Core/Src/printf.c ****       case 'E':
1250:Core/Src/printf.c ****       case 'g':
1251:Core/Src/printf.c ****       case 'G':
1252:Core/Src/printf.c ****         if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 5194              		.loc 1 1252 14
 5195 074a 3B6D     		ldr	r3, [r7, #80]
 5196 074c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5197              		.loc 1 1252 12
 5198 074e 672B     		cmp	r3, #103
 5199 0750 03D0     		beq	.L347
 5200              		.loc 1 1252 32 discriminator 2
 5201 0752 3B6D     		ldr	r3, [r7, #80]
 5202 0754 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5203              		.loc 1 1252 29 discriminator 2
 5204 0756 472B     		cmp	r3, #71
 5205 0758 05D1     		bne	.L348
 5206              	.L347:
 5207              		.loc 1 1252 55 discriminator 3
 5208 075a D7F89430 		ldr	r3, [r7, #148]
 5209 075e 43F48053 		orr	r3, r3, #4096
 5210 0762 C7F89430 		str	r3, [r7, #148]
 5211              	.L348:
1253:Core/Src/printf.c ****         if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 5212              		.loc 1 1253 14
 5213 0766 3B6D     		ldr	r3, [r7, #80]
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 115


 5214 0768 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5215              		.loc 1 1253 12
 5216 076a 452B     		cmp	r3, #69
 5217 076c 03D0     		beq	.L349
 5218              		.loc 1 1253 32 discriminator 2
 5219 076e 3B6D     		ldr	r3, [r7, #80]
 5220 0770 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5221              		.loc 1 1253 29 discriminator 2
 5222 0772 472B     		cmp	r3, #71
 5223 0774 05D1     		bne	.L350
 5224              	.L349:
 5225              		.loc 1 1253 55 discriminator 3
 5226 0776 D7F89430 		ldr	r3, [r7, #148]
 5227 077a 43F02003 		orr	r3, r3, #32
 5228 077e C7F89430 		str	r3, [r7, #148]
 5229              	.L350:
1254:Core/Src/printf.c ****         print_floating_point(output, va_arg(args, double), precision, width, flags, PRINTF_PREFER_E
 5230              		.loc 1 1254 9
 5231 0782 FB6C     		ldr	r3, [r7, #76]
 5232 0784 0733     		adds	r3, r3, #7
 5233 0786 23F00702 		bic	r2, r3, #7
 5234 078a 02F10803 		add	r3, r2, #8
 5235 078e FB64     		str	r3, [r7, #76]
 5236 0790 92ED007B 		vldr.64	d7, [r2]
 5237              		.loc 1 1254 9 is_stmt 0 discriminator 1
 5238 0794 0123     		movs	r3, #1
 5239 0796 0093     		str	r3, [sp]
 5240 0798 D7F89430 		ldr	r3, [r7, #148]
 5241 079c D7F89020 		ldr	r2, [r7, #144]
 5242 07a0 D7F88C10 		ldr	r1, [r7, #140]
 5243 07a4 B0EE470A 		vmov.f32	s0, s14
 5244 07a8 F0EE670A 		vmov.f32	s1, s15
 5245 07ac 786D     		ldr	r0, [r7, #84]
 5246 07ae FFF7FEFF 		bl	print_floating_point
1255:Core/Src/printf.c ****         format++;
 5247              		.loc 1 1255 15 is_stmt 1
 5248 07b2 3B6D     		ldr	r3, [r7, #80]
 5249 07b4 0133     		adds	r3, r3, #1
 5250 07b6 3B65     		str	r3, [r7, #80]
1256:Core/Src/printf.c ****         break;
 5251              		.loc 1 1256 9
 5252 07b8 46E1     		b	.L281
 5253              	.L316:
 5254              	.LBB18:
1257:Core/Src/printf.c **** #endif  // PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS
1258:Core/Src/printf.c ****       case 'c' : {
1259:Core/Src/printf.c ****         printf_size_t l = 1U;
 5255              		.loc 1 1259 23
 5256 07ba 0123     		movs	r3, #1
 5257 07bc C7F88430 		str	r3, [r7, #132]
1260:Core/Src/printf.c ****         // pre padding
1261:Core/Src/printf.c ****         if (!(flags & FLAGS_LEFT)) {
 5258              		.loc 1 1261 21
 5259 07c0 D7F89430 		ldr	r3, [r7, #148]
 5260 07c4 03F00203 		and	r3, r3, #2
 5261              		.loc 1 1261 12
 5262 07c8 002B     		cmp	r3, #0
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 116


 5263 07ca 0DD1     		bne	.L351
1262:Core/Src/printf.c ****           while (l++ < width) {
 5264              		.loc 1 1262 17
 5265 07cc 03E0     		b	.L352
 5266              	.L353:
1263:Core/Src/printf.c ****             putchar_via_gadget(output, ' ');
 5267              		.loc 1 1263 13
 5268 07ce 2021     		movs	r1, #32
 5269 07d0 786D     		ldr	r0, [r7, #84]
 5270 07d2 FFF7FEFF 		bl	putchar_via_gadget
 5271              	.L352:
1262:Core/Src/printf.c ****           while (l++ < width) {
 5272              		.loc 1 1262 19
 5273 07d6 D7F88420 		ldr	r2, [r7, #132]
 5274 07da 531C     		adds	r3, r2, #1
 5275 07dc C7F88430 		str	r3, [r7, #132]
1262:Core/Src/printf.c ****           while (l++ < width) {
 5276              		.loc 1 1262 22
 5277 07e0 D7F89030 		ldr	r3, [r7, #144]
 5278 07e4 9342     		cmp	r3, r2
 5279 07e6 F2D8     		bhi	.L353
 5280              	.L351:
1264:Core/Src/printf.c ****           }
1265:Core/Src/printf.c ****         }
1266:Core/Src/printf.c ****         // char output
1267:Core/Src/printf.c ****         putchar_via_gadget(output, (char) va_arg(args, int) );
 5281              		.loc 1 1267 43
 5282 07e8 FA6C     		ldr	r2, [r7, #76]
 5283 07ea 131D     		adds	r3, r2, #4
 5284 07ec FB64     		str	r3, [r7, #76]
 5285 07ee 1368     		ldr	r3, [r2]
 5286              		.loc 1 1267 9 discriminator 1
 5287 07f0 DBB2     		uxtb	r3, r3
 5288 07f2 1946     		mov	r1, r3
 5289 07f4 786D     		ldr	r0, [r7, #84]
 5290 07f6 FFF7FEFF 		bl	putchar_via_gadget
1268:Core/Src/printf.c ****         // post padding
1269:Core/Src/printf.c ****         if (flags & FLAGS_LEFT) {
 5291              		.loc 1 1269 19
 5292 07fa D7F89430 		ldr	r3, [r7, #148]
 5293 07fe 03F00203 		and	r3, r3, #2
 5294              		.loc 1 1269 12
 5295 0802 002B     		cmp	r3, #0
 5296 0804 0DD0     		beq	.L354
1270:Core/Src/printf.c ****           while (l++ < width) {
 5297              		.loc 1 1270 17
 5298 0806 03E0     		b	.L355
 5299              	.L356:
1271:Core/Src/printf.c ****             putchar_via_gadget(output, ' ');
 5300              		.loc 1 1271 13
 5301 0808 2021     		movs	r1, #32
 5302 080a 786D     		ldr	r0, [r7, #84]
 5303 080c FFF7FEFF 		bl	putchar_via_gadget
 5304              	.L355:
1270:Core/Src/printf.c ****           while (l++ < width) {
 5305              		.loc 1 1270 19
 5306 0810 D7F88420 		ldr	r2, [r7, #132]
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 117


 5307 0814 531C     		adds	r3, r2, #1
 5308 0816 C7F88430 		str	r3, [r7, #132]
1270:Core/Src/printf.c ****           while (l++ < width) {
 5309              		.loc 1 1270 22
 5310 081a D7F89030 		ldr	r3, [r7, #144]
 5311 081e 9342     		cmp	r3, r2
 5312 0820 F2D8     		bhi	.L356
 5313              	.L354:
1272:Core/Src/printf.c ****           }
1273:Core/Src/printf.c ****         }
1274:Core/Src/printf.c ****         format++;
 5314              		.loc 1 1274 15
 5315 0822 3B6D     		ldr	r3, [r7, #80]
 5316 0824 0133     		adds	r3, r3, #1
 5317 0826 3B65     		str	r3, [r7, #80]
1275:Core/Src/printf.c ****         break;
 5318              		.loc 1 1275 9
 5319 0828 0EE1     		b	.L281
 5320              	.L311:
 5321              	.LBE18:
 5322              	.LBB19:
1276:Core/Src/printf.c ****       }
1277:Core/Src/printf.c **** 
1278:Core/Src/printf.c ****       case 's' : {
1279:Core/Src/printf.c ****         const char* p = va_arg(args, char*);
 5323              		.loc 1 1279 21
 5324 082a FA6C     		ldr	r2, [r7, #76]
 5325 082c 131D     		adds	r3, r2, #4
 5326 082e FB64     		str	r3, [r7, #76]
 5327 0830 1368     		ldr	r3, [r2]
 5328 0832 C7F88030 		str	r3, [r7, #128]
1280:Core/Src/printf.c ****         if (p == NULL) {
 5329              		.loc 1 1280 12
 5330 0836 D7F88030 		ldr	r3, [r7, #128]
 5331 083a 002B     		cmp	r3, #0
 5332 083c 0AD1     		bne	.L357
1281:Core/Src/printf.c ****           out_rev_(output, ")llun(", 6, width, flags);
 5333              		.loc 1 1281 11
 5334 083e D7F89430 		ldr	r3, [r7, #148]
 5335 0842 0093     		str	r3, [sp]
 5336 0844 D7F89030 		ldr	r3, [r7, #144]
 5337 0848 0622     		movs	r2, #6
 5338 084a 8449     		ldr	r1, .L383
 5339 084c 786D     		ldr	r0, [r7, #84]
 5340 084e FFF7FEFF 		bl	out_rev_
 5341 0852 5EE0     		b	.L358
 5342              	.L357:
 5343              	.LBB20:
1282:Core/Src/printf.c ****         }
1283:Core/Src/printf.c ****         else {
1284:Core/Src/printf.c ****           printf_size_t l = strnlen_s_(p, precision ? precision : PRINTF_MAX_POSSIBLE_BUFFER_SIZE);
 5344              		.loc 1 1284 29
 5345 0854 D7F88C30 		ldr	r3, [r7, #140]
 5346 0858 002B     		cmp	r3, #0
 5347 085a 02D0     		beq	.L359
 5348              		.loc 1 1284 29 is_stmt 0 discriminator 1
 5349 085c D7F88C30 		ldr	r3, [r7, #140]
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 118


 5350 0860 01E0     		b	.L360
 5351              	.L359:
 5352              		.loc 1 1284 29 discriminator 2
 5353 0862 6FF00043 		mvn	r3, #-2147483648
 5354              	.L360:
 5355              		.loc 1 1284 29 discriminator 4
 5356 0866 1946     		mov	r1, r3
 5357 0868 D7F88000 		ldr	r0, [r7, #128]
 5358 086c FFF7FEFF 		bl	strnlen_s_
 5359 0870 F867     		str	r0, [r7, #124]
1285:Core/Src/printf.c ****           // pre padding
1286:Core/Src/printf.c ****           if (flags & FLAGS_PRECISION) {
 5360              		.loc 1 1286 21 is_stmt 1
 5361 0872 D7F89430 		ldr	r3, [r7, #148]
 5362 0876 03F40063 		and	r3, r3, #2048
 5363              		.loc 1 1286 14
 5364 087a 002B     		cmp	r3, #0
 5365 087c 06D0     		beq	.L361
1287:Core/Src/printf.c ****             l = (l < precision ? l : precision);
 5366              		.loc 1 1287 15
 5367 087e FA6F     		ldr	r2, [r7, #124]
 5368 0880 D7F88C30 		ldr	r3, [r7, #140]
 5369 0884 9342     		cmp	r3, r2
 5370 0886 28BF     		it	cs
 5371 0888 1346     		movcs	r3, r2
 5372 088a FB67     		str	r3, [r7, #124]
 5373              	.L361:
1288:Core/Src/printf.c ****           }
1289:Core/Src/printf.c ****           if (!(flags & FLAGS_LEFT)) {
 5374              		.loc 1 1289 23
 5375 088c D7F89430 		ldr	r3, [r7, #148]
 5376 0890 03F00203 		and	r3, r3, #2
 5377              		.loc 1 1289 14
 5378 0894 002B     		cmp	r3, #0
 5379 0896 1BD1     		bne	.L365
1290:Core/Src/printf.c ****             while (l++ < width) {
 5380              		.loc 1 1290 19
 5381 0898 03E0     		b	.L363
 5382              	.L364:
1291:Core/Src/printf.c ****               putchar_via_gadget(output, ' ');
 5383              		.loc 1 1291 15
 5384 089a 2021     		movs	r1, #32
 5385 089c 786D     		ldr	r0, [r7, #84]
 5386 089e FFF7FEFF 		bl	putchar_via_gadget
 5387              	.L363:
1290:Core/Src/printf.c ****             while (l++ < width) {
 5388              		.loc 1 1290 21
 5389 08a2 FA6F     		ldr	r2, [r7, #124]
 5390 08a4 531C     		adds	r3, r2, #1
 5391 08a6 FB67     		str	r3, [r7, #124]
1290:Core/Src/printf.c ****             while (l++ < width) {
 5392              		.loc 1 1290 24
 5393 08a8 D7F89030 		ldr	r3, [r7, #144]
 5394 08ac 9342     		cmp	r3, r2
 5395 08ae F4D8     		bhi	.L364
1292:Core/Src/printf.c ****             }
1293:Core/Src/printf.c ****           }
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 119


1294:Core/Src/printf.c ****           // string output
1295:Core/Src/printf.c ****           while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision)) {
 5396              		.loc 1 1295 17
 5397 08b0 0EE0     		b	.L365
 5398              	.L367:
1296:Core/Src/printf.c ****             putchar_via_gadget(output, *(p++));
 5399              		.loc 1 1296 43
 5400 08b2 D7F88020 		ldr	r2, [r7, #128]
 5401 08b6 531C     		adds	r3, r2, #1
 5402 08b8 C7F88030 		str	r3, [r7, #128]
 5403              		.loc 1 1296 13
 5404 08bc 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 5405 08be 1946     		mov	r1, r3
 5406 08c0 786D     		ldr	r0, [r7, #84]
 5407 08c2 FFF7FEFF 		bl	putchar_via_gadget
1297:Core/Src/printf.c ****             --precision;
 5408              		.loc 1 1297 13
 5409 08c6 D7F88C30 		ldr	r3, [r7, #140]
 5410 08ca 013B     		subs	r3, r3, #1
 5411 08cc C7F88C30 		str	r3, [r7, #140]
 5412              	.L365:
1295:Core/Src/printf.c ****             putchar_via_gadget(output, *(p++));
 5413              		.loc 1 1295 19
 5414 08d0 D7F88030 		ldr	r3, [r7, #128]
 5415 08d4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
1295:Core/Src/printf.c ****             putchar_via_gadget(output, *(p++));
 5416              		.loc 1 1295 28
 5417 08d6 002B     		cmp	r3, #0
 5418 08d8 09D0     		beq	.L366
1295:Core/Src/printf.c ****             putchar_via_gadget(output, *(p++));
 5419              		.loc 1 1295 40 discriminator 1
 5420 08da D7F89430 		ldr	r3, [r7, #148]
 5421 08de 03F40063 		and	r3, r3, #2048
1295:Core/Src/printf.c ****             putchar_via_gadget(output, *(p++));
 5422              		.loc 1 1295 28 discriminator 1
 5423 08e2 002B     		cmp	r3, #0
 5424 08e4 E5D0     		beq	.L367
1295:Core/Src/printf.c ****             putchar_via_gadget(output, *(p++));
 5425              		.loc 1 1295 59 discriminator 2
 5426 08e6 D7F88C30 		ldr	r3, [r7, #140]
 5427 08ea 002B     		cmp	r3, #0
 5428 08ec E1D1     		bne	.L367
 5429              	.L366:
1298:Core/Src/printf.c ****           }
1299:Core/Src/printf.c ****           // post padding
1300:Core/Src/printf.c ****           if (flags & FLAGS_LEFT) {
 5430              		.loc 1 1300 21
 5431 08ee D7F89430 		ldr	r3, [r7, #148]
 5432 08f2 03F00203 		and	r3, r3, #2
 5433              		.loc 1 1300 14
 5434 08f6 002B     		cmp	r3, #0
 5435 08f8 0BD0     		beq	.L358
1301:Core/Src/printf.c ****             while (l++ < width) {
 5436              		.loc 1 1301 19
 5437 08fa 03E0     		b	.L368
 5438              	.L369:
1302:Core/Src/printf.c ****               putchar_via_gadget(output, ' ');
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 120


 5439              		.loc 1 1302 15
 5440 08fc 2021     		movs	r1, #32
 5441 08fe 786D     		ldr	r0, [r7, #84]
 5442 0900 FFF7FEFF 		bl	putchar_via_gadget
 5443              	.L368:
1301:Core/Src/printf.c ****             while (l++ < width) {
 5444              		.loc 1 1301 21
 5445 0904 FA6F     		ldr	r2, [r7, #124]
 5446 0906 531C     		adds	r3, r2, #1
 5447 0908 FB67     		str	r3, [r7, #124]
1301:Core/Src/printf.c ****             while (l++ < width) {
 5448              		.loc 1 1301 24
 5449 090a D7F89030 		ldr	r3, [r7, #144]
 5450 090e 9342     		cmp	r3, r2
 5451 0910 F4D8     		bhi	.L369
 5452              	.L358:
 5453              	.LBE20:
1303:Core/Src/printf.c ****             }
1304:Core/Src/printf.c ****           }
1305:Core/Src/printf.c ****         }
1306:Core/Src/printf.c ****         format++;
 5454              		.loc 1 1306 15
 5455 0912 3B6D     		ldr	r3, [r7, #80]
 5456 0914 0133     		adds	r3, r3, #1
 5457 0916 3B65     		str	r3, [r7, #80]
1307:Core/Src/printf.c ****         break;
 5458              		.loc 1 1307 9
 5459 0918 96E0     		b	.L281
 5460              	.L312:
 5461              	.LBE19:
 5462              	.LBB21:
1308:Core/Src/printf.c ****       }
1309:Core/Src/printf.c **** 
1310:Core/Src/printf.c ****       case 'p' : {
1311:Core/Src/printf.c ****         width = sizeof(void*) * 2U + 2; // 2 hex chars per byte + the "0x" prefix
 5463              		.loc 1 1311 15
 5464 091a 0A23     		movs	r3, #10
 5465 091c C7F89030 		str	r3, [r7, #144]
1312:Core/Src/printf.c ****         flags |= FLAGS_ZEROPAD | FLAGS_POINTER;
 5466              		.loc 1 1312 15
 5467 0920 D7F89430 		ldr	r3, [r7, #148]
 5468 0924 43F40053 		orr	r3, r3, #8192
 5469 0928 43F00103 		orr	r3, r3, #1
 5470 092c C7F89430 		str	r3, [r7, #148]
1313:Core/Src/printf.c ****         uintptr_t value = (uintptr_t)va_arg(args, void*);
 5471              		.loc 1 1313 38
 5472 0930 FA6C     		ldr	r2, [r7, #76]
 5473 0932 131D     		adds	r3, r2, #4
 5474 0934 FB64     		str	r3, [r7, #76]
 5475 0936 1368     		ldr	r3, [r2]
 5476              		.loc 1 1313 19 discriminator 1
 5477 0938 3B67     		str	r3, [r7, #112]
1314:Core/Src/printf.c ****         (value == (uintptr_t) NULL) ?
1315:Core/Src/printf.c ****           out_rev_(output, ")lin(", 5, width, flags) :
 5478              		.loc 1 1315 54
 5479 093a 3B6F     		ldr	r3, [r7, #112]
 5480 093c 002B     		cmp	r3, #0
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 121


 5481 093e 0AD1     		bne	.L370
 5482              		.loc 1 1315 11 discriminator 1
 5483 0940 D7F89430 		ldr	r3, [r7, #148]
 5484 0944 0093     		str	r3, [sp]
 5485 0946 D7F89030 		ldr	r3, [r7, #144]
 5486 094a 0522     		movs	r2, #5
 5487 094c 4449     		ldr	r1, .L383+4
 5488 094e 786D     		ldr	r0, [r7, #84]
 5489 0950 FFF7FEFF 		bl	out_rev_
 5490 0954 15E0     		b	.L371
 5491              	.L370:
1316:Core/Src/printf.c ****           print_integer(output, (printf_unsigned_value_t) value, false, BASE_HEX, precision, width,
 5492              		.loc 1 1316 11
 5493 0956 3B6F     		ldr	r3, [r7, #112]
 5494 0958 0022     		movs	r2, #0
 5495 095a 3B61     		str	r3, [r7, #16]
 5496 095c 7A61     		str	r2, [r7, #20]
 5497 095e D7F89430 		ldr	r3, [r7, #148]
 5498 0962 0493     		str	r3, [sp, #16]
 5499 0964 D7F89030 		ldr	r3, [r7, #144]
 5500 0968 0393     		str	r3, [sp, #12]
 5501 096a D7F88C30 		ldr	r3, [r7, #140]
 5502 096e 0293     		str	r3, [sp, #8]
 5503 0970 1023     		movs	r3, #16
 5504 0972 0193     		str	r3, [sp, #4]
 5505 0974 0023     		movs	r3, #0
 5506 0976 0093     		str	r3, [sp]
 5507 0978 D7E90423 		ldrd	r2, [r7, #16]
 5508 097c 786D     		ldr	r0, [r7, #84]
 5509 097e FFF7FEFF 		bl	print_integer
 5510              	.L371:
1317:Core/Src/printf.c ****         format++;
 5511              		.loc 1 1317 15
 5512 0982 3B6D     		ldr	r3, [r7, #80]
 5513 0984 0133     		adds	r3, r3, #1
 5514 0986 3B65     		str	r3, [r7, #80]
1318:Core/Src/printf.c ****         break;
 5515              		.loc 1 1318 9
 5516 0988 5EE0     		b	.L281
 5517              	.L317:
 5518              	.LBE21:
1319:Core/Src/printf.c ****       }
1320:Core/Src/printf.c **** 
1321:Core/Src/printf.c ****       case '%' :
1322:Core/Src/printf.c ****         putchar_via_gadget(output, '%');
 5519              		.loc 1 1322 9
 5520 098a 2521     		movs	r1, #37
 5521 098c 786D     		ldr	r0, [r7, #84]
 5522 098e FFF7FEFF 		bl	putchar_via_gadget
1323:Core/Src/printf.c ****         format++;
 5523              		.loc 1 1323 15
 5524 0992 3B6D     		ldr	r3, [r7, #80]
 5525 0994 0133     		adds	r3, r3, #1
 5526 0996 3B65     		str	r3, [r7, #80]
1324:Core/Src/printf.c ****         break;
 5527              		.loc 1 1324 9
 5528 0998 56E0     		b	.L281
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 122


 5529              	.L313:
1325:Core/Src/printf.c **** 
1326:Core/Src/printf.c ****       // Many people prefer to disable support for %n, as it lets the caller
1327:Core/Src/printf.c ****       // engineer a write to an arbitrary location, of a value the caller
1328:Core/Src/printf.c ****       // effectively controls - which could be a security concern in some cases.
1329:Core/Src/printf.c **** #if PRINTF_SUPPORT_WRITEBACK_SPECIFIER
1330:Core/Src/printf.c ****       case 'n' : {
1331:Core/Src/printf.c ****         if       (flags & FLAGS_CHAR)      *(va_arg(args, char*))      = (char) output->pos;
 5530              		.loc 1 1331 25
 5531 099a D7F89430 		ldr	r3, [r7, #148]
 5532 099e 03F04003 		and	r3, r3, #64
 5533              		.loc 1 1331 18
 5534 09a2 002B     		cmp	r3, #0
 5535 09a4 08D0     		beq	.L372
 5536              		.loc 1 1331 87 discriminator 1
 5537 09a6 7B6D     		ldr	r3, [r7, #84]
 5538 09a8 D968     		ldr	r1, [r3, #12]
 5539              		.loc 1 1331 46 discriminator 1
 5540 09aa FA6C     		ldr	r2, [r7, #76]
 5541 09ac 131D     		adds	r3, r2, #4
 5542 09ae FB64     		str	r3, [r7, #76]
 5543 09b0 1268     		ldr	r2, [r2]
 5544              		.loc 1 1331 74 discriminator 1
 5545 09b2 CBB2     		uxtb	r3, r1
 5546              		.loc 1 1331 72 discriminator 1
 5547 09b4 1370     		strb	r3, [r2]
 5548 09b6 39E0     		b	.L373
 5549              	.L372:
1332:Core/Src/printf.c ****         else if  (flags & FLAGS_SHORT)     *(va_arg(args, short*))     = (short) output->pos;
 5550              		.loc 1 1332 25
 5551 09b8 D7F89430 		ldr	r3, [r7, #148]
 5552 09bc 03F08003 		and	r3, r3, #128
 5553              		.loc 1 1332 18
 5554 09c0 002B     		cmp	r3, #0
 5555 09c2 08D0     		beq	.L374
 5556              		.loc 1 1332 88 discriminator 1
 5557 09c4 7B6D     		ldr	r3, [r7, #84]
 5558 09c6 D968     		ldr	r1, [r3, #12]
 5559              		.loc 1 1332 46 discriminator 1
 5560 09c8 FA6C     		ldr	r2, [r7, #76]
 5561 09ca 131D     		adds	r3, r2, #4
 5562 09cc FB64     		str	r3, [r7, #76]
 5563 09ce 1268     		ldr	r2, [r2]
 5564              		.loc 1 1332 74 discriminator 1
 5565 09d0 0BB2     		sxth	r3, r1
 5566              		.loc 1 1332 72 discriminator 1
 5567 09d2 1380     		strh	r3, [r2]	@ movhi
 5568 09d4 2AE0     		b	.L373
 5569              	.L374:
1333:Core/Src/printf.c ****         else if  (flags & FLAGS_LONG)      *(va_arg(args, long*))      = (long) output->pos;
 5570              		.loc 1 1333 25
 5571 09d6 D7F89430 		ldr	r3, [r7, #148]
 5572 09da 03F40073 		and	r3, r3, #512
 5573              		.loc 1 1333 18
 5574 09de 002B     		cmp	r3, #0
 5575 09e0 08D0     		beq	.L375
 5576              		.loc 1 1333 87 discriminator 1
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 123


 5577 09e2 7B6D     		ldr	r3, [r7, #84]
 5578 09e4 D968     		ldr	r1, [r3, #12]
 5579              		.loc 1 1333 46 discriminator 1
 5580 09e6 FA6C     		ldr	r2, [r7, #76]
 5581 09e8 131D     		adds	r3, r2, #4
 5582 09ea FB64     		str	r3, [r7, #76]
 5583 09ec 1268     		ldr	r2, [r2]
 5584              		.loc 1 1333 74 discriminator 1
 5585 09ee 0B46     		mov	r3, r1
 5586              		.loc 1 1333 72 discriminator 1
 5587 09f0 1360     		str	r3, [r2]
 5588 09f2 1BE0     		b	.L373
 5589              	.L375:
1334:Core/Src/printf.c **** #if PRINTF_SUPPORT_LONG_LONG
1335:Core/Src/printf.c ****         else if  (flags & FLAGS_LONG_LONG) *(va_arg(args, long long*)) = (long long int) output->po
 5590              		.loc 1 1335 25
 5591 09f4 D7F89430 		ldr	r3, [r7, #148]
 5592 09f8 03F48063 		and	r3, r3, #1024
 5593              		.loc 1 1335 18
 5594 09fc 002B     		cmp	r3, #0
 5595 09fe 0DD0     		beq	.L376
 5596              		.loc 1 1335 96 discriminator 1
 5597 0a00 7B6D     		ldr	r3, [r7, #84]
 5598 0a02 D968     		ldr	r1, [r3, #12]
 5599              		.loc 1 1335 46 discriminator 1
 5600 0a04 FA6C     		ldr	r2, [r7, #76]
 5601 0a06 131D     		adds	r3, r2, #4
 5602 0a08 FB64     		str	r3, [r7, #76]
 5603 0a0a 1368     		ldr	r3, [r2]
 5604              		.loc 1 1335 74 discriminator 1
 5605 0a0c 0022     		movs	r2, #0
 5606 0a0e B960     		str	r1, [r7, #8]
 5607 0a10 FA60     		str	r2, [r7, #12]
 5608              		.loc 1 1335 72 discriminator 1
 5609 0a12 D7E90212 		ldrd	r1, [r7, #8]
 5610 0a16 C3E90012 		strd	r1, [r3]
 5611 0a1a 07E0     		b	.L373
 5612              	.L376:
1336:Core/Src/printf.c **** #endif // PRINTF_SUPPORT_LONG_LONG
1337:Core/Src/printf.c ****         else                               *(va_arg(args, int*))       = (int) output->pos;
 5613              		.loc 1 1337 86
 5614 0a1c 7B6D     		ldr	r3, [r7, #84]
 5615 0a1e D968     		ldr	r1, [r3, #12]
 5616              		.loc 1 1337 46
 5617 0a20 FA6C     		ldr	r2, [r7, #76]
 5618 0a22 131D     		adds	r3, r2, #4
 5619 0a24 FB64     		str	r3, [r7, #76]
 5620 0a26 1268     		ldr	r2, [r2]
 5621              		.loc 1 1337 74 discriminator 1
 5622 0a28 0B46     		mov	r3, r1
 5623              		.loc 1 1337 72 discriminator 1
 5624 0a2a 1360     		str	r3, [r2]
 5625              	.L373:
1338:Core/Src/printf.c ****         format++;
 5626              		.loc 1 1338 15
 5627 0a2c 3B6D     		ldr	r3, [r7, #80]
 5628 0a2e 0133     		adds	r3, r3, #1
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 124


 5629 0a30 3B65     		str	r3, [r7, #80]
1339:Core/Src/printf.c ****         break;
 5630              		.loc 1 1339 9
 5631 0a32 09E0     		b	.L281
 5632              	.L308:
1340:Core/Src/printf.c ****       }
1341:Core/Src/printf.c **** #endif // PRINTF_SUPPORT_WRITEBACK_SPECIFIER
1342:Core/Src/printf.c **** 
1343:Core/Src/printf.c ****       default :
1344:Core/Src/printf.c ****         putchar_via_gadget(output, *format);
 5633              		.loc 1 1344 9
 5634 0a34 3B6D     		ldr	r3, [r7, #80]
 5635 0a36 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5636 0a38 1946     		mov	r1, r3
 5637 0a3a 786D     		ldr	r0, [r7, #84]
 5638 0a3c FFF7FEFF 		bl	putchar_via_gadget
1345:Core/Src/printf.c ****         format++;
 5639              		.loc 1 1345 15
 5640 0a40 3B6D     		ldr	r3, [r7, #80]
 5641 0a42 0133     		adds	r3, r3, #1
 5642 0a44 3B65     		str	r3, [r7, #80]
1346:Core/Src/printf.c ****         break;
 5643              		.loc 1 1346 9
 5644 0a46 00BF     		nop
 5645              	.L281:
 5646              	.LBE10:
1048:Core/Src/printf.c ****   {
 5647              		.loc 1 1048 10
 5648 0a48 3B6D     		ldr	r3, [r7, #80]
 5649 0a4a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5650 0a4c 002B     		cmp	r3, #0
 5651 0a4e 7FF4E0AA 		bne	.L377
 5652              	.L280:
1347:Core/Src/printf.c ****     }
1348:Core/Src/printf.c ****   }
1349:Core/Src/printf.c **** }
 5653              		.loc 1 1349 1
 5654 0a52 9837     		adds	r7, r7, #152
 5655              	.LCFI161:
 5656              		.cfi_def_cfa_offset 32
 5657 0a54 BD46     		mov	sp, r7
 5658              	.LCFI162:
 5659              		.cfi_def_cfa_register 13
 5660              		@ sp needed
 5661 0a56 BDE8B08F 		pop	{r4, r5, r7, r8, r9, r10, fp, pc}
 5662              	.L384:
 5663 0a5a 00BF     		.align	2
 5664              	.L383:
 5665 0a5c 18000000 		.word	.LC4
 5666 0a60 20000000 		.word	.LC5
 5667              		.cfi_endproc
 5668              	.LFE29:
 5670              		.section	.text.vsnprintf_impl,"ax",%progbits
 5671              		.align	1
 5672              		.syntax unified
 5673              		.thumb
 5674              		.thumb_func
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 125


 5676              	vsnprintf_impl:
 5677              	.LFB30:
1350:Core/Src/printf.c **** 
1351:Core/Src/printf.c **** // internal vsnprintf - used for implementing _all library functions
1352:Core/Src/printf.c **** static int vsnprintf_impl(output_gadget_t* output, const char* format, va_list args)
1353:Core/Src/printf.c **** {
 5678              		.loc 1 1353 1
 5679              		.cfi_startproc
 5680              		@ args = 0, pretend = 0, frame = 16
 5681              		@ frame_needed = 1, uses_anonymous_args = 0
 5682 0000 80B5     		push	{r7, lr}
 5683              	.LCFI163:
 5684              		.cfi_def_cfa_offset 8
 5685              		.cfi_offset 7, -8
 5686              		.cfi_offset 14, -4
 5687 0002 84B0     		sub	sp, sp, #16
 5688              	.LCFI164:
 5689              		.cfi_def_cfa_offset 24
 5690 0004 00AF     		add	r7, sp, #0
 5691              	.LCFI165:
 5692              		.cfi_def_cfa_register 7
 5693 0006 F860     		str	r0, [r7, #12]
 5694 0008 B960     		str	r1, [r7, #8]
 5695 000a 7A60     		str	r2, [r7, #4]
1354:Core/Src/printf.c ****   // Note: The library only calls vsnprintf_impl() with output->pos being 0. However, it is
1355:Core/Src/printf.c ****   // possible to call this function with a non-zero pos value for some "remedial printing".
1356:Core/Src/printf.c ****   format_string_loop(output, format, args);
 5696              		.loc 1 1356 3
 5697 000c 7A68     		ldr	r2, [r7, #4]
 5698 000e B968     		ldr	r1, [r7, #8]
 5699 0010 F868     		ldr	r0, [r7, #12]
 5700 0012 FFF7FEFF 		bl	format_string_loop
1357:Core/Src/printf.c **** 
1358:Core/Src/printf.c ****   // termination
1359:Core/Src/printf.c ****   append_termination_with_gadget(output);
 5701              		.loc 1 1359 3
 5702 0016 F868     		ldr	r0, [r7, #12]
 5703 0018 FFF7FEFF 		bl	append_termination_with_gadget
1360:Core/Src/printf.c **** 
1361:Core/Src/printf.c ****   // return written chars without terminating \0
1362:Core/Src/printf.c ****   return (int)output->pos;
 5704              		.loc 1 1362 21
 5705 001c FB68     		ldr	r3, [r7, #12]
 5706 001e DB68     		ldr	r3, [r3, #12]
1363:Core/Src/printf.c **** }
 5707              		.loc 1 1363 1
 5708 0020 1846     		mov	r0, r3
 5709 0022 1037     		adds	r7, r7, #16
 5710              	.LCFI166:
 5711              		.cfi_def_cfa_offset 8
 5712 0024 BD46     		mov	sp, r7
 5713              	.LCFI167:
 5714              		.cfi_def_cfa_register 13
 5715              		@ sp needed
 5716 0026 80BD     		pop	{r7, pc}
 5717              		.cfi_endproc
 5718              	.LFE30:
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 126


 5720              		.section	.text.vprintf_,"ax",%progbits
 5721              		.align	1
 5722              		.global	vprintf_
 5723              		.syntax unified
 5724              		.thumb
 5725              		.thumb_func
 5727              	vprintf_:
 5728              	.LFB31:
1364:Core/Src/printf.c **** 
1365:Core/Src/printf.c **** ///////////////////////////////////////////////////////////////////////////////
1366:Core/Src/printf.c **** 
1367:Core/Src/printf.c **** int vprintf_(const char* format, va_list arg)
1368:Core/Src/printf.c **** {
 5729              		.loc 1 1368 1
 5730              		.cfi_startproc
 5731              		@ args = 0, pretend = 0, frame = 32
 5732              		@ frame_needed = 1, uses_anonymous_args = 0
 5733 0000 80B5     		push	{r7, lr}
 5734              	.LCFI168:
 5735              		.cfi_def_cfa_offset 8
 5736              		.cfi_offset 7, -8
 5737              		.cfi_offset 14, -4
 5738 0002 88B0     		sub	sp, sp, #32
 5739              	.LCFI169:
 5740              		.cfi_def_cfa_offset 40
 5741 0004 00AF     		add	r7, sp, #0
 5742              	.LCFI170:
 5743              		.cfi_def_cfa_register 7
 5744 0006 7860     		str	r0, [r7, #4]
 5745 0008 3960     		str	r1, [r7]
1369:Core/Src/printf.c ****   output_gadget_t gadget = extern_putchar_gadget();
 5746              		.loc 1 1369 28
 5747 000a 07F10C03 		add	r3, r7, #12
 5748 000e 1846     		mov	r0, r3
 5749 0010 FFF7FEFF 		bl	extern_putchar_gadget
1370:Core/Src/printf.c ****   return vsnprintf_impl(&gadget, format, arg);
 5750              		.loc 1 1370 10
 5751 0014 07F10C03 		add	r3, r7, #12
 5752 0018 3A68     		ldr	r2, [r7]
 5753 001a 7968     		ldr	r1, [r7, #4]
 5754 001c 1846     		mov	r0, r3
 5755 001e FFF7FEFF 		bl	vsnprintf_impl
 5756 0022 0346     		mov	r3, r0
1371:Core/Src/printf.c **** }
 5757              		.loc 1 1371 1
 5758 0024 1846     		mov	r0, r3
 5759 0026 2037     		adds	r7, r7, #32
 5760              	.LCFI171:
 5761              		.cfi_def_cfa_offset 8
 5762 0028 BD46     		mov	sp, r7
 5763              	.LCFI172:
 5764              		.cfi_def_cfa_register 13
 5765              		@ sp needed
 5766 002a 80BD     		pop	{r7, pc}
 5767              		.cfi_endproc
 5768              	.LFE31:
 5770              		.section	.text.vsnprintf_,"ax",%progbits
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 127


 5771              		.align	1
 5772              		.global	vsnprintf_
 5773              		.syntax unified
 5774              		.thumb
 5775              		.thumb_func
 5777              	vsnprintf_:
 5778              	.LFB32:
1372:Core/Src/printf.c **** 
1373:Core/Src/printf.c **** int vsnprintf_(char* s, size_t n, const char* format, va_list arg)
1374:Core/Src/printf.c **** {
 5779              		.loc 1 1374 1
 5780              		.cfi_startproc
 5781              		@ args = 0, pretend = 0, frame = 40
 5782              		@ frame_needed = 1, uses_anonymous_args = 0
 5783 0000 80B5     		push	{r7, lr}
 5784              	.LCFI173:
 5785              		.cfi_def_cfa_offset 8
 5786              		.cfi_offset 7, -8
 5787              		.cfi_offset 14, -4
 5788 0002 8AB0     		sub	sp, sp, #40
 5789              	.LCFI174:
 5790              		.cfi_def_cfa_offset 48
 5791 0004 00AF     		add	r7, sp, #0
 5792              	.LCFI175:
 5793              		.cfi_def_cfa_register 7
 5794 0006 F860     		str	r0, [r7, #12]
 5795 0008 B960     		str	r1, [r7, #8]
 5796 000a 7A60     		str	r2, [r7, #4]
 5797 000c 3B60     		str	r3, [r7]
1375:Core/Src/printf.c ****   output_gadget_t gadget = buffer_gadget(s, n);
 5798              		.loc 1 1375 28
 5799 000e 07F11403 		add	r3, r7, #20
 5800 0012 BA68     		ldr	r2, [r7, #8]
 5801 0014 F968     		ldr	r1, [r7, #12]
 5802 0016 1846     		mov	r0, r3
 5803 0018 FFF7FEFF 		bl	buffer_gadget
1376:Core/Src/printf.c ****   return vsnprintf_impl(&gadget, format, arg);
 5804              		.loc 1 1376 10
 5805 001c 07F11403 		add	r3, r7, #20
 5806 0020 3A68     		ldr	r2, [r7]
 5807 0022 7968     		ldr	r1, [r7, #4]
 5808 0024 1846     		mov	r0, r3
 5809 0026 FFF7FEFF 		bl	vsnprintf_impl
 5810 002a 0346     		mov	r3, r0
1377:Core/Src/printf.c **** }
 5811              		.loc 1 1377 1
 5812 002c 1846     		mov	r0, r3
 5813 002e 2837     		adds	r7, r7, #40
 5814              	.LCFI176:
 5815              		.cfi_def_cfa_offset 8
 5816 0030 BD46     		mov	sp, r7
 5817              	.LCFI177:
 5818              		.cfi_def_cfa_register 13
 5819              		@ sp needed
 5820 0032 80BD     		pop	{r7, pc}
 5821              		.cfi_endproc
 5822              	.LFE32:
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 128


 5824              		.section	.text.vsprintf_,"ax",%progbits
 5825              		.align	1
 5826              		.global	vsprintf_
 5827              		.syntax unified
 5828              		.thumb
 5829              		.thumb_func
 5831              	vsprintf_:
 5832              	.LFB33:
1378:Core/Src/printf.c **** 
1379:Core/Src/printf.c **** int vsprintf_(char* s, const char* format, va_list arg)
1380:Core/Src/printf.c **** {
 5833              		.loc 1 1380 1
 5834              		.cfi_startproc
 5835              		@ args = 0, pretend = 0, frame = 16
 5836              		@ frame_needed = 1, uses_anonymous_args = 0
 5837 0000 80B5     		push	{r7, lr}
 5838              	.LCFI178:
 5839              		.cfi_def_cfa_offset 8
 5840              		.cfi_offset 7, -8
 5841              		.cfi_offset 14, -4
 5842 0002 84B0     		sub	sp, sp, #16
 5843              	.LCFI179:
 5844              		.cfi_def_cfa_offset 24
 5845 0004 00AF     		add	r7, sp, #0
 5846              	.LCFI180:
 5847              		.cfi_def_cfa_register 7
 5848 0006 F860     		str	r0, [r7, #12]
 5849 0008 B960     		str	r1, [r7, #8]
 5850 000a 7A60     		str	r2, [r7, #4]
1381:Core/Src/printf.c ****   return vsnprintf_(s, PRINTF_MAX_POSSIBLE_BUFFER_SIZE, format, arg);
 5851              		.loc 1 1381 10
 5852 000c 7B68     		ldr	r3, [r7, #4]
 5853 000e BA68     		ldr	r2, [r7, #8]
 5854 0010 6FF00041 		mvn	r1, #-2147483648
 5855 0014 F868     		ldr	r0, [r7, #12]
 5856 0016 FFF7FEFF 		bl	vsnprintf_
 5857 001a 0346     		mov	r3, r0
1382:Core/Src/printf.c **** }
 5858              		.loc 1 1382 1
 5859 001c 1846     		mov	r0, r3
 5860 001e 1037     		adds	r7, r7, #16
 5861              	.LCFI181:
 5862              		.cfi_def_cfa_offset 8
 5863 0020 BD46     		mov	sp, r7
 5864              	.LCFI182:
 5865              		.cfi_def_cfa_register 13
 5866              		@ sp needed
 5867 0022 80BD     		pop	{r7, pc}
 5868              		.cfi_endproc
 5869              	.LFE33:
 5871              		.section	.text.vfctprintf,"ax",%progbits
 5872              		.align	1
 5873              		.global	vfctprintf
 5874              		.syntax unified
 5875              		.thumb
 5876              		.thumb_func
 5878              	vfctprintf:
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 129


 5879              	.LFB34:
1383:Core/Src/printf.c **** 
1384:Core/Src/printf.c **** int vfctprintf(void (*out)(char c, void* extra_arg), void* extra_arg, const char* format, va_list a
1385:Core/Src/printf.c **** {
 5880              		.loc 1 1385 1
 5881              		.cfi_startproc
 5882              		@ args = 0, pretend = 0, frame = 40
 5883              		@ frame_needed = 1, uses_anonymous_args = 0
 5884 0000 80B5     		push	{r7, lr}
 5885              	.LCFI183:
 5886              		.cfi_def_cfa_offset 8
 5887              		.cfi_offset 7, -8
 5888              		.cfi_offset 14, -4
 5889 0002 8AB0     		sub	sp, sp, #40
 5890              	.LCFI184:
 5891              		.cfi_def_cfa_offset 48
 5892 0004 00AF     		add	r7, sp, #0
 5893              	.LCFI185:
 5894              		.cfi_def_cfa_register 7
 5895 0006 F860     		str	r0, [r7, #12]
 5896 0008 B960     		str	r1, [r7, #8]
 5897 000a 7A60     		str	r2, [r7, #4]
 5898 000c 3B60     		str	r3, [r7]
1386:Core/Src/printf.c ****   output_gadget_t gadget = function_gadget(out, extra_arg);
 5899              		.loc 1 1386 28
 5900 000e 07F11403 		add	r3, r7, #20
 5901 0012 BA68     		ldr	r2, [r7, #8]
 5902 0014 F968     		ldr	r1, [r7, #12]
 5903 0016 1846     		mov	r0, r3
 5904 0018 FFF7FEFF 		bl	function_gadget
1387:Core/Src/printf.c ****   return vsnprintf_impl(&gadget, format, arg);
 5905              		.loc 1 1387 10
 5906 001c 07F11403 		add	r3, r7, #20
 5907 0020 3A68     		ldr	r2, [r7]
 5908 0022 7968     		ldr	r1, [r7, #4]
 5909 0024 1846     		mov	r0, r3
 5910 0026 FFF7FEFF 		bl	vsnprintf_impl
 5911 002a 0346     		mov	r3, r0
1388:Core/Src/printf.c **** }
 5912              		.loc 1 1388 1
 5913 002c 1846     		mov	r0, r3
 5914 002e 2837     		adds	r7, r7, #40
 5915              	.LCFI186:
 5916              		.cfi_def_cfa_offset 8
 5917 0030 BD46     		mov	sp, r7
 5918              	.LCFI187:
 5919              		.cfi_def_cfa_register 13
 5920              		@ sp needed
 5921 0032 80BD     		pop	{r7, pc}
 5922              		.cfi_endproc
 5923              	.LFE34:
 5925              		.section	.text.printf_,"ax",%progbits
 5926              		.align	1
 5927              		.global	printf_
 5928              		.syntax unified
 5929              		.thumb
 5930              		.thumb_func
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 130


 5932              	printf_:
 5933              	.LFB35:
1389:Core/Src/printf.c **** 
1390:Core/Src/printf.c **** int printf_(const char* format, ...)
1391:Core/Src/printf.c **** {
 5934              		.loc 1 1391 1
 5935              		.cfi_startproc
 5936              		@ args = 4, pretend = 16, frame = 8
 5937              		@ frame_needed = 1, uses_anonymous_args = 1
 5938 0000 0FB4     		push	{r0, r1, r2, r3}
 5939              	.LCFI188:
 5940              		.cfi_def_cfa_offset 16
 5941              		.cfi_offset 0, -16
 5942              		.cfi_offset 1, -12
 5943              		.cfi_offset 2, -8
 5944              		.cfi_offset 3, -4
 5945 0002 80B5     		push	{r7, lr}
 5946              	.LCFI189:
 5947              		.cfi_def_cfa_offset 24
 5948              		.cfi_offset 7, -24
 5949              		.cfi_offset 14, -20
 5950 0004 82B0     		sub	sp, sp, #8
 5951              	.LCFI190:
 5952              		.cfi_def_cfa_offset 32
 5953 0006 00AF     		add	r7, sp, #0
 5954              	.LCFI191:
 5955              		.cfi_def_cfa_register 7
1392:Core/Src/printf.c ****   va_list args;
1393:Core/Src/printf.c ****   va_start(args, format);
 5956              		.loc 1 1393 3
 5957 0008 07F11403 		add	r3, r7, #20
 5958 000c 3B60     		str	r3, [r7]
1394:Core/Src/printf.c ****   const int ret = vprintf_(format, args);
 5959              		.loc 1 1394 19
 5960 000e 3968     		ldr	r1, [r7]
 5961 0010 3869     		ldr	r0, [r7, #16]
 5962 0012 FFF7FEFF 		bl	vprintf_
 5963 0016 7860     		str	r0, [r7, #4]
1395:Core/Src/printf.c ****   va_end(args);
1396:Core/Src/printf.c ****   return ret;
 5964              		.loc 1 1396 10
 5965 0018 7B68     		ldr	r3, [r7, #4]
1397:Core/Src/printf.c **** }
 5966              		.loc 1 1397 1
 5967 001a 1846     		mov	r0, r3
 5968 001c 0837     		adds	r7, r7, #8
 5969              	.LCFI192:
 5970              		.cfi_def_cfa_offset 24
 5971 001e BD46     		mov	sp, r7
 5972              	.LCFI193:
 5973              		.cfi_def_cfa_register 13
 5974              		@ sp needed
 5975 0020 BDE88040 		pop	{r7, lr}
 5976              	.LCFI194:
 5977              		.cfi_restore 14
 5978              		.cfi_restore 7
 5979              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 131


 5980 0024 04B0     		add	sp, sp, #16
 5981              	.LCFI195:
 5982              		.cfi_restore 3
 5983              		.cfi_restore 2
 5984              		.cfi_restore 1
 5985              		.cfi_restore 0
 5986              		.cfi_def_cfa_offset 0
 5987 0026 7047     		bx	lr
 5988              		.cfi_endproc
 5989              	.LFE35:
 5991              		.section	.text.sprintf_,"ax",%progbits
 5992              		.align	1
 5993              		.global	sprintf_
 5994              		.syntax unified
 5995              		.thumb
 5996              		.thumb_func
 5998              	sprintf_:
 5999              	.LFB36:
1398:Core/Src/printf.c **** 
1399:Core/Src/printf.c **** int sprintf_(char* s, const char* format, ...)
1400:Core/Src/printf.c **** {
 6000              		.loc 1 1400 1
 6001              		.cfi_startproc
 6002              		@ args = 4, pretend = 12, frame = 16
 6003              		@ frame_needed = 1, uses_anonymous_args = 1
 6004 0000 0EB4     		push	{r1, r2, r3}
 6005              	.LCFI196:
 6006              		.cfi_def_cfa_offset 12
 6007              		.cfi_offset 1, -12
 6008              		.cfi_offset 2, -8
 6009              		.cfi_offset 3, -4
 6010 0002 80B5     		push	{r7, lr}
 6011              	.LCFI197:
 6012              		.cfi_def_cfa_offset 20
 6013              		.cfi_offset 7, -20
 6014              		.cfi_offset 14, -16
 6015 0004 85B0     		sub	sp, sp, #20
 6016              	.LCFI198:
 6017              		.cfi_def_cfa_offset 40
 6018 0006 00AF     		add	r7, sp, #0
 6019              	.LCFI199:
 6020              		.cfi_def_cfa_register 7
 6021 0008 7860     		str	r0, [r7, #4]
1401:Core/Src/printf.c ****   va_list args;
1402:Core/Src/printf.c ****   va_start(args, format);
 6022              		.loc 1 1402 3
 6023 000a 07F12003 		add	r3, r7, #32
 6024 000e BB60     		str	r3, [r7, #8]
1403:Core/Src/printf.c ****   const int ret = vsprintf_(s, format, args);
 6025              		.loc 1 1403 19
 6026 0010 BA68     		ldr	r2, [r7, #8]
 6027 0012 F969     		ldr	r1, [r7, #28]
 6028 0014 7868     		ldr	r0, [r7, #4]
 6029 0016 FFF7FEFF 		bl	vsprintf_
 6030 001a F860     		str	r0, [r7, #12]
1404:Core/Src/printf.c ****   va_end(args);
1405:Core/Src/printf.c ****   return ret;
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 132


 6031              		.loc 1 1405 10
 6032 001c FB68     		ldr	r3, [r7, #12]
1406:Core/Src/printf.c **** }
 6033              		.loc 1 1406 1
 6034 001e 1846     		mov	r0, r3
 6035 0020 1437     		adds	r7, r7, #20
 6036              	.LCFI200:
 6037              		.cfi_def_cfa_offset 20
 6038 0022 BD46     		mov	sp, r7
 6039              	.LCFI201:
 6040              		.cfi_def_cfa_register 13
 6041              		@ sp needed
 6042 0024 BDE88040 		pop	{r7, lr}
 6043              	.LCFI202:
 6044              		.cfi_restore 14
 6045              		.cfi_restore 7
 6046              		.cfi_def_cfa_offset 12
 6047 0028 03B0     		add	sp, sp, #12
 6048              	.LCFI203:
 6049              		.cfi_restore 3
 6050              		.cfi_restore 2
 6051              		.cfi_restore 1
 6052              		.cfi_def_cfa_offset 0
 6053 002a 7047     		bx	lr
 6054              		.cfi_endproc
 6055              	.LFE36:
 6057              		.section	.text.snprintf_,"ax",%progbits
 6058              		.align	1
 6059              		.global	snprintf_
 6060              		.syntax unified
 6061              		.thumb
 6062              		.thumb_func
 6064              	snprintf_:
 6065              	.LFB37:
1407:Core/Src/printf.c **** 
1408:Core/Src/printf.c **** int snprintf_(char* s, size_t n, const char* format, ...)
1409:Core/Src/printf.c **** {
 6066              		.loc 1 1409 1
 6067              		.cfi_startproc
 6068              		@ args = 4, pretend = 8, frame = 16
 6069              		@ frame_needed = 1, uses_anonymous_args = 1
 6070 0000 0CB4     		push	{r2, r3}
 6071              	.LCFI204:
 6072              		.cfi_def_cfa_offset 8
 6073              		.cfi_offset 2, -8
 6074              		.cfi_offset 3, -4
 6075 0002 80B5     		push	{r7, lr}
 6076              	.LCFI205:
 6077              		.cfi_def_cfa_offset 16
 6078              		.cfi_offset 7, -16
 6079              		.cfi_offset 14, -12
 6080 0004 84B0     		sub	sp, sp, #16
 6081              	.LCFI206:
 6082              		.cfi_def_cfa_offset 32
 6083 0006 00AF     		add	r7, sp, #0
 6084              	.LCFI207:
 6085              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 133


 6086 0008 7860     		str	r0, [r7, #4]
 6087 000a 3960     		str	r1, [r7]
1410:Core/Src/printf.c ****   va_list args;
1411:Core/Src/printf.c ****   va_start(args, format);
 6088              		.loc 1 1411 3
 6089 000c 07F11C03 		add	r3, r7, #28
 6090 0010 BB60     		str	r3, [r7, #8]
1412:Core/Src/printf.c ****   const int ret = vsnprintf_(s, n, format, args);
 6091              		.loc 1 1412 19
 6092 0012 BB68     		ldr	r3, [r7, #8]
 6093 0014 BA69     		ldr	r2, [r7, #24]
 6094 0016 3968     		ldr	r1, [r7]
 6095 0018 7868     		ldr	r0, [r7, #4]
 6096 001a FFF7FEFF 		bl	vsnprintf_
 6097 001e F860     		str	r0, [r7, #12]
1413:Core/Src/printf.c ****   va_end(args);
1414:Core/Src/printf.c ****   return ret;
 6098              		.loc 1 1414 10
 6099 0020 FB68     		ldr	r3, [r7, #12]
1415:Core/Src/printf.c **** }
 6100              		.loc 1 1415 1
 6101 0022 1846     		mov	r0, r3
 6102 0024 1037     		adds	r7, r7, #16
 6103              	.LCFI208:
 6104              		.cfi_def_cfa_offset 16
 6105 0026 BD46     		mov	sp, r7
 6106              	.LCFI209:
 6107              		.cfi_def_cfa_register 13
 6108              		@ sp needed
 6109 0028 BDE88040 		pop	{r7, lr}
 6110              	.LCFI210:
 6111              		.cfi_restore 14
 6112              		.cfi_restore 7
 6113              		.cfi_def_cfa_offset 8
 6114 002c 02B0     		add	sp, sp, #8
 6115              	.LCFI211:
 6116              		.cfi_restore 3
 6117              		.cfi_restore 2
 6118              		.cfi_def_cfa_offset 0
 6119 002e 7047     		bx	lr
 6120              		.cfi_endproc
 6121              	.LFE37:
 6123              		.section	.text.fctprintf,"ax",%progbits
 6124              		.align	1
 6125              		.global	fctprintf
 6126              		.syntax unified
 6127              		.thumb
 6128              		.thumb_func
 6130              	fctprintf:
 6131              	.LFB38:
1416:Core/Src/printf.c **** 
1417:Core/Src/printf.c **** int fctprintf(void (*out)(char c, void* extra_arg), void* extra_arg, const char* format, ...)
1418:Core/Src/printf.c **** {
 6132              		.loc 1 1418 1
 6133              		.cfi_startproc
 6134              		@ args = 4, pretend = 8, frame = 16
 6135              		@ frame_needed = 1, uses_anonymous_args = 1
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 134


 6136 0000 0CB4     		push	{r2, r3}
 6137              	.LCFI212:
 6138              		.cfi_def_cfa_offset 8
 6139              		.cfi_offset 2, -8
 6140              		.cfi_offset 3, -4
 6141 0002 80B5     		push	{r7, lr}
 6142              	.LCFI213:
 6143              		.cfi_def_cfa_offset 16
 6144              		.cfi_offset 7, -16
 6145              		.cfi_offset 14, -12
 6146 0004 84B0     		sub	sp, sp, #16
 6147              	.LCFI214:
 6148              		.cfi_def_cfa_offset 32
 6149 0006 00AF     		add	r7, sp, #0
 6150              	.LCFI215:
 6151              		.cfi_def_cfa_register 7
 6152 0008 7860     		str	r0, [r7, #4]
 6153 000a 3960     		str	r1, [r7]
1419:Core/Src/printf.c ****   va_list args;
1420:Core/Src/printf.c ****   va_start(args, format);
 6154              		.loc 1 1420 3
 6155 000c 07F11C03 		add	r3, r7, #28
 6156 0010 BB60     		str	r3, [r7, #8]
1421:Core/Src/printf.c ****   const int ret = vfctprintf(out, extra_arg, format, args);
 6157              		.loc 1 1421 19
 6158 0012 BB68     		ldr	r3, [r7, #8]
 6159 0014 BA69     		ldr	r2, [r7, #24]
 6160 0016 3968     		ldr	r1, [r7]
 6161 0018 7868     		ldr	r0, [r7, #4]
 6162 001a FFF7FEFF 		bl	vfctprintf
 6163 001e F860     		str	r0, [r7, #12]
1422:Core/Src/printf.c ****   va_end(args);
1423:Core/Src/printf.c ****   return ret;
 6164              		.loc 1 1423 10
 6165 0020 FB68     		ldr	r3, [r7, #12]
1424:Core/Src/printf.c **** }
 6166              		.loc 1 1424 1
 6167 0022 1846     		mov	r0, r3
 6168 0024 1037     		adds	r7, r7, #16
 6169              	.LCFI216:
 6170              		.cfi_def_cfa_offset 16
 6171 0026 BD46     		mov	sp, r7
 6172              	.LCFI217:
 6173              		.cfi_def_cfa_register 13
 6174              		@ sp needed
 6175 0028 BDE88040 		pop	{r7, lr}
 6176              	.LCFI218:
 6177              		.cfi_restore 14
 6178              		.cfi_restore 7
 6179              		.cfi_def_cfa_offset 8
 6180 002c 02B0     		add	sp, sp, #8
 6181              	.LCFI219:
 6182              		.cfi_restore 3
 6183              		.cfi_restore 2
 6184              		.cfi_def_cfa_offset 0
 6185 002e 7047     		bx	lr
 6186              		.cfi_endproc
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 135


 6187              	.LFE38:
 6189              		.text
 6190              	.Letext0:
 6191              		.file 2 "C:/Program Files (x86)/Arm GNU Toolchain arm-none-eabi/13.2 Rel1/lib/gcc/arm-none-eabi/13
 6192              		.file 3 "C:/Program Files (x86)/Arm GNU Toolchain arm-none-eabi/13.2 Rel1/lib/gcc/arm-none-eabi/13
 6193              		.file 4 "C:/Program Files (x86)/Arm GNU Toolchain arm-none-eabi/13.2 Rel1/arm-none-eabi/include/ma
 6194              		.file 5 "C:/Program Files (x86)/Arm GNU Toolchain arm-none-eabi/13.2 Rel1/arm-none-eabi/include/sy
 6195              		.file 6 "C:/Program Files (x86)/Arm GNU Toolchain arm-none-eabi/13.2 Rel1/arm-none-eabi/include/st
 6196              		.file 7 "<built-in>"
 6197              		.file 8 "Core/Inc/printf.h"
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 136


DEFINED SYMBOLS
                            *ABS*:00000000 printf.c
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:21     .text.get_bit_access:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:26     .text.get_bit_access:00000000 get_bit_access
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:70     .text.get_sign_bit:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:75     .text.get_sign_bit:00000000 get_sign_bit
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:121    .text.get_exp2:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:126    .text.get_exp2:00000000 get_exp2
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:175    .text.putchar_via_gadget:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:180    .text.putchar_via_gadget:00000000 putchar_via_gadget
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:261    .text.append_termination_with_gadget:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:266    .text.append_termination_with_gadget:00000000 append_termination_with_gadget
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:359    .text.putchar_wrapper:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:364    .text.putchar_wrapper:00000000 putchar_wrapper
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:402    .text.discarding_gadget:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:407    .text.discarding_gadget:00000000 discarding_gadget
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:470    .text.buffer_gadget:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:475    .text.buffer_gadget:00000000 buffer_gadget
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:548    .text.function_gadget:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:553    .text.function_gadget:00000000 function_gadget
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:610    .text.extern_putchar_gadget:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:615    .text.extern_putchar_gadget:00000000 extern_putchar_gadget
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:652    .text.extern_putchar_gadget:0000001c $d
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:657    .text.strnlen_s_:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:662    .text.strnlen_s_:00000000 strnlen_s_
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:728    .text.is_digit_:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:733    .text.is_digit_:00000000 is_digit_
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:789    .text.atou_:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:794    .text.atou_:00000000 atou_
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:867    .text.out_rev_:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:872    .text.out_rev_:00000000 out_rev_
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:991    .text.print_integer_finalization:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:996    .text.print_integer_finalization:00000000 print_integer_finalization
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:1343   .text.print_integer:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:1348   .text.print_integer:00000000 print_integer
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:1512   .rodata.powers_of_10:00000000 $d
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:1515   .rodata.powers_of_10:00000000 powers_of_10
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:1561   .text.get_components:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:1566   .text.get_components:00000000 get_components
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:1841   .text.get_components:00000218 $d
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:1848   .text.apply_scaling:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:1853   .text.apply_scaling:00000000 apply_scaling
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:1914   .text.unapply_scaling:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:1919   .text.unapply_scaling:00000000 unapply_scaling
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:1980   .text.update_normalization:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:1985   .text.update_normalization:00000000 update_normalization
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:2120   .text.get_normalized_components:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:2125   .text.get_normalized_components:00000000 get_normalized_components
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:2364   .text.get_normalized_components:000001f0 $d
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:2371   .text.print_broken_up_decimal:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:2376   .text.print_broken_up_decimal:00000000 print_broken_up_decimal
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:2780   .text.print_decimal_number:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:2785   .text.print_decimal_number:00000000 print_decimal_number
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:2849   .text.bastardized_floor:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:2854   .text.bastardized_floor:00000000 bastardized_floor
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:2927   .text.log10_of_positive:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:2932   .text.log10_of_positive:00000000 log10_of_positive
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 137


C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:3080   .text.log10_of_positive:00000128 $d
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:3095   .text.pow10_of_int:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:3100   .text.pow10_of_int:00000000 pow10_of_int
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:3300   .text.pow10_of_int:00000198 $d
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:3317   .text.print_exponential_number:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:3322   .text.print_exponential_number:00000000 print_exponential_number
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:3809   .text.print_exponential_number:00000364 $d
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:3813   .text.print_exponential_number:0000036c $t
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:3879   .rodata:00000000 $d
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:3892   .text.print_floating_point:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:3897   .text.print_floating_point:00000000 print_floating_point
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:4116   .text.print_floating_point:00000170 $d
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:4129   .text.parse_flags:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:4134   .text.parse_flags:00000000 parse_flags
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:4169   .text.parse_flags:00000020 $d
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:4186   .text.parse_flags:00000064 $t
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:4290   .text.format_string_loop:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:4295   .text.format_string_loop:00000000 format_string_loop
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:4494   .text.format_string_loop:00000140 $d
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:4513   .text.format_string_loop:0000018c $t
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:4652   .text.format_string_loop:00000290 $d
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:4736   .text.format_string_loop:000003e0 $t
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:5665   .text.format_string_loop:00000a5c $d
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:5671   .text.vsnprintf_impl:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:5676   .text.vsnprintf_impl:00000000 vsnprintf_impl
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:5721   .text.vprintf_:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:5727   .text.vprintf_:00000000 vprintf_
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:5771   .text.vsnprintf_:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:5777   .text.vsnprintf_:00000000 vsnprintf_
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:5825   .text.vsprintf_:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:5831   .text.vsprintf_:00000000 vsprintf_
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:5872   .text.vfctprintf:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:5878   .text.vfctprintf:00000000 vfctprintf
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:5926   .text.printf_:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:5932   .text.printf_:00000000 printf_
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:5992   .text.sprintf_:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:5998   .text.sprintf_:00000000 sprintf_
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:6058   .text.snprintf_:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:6064   .text.snprintf_:00000000 snprintf_
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:6124   .text.fctprintf:00000000 $t
C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s:6130   .text.fctprintf:00000000 fctprintf
                           .group:00000000 wm4.0.f079ee757cd02b273648dd4f0fb0fb55
                           .group:00000000 wm4.stdarg.h.31.f7f4f3bfddce9ed034956076d59396f7
                           .group:00000000 wm4.stddef.h.39.0dc9006b34572d4d9cae4c8b422c4971
                           .group:00000000 wm4.printf.h.53.c6eead4a12e76e178f01f01f22acf3df
                           .group:00000000 wm4._newlib_version.h.4.6d111ab2e95434b664b53815e5c8ccba
                           .group:00000000 wm4.features.h.33.2eefb68b261e70563a8ac654e712169f
                           .group:00000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:00000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.newlib.h.7.94397327844a69ac8ce8d46310803afa
                           .group:00000000 wm4.cdefs.h.49.70fc7af612f78ddcace70fdd90b5623b
                           .group:00000000 wm4.syslimits.h.34.de5cbd310098bc5895998b6bde577ed2
                           .group:00000000 wm4.limits.h.9.70fb0ada6f71b16202a66baaa6d8ea70
                           .group:00000000 wm4.limits.h.60.56a1ae353e2028a24298ec6463b8b593
                           .group:00000000 wm4.stdbool.h.29.c08aa3eec75cf5b9b5003883f43253f0
ARM GAS  C:\Users\Siddhesh\AppData\Local\Temp\cchV9g7Q.s 			page 138


                           .group:00000000 wm4.float.h.29.0e9d9baf95ec39f9555dc80c6e28186b

UNDEFINED SYMBOLS
putchar_
__aeabi_uldivmod
__aeabi_d2lz
__aeabi_l2d
__aeabi_dsub
__aeabi_dmul
__aeabi_dcmpgt
__aeabi_dcmpge
__aeabi_dcmpeq
__aeabi_dcmplt
__aeabi_ddiv
__aeabi_dcmple
__aeabi_ldivmod
__aeabi_d2iz
__aeabi_i2d
__aeabi_dadd
